 
      {
        role: "user",
        parts: [
          {text: "import React, { useState } from 'react';\n\n/**\n * @typedef {Object} AccordionContentProps\n * @property {boolean} isOpen - Whether the accordion content is open or closed.\n * @property {React.ReactNode} children - The content to be displayed inside the accordion.\n */\n\n/**\n * The content section of an accordion item.\n *\n * This component should be used as a child of `AccordionItem`.\n * It displays the content associated with an accordion item.\n *\n * @param {AccordionContentProps} props - The component props.\n * @returns {JSX.Element} The rendered AccordionContent component. \n */\nexport const AccordionContent = ({ isOpen, children }) => {\n    return (\n        <div\n            className={` transition-max-height duration-300 ease-in-out overflow-hidden transform  ${isOpen ? 'min-h-fit duration-400 ' : 'max-h-0 duration-400 '} `}\n        >\n            <div className='px-4 py-3'>\n                {children}\n            </div>\n        </div>\n    );\n};\n\n/**\n * @typedef {Object} AccordionTriggerProps\n * @property {boolean} isOpen - Whether the accordion item is open or closed.\n * @property {Function} onClick - The function to be called when the trigger is clicked.\n * @property {React.ReactNode} children - The content to be displayed inside the trigger button.\n */\n\n/**\n * The trigger button for an accordion item.\n *\n * This component should be used as a child of `AccordionItem`.\n * It acts as a button that toggles the open/closed state of the accordion item.\n *\n * @param {AccordionTriggerProps} props - The component props.\n * @returns {JSX.Element} The rendered AccordionTrigger component.\n */\nexport const AccordionTrigger = ({ isOpen, onClick, children }) => {\n    return (\n        <>\n            <button\n                onClick={onClick}\n                className=\"w-full px-4 py-3 text-left font-medium flex justify-between items-center focus:outline-none\"\n            >\n                {children}\n\n                <svg\n                    className={` h-4 w-4 transition-transform transform ${isOpen ? 'rotate-180' : ''}`}\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"currentColor\"\n                >\n\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n                        clipRule=\"evenodd\"\n                    />\n                </svg>\n            </button>\n        </>\n    );\n};\n\n/**\n * @typedef {Object} AccordionItemProps\n * @property {React.ReactNode} children - The children of the AccordionItem component.\n * @property {any} value - The value associated with the accordion item.\n */\n\n/**\n * An individual accordion item.\n *\n * This component represents a single item within an accordion.\n * It should contain `AccordionTrigger` and `AccordionContent` as children.\n *\n * @param {AccordionItemProps} props - The component props.\n * @returns {JSX.Element} The rendered AccordionItem component.\n */\nexport const AccordionItem = ({ children, value }) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggleOpen = () => {\n        setIsOpen(!isOpen);\n    };\n\n    return (\n        <div className=\" overflow-hidden mb-2\">\n            {React.Children.map(children, (child) => {\n                if (child.type === AccordionTrigger) {\n                    return React.cloneElement(child, {\n                        isOpen: isOpen,\n                        onClick: toggleOpen,\n                    });\n                } else if (child.type === AccordionContent) {\n                    return React.cloneElement(child, {\n                        isOpen: isOpen,\n                    });\n                }\n                return null;\n            })}\n\n            <hr className='border-t-gray-500 ' />\n        </div>\n    );\n};\n\n/**\n * @typedef {Object} AccordionProps\n * @property {React.ReactNode} children - The children of the Accordion component.\n */\n\n/**\n * The main accordion component.\n *\n * This component acts as a container for multiple `AccordionItem` components.\n * It provides the overall structure and styling for the accordion.\n *\n * @param {AccordionProps} props - The component props.\n * @returns {JSX.Element} The rendered Accordion component.\n */\nexport const Accordion = ({ children }) => {\n    return (\n        <div className='p-4 border border-gray-500 rounded-md'>\n            {children}\n        </div>\n    );\n};"},
          {text: "\"use client\"; \nimport { useState, useEffect, useRef } from 'react';\nimport Button from './Button';\n\n/**\n * A versatile alert component that can be used for both informational messages and confirmation dialogs.\n * @param {Object} props - The component props.\n * @param {React.ReactNode} props.children - The content of the alert message.\n * @param {('success'|'warning'|'error'|'info')} [props.variant='info'] - The visual style of the alert.\n * @param {('xs'|'sm'|'md'|'lg'|'xl')} [props.size='md'] - The size of the alert.\n * @param {number} [props.duration=10000] - The duration in milliseconds to display the alert before auto-closing (ignored for confirmation dialogs).\n * @param {function} [props.onClose] - Callback function triggered when the alert is closed (either by auto-close, clicking the close button, or clicking \"Cancel\").\n * @param {function} [props.onConfirm] - Callback function triggered when the \"Confirm\" button is clicked (turns the alert into a confirmation dialog).\n * @param {boolean} [props.showCloseButton=true] - Whether to show the close button (hidden automatically for confirmation dialogs).\n * @param {string} [props.confirmButtonLabel='Confirm'] - The label for the \"Confirm\" button.\n * @param {string} [props.cancelButtonLabel='Cancel'] - The label for the \"Cancel\" button.\n * @param {('top'|'top-left'|'top-right'|'bottom'|'bottom-left'|'bottom-right'|'center')} [props.position='top'] - The position of the alert on the screen.\n * @returns {JSX.Element} The rendered Alert component.\n */\n\nconst Alert = ({\n    children,\n    variant = 'info',\n    size = 'md',\n    duration = 10000,\n    onClose,\n    onConfirm,\n    showCloseButton = true,\n    confirmButtonLabel = 'Confirm',\n    cancelButtonLabel = 'Cancel',\n    position = 'top' // Default position\n}) => {\n    const [isOpen, setIsOpen] = useState(true);\n    const timerRef = useRef(null);\n\n    const variantClasses = {\n        success: 'bg-green-50 border border-green-400 text-green-900',\n        warning: 'bg-yellow-50 border border-yellow-400 text-yellow-900',\n        error: 'bg-red-50 border border-red-400 text-red-900',\n        info: 'bg-blue-50 border border-blue-400 text-blue-900',\n    };\n\n    const sizeClasses = {\n        xs: 'text-xs p-1', // Extra small size\n        sm: 'text-sm p-2',\n        md: 'text-base p-3',\n        lg: 'text-lg p-4',\n        xl: 'text-xl p-5'  // Extra large size\n    };\n\n    const positionClasses = {\n        top: 'top-4 left-1/2 transform -translate-x-1/2',\n        'top-left': 'top-4 left-4',\n        'top-right': 'top-4 right-4',\n        bottom: 'bottom-4 left-1/2 transform -translate-x-1/2',\n        'bottom-left': 'bottom-4 left-4',\n        'bottom-right': 'bottom-4 right-4',\n        center: 'top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2',\n    };\n\n    useEffect(() => {\n        if (duration > 0 && !onConfirm) {\n            timerRef.current = setTimeout(() => {\n                setIsOpen(false);\n                onClose && onClose();\n            }, duration);\n        }\n\n        return () => clearTimeout(timerRef.current);\n    }, [duration, onClose, onConfirm]);\n\n    if (!isOpen) return null;\n\n    return (\n        <div className={`fixed z-50 rounded-lg shadow-md ${variantClasses[variant]} ${sizeClasses[size]} flex flex-col justify-between w-full max-w-md transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'} ${positionClasses[position]}`}>\n            <div className=\"p-3 text-left\">{children}</div>\n            <div className=\"flex items-center justify-end w-full space-x-2 border-t border-gray-200 p-3\">\n                {onConfirm && (\n                    <>\n                        <Button\n                            size={size}\n                            variant=\"primary\"\n                            onClick={() => {\n                                setIsOpen(false);\n                                onConfirm();\n                            }}\n                        >\n                            {confirmButtonLabel}\n                        </Button>\n                        <Button\n                            size={size}\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setIsOpen(false);\n                                onClose && onClose();\n                            }}\n                        >\n                            {cancelButtonLabel}\n                        </Button>\n                    </>\n                )}\n                {showCloseButton && !onConfirm &&\n                    (\n                        <Button variant=\"icon\" size={size} onClick={() => { setIsOpen(false); onClose && onClose(); }}>\n                            <svg className=\"h-5 w-5 text-gray-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                            </svg>\n                        </Button>\n                    )}\n            </div>\n        </div>\n    );\n}\n\nexport default Alert;\n"},
          {text: "\"use client\";\n\n/**\n * A versatile badge component for displaying concise information based on UI requirements.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The content to display within the badge.\n * @param {'success'|'warning'|'error'|'info'|'default'} [props.variant='default'] - The UI-based variant of the badge (success, warning, etc.).\n * @param {'solid'|'outline'|'default'} [props.variantStyle='default'] - The style of the badge (solid background, outlined, or light background).\n * @param {'xs'|'sm'|'md'|'lg'|'xl'} [props.size='md'] - The size of the badge.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the badge.\n * @param {Object} [props.rest] - Any other props are spread to the underlying `<span>` element.\n *\n * @example\n * // Basic usage\n * <Badge>Default</Badge>\n *\n * @example\n * // With different variant, style, and size\n * <Badge variant=\"success\" variantStyle=\"outline\" size=\"lg\">\n *   Success Outline (Large)\n * </Badge>\n */\n\nexport default function Badge({\n    children,\n    variant = 'default',\n    variantStyle = 'default',\n    size = 'md',\n    className = '',\n    ...rest\n}) {\n    // Define the variant classes based on the style and variant\n    const variantClasses = {\n        success: `${variantStyle === 'solid' ? 'bg-green-500 text-white' : variantStyle === 'outline' ? 'border border-green-500 text-green-500' : 'bg-green-100 text-green-700'}`,\n        warning: `${variantStyle === 'solid' ? 'bg-yellow-500 text-white' : variantStyle === 'outline' ? 'border border-yellow-500 text-yellow-500' : 'bg-yellow-100 text-yellow-700'}`,\n        error: `${variantStyle === 'solid' ? 'bg-red-500 text-white' : variantStyle === 'outline' ? 'border border-red-500 text-red-500' : 'bg-red-100 text-red-700'}`,\n        info: `${variantStyle === 'solid' ? 'bg-blue-500 text-white' : variantStyle === 'outline' ? 'border border-blue-500 text-blue-500' : 'bg-blue-100 text-blue-700'}`,\n        default: `${variantStyle === 'solid' ? 'bg-gray-500 text-white' : variantStyle === 'outline' ? 'border border-gray-500 text-gray-500' : 'bg-gray-100 text-gray-700'}`,\n    };\n\n    // Define the size classes\n    const sizeClasses = {\n        xs: 'text-xs px-1 py-0.5',  // Extra small\n        sm: 'text-sm px-1.5 py-0.5',    // Small\n        md: 'text-base px-2 py-1',  // Medium (default)\n        lg: 'text-lg px-2.5 py-1',  // Large\n        xl: 'text-xl px-3 py-2',  // Extra large\n    };\n\n    return (\n        <span\n            className={`rounded-full  inline-flex items-center font-medium ${variantClasses[variant]} ${sizeClasses[size] ? sizeClasses[size]  : \" text-base px-2 py-1 \" } ${className}`}\n            {...rest}\n        >\n            {children}\n        </span>\n    );\n}\n"},
          {text: "\"use client\";\nimport React, { useState } from 'react';\n\n/**\n * @component Breadcrumb - A React component for rendering breadcrumb navigation.\n *\n * @param {React.ReactNode} children - The child elements of the breadcrumb.\n * @param {string} [className] - Additional CSS classes to apply to the breadcrumb container.\n * @param {React.HTMLAttributes<HTMLDivElement>} [rest] - Additional props to spread to the breadcrumb container.\n *\n * @example\n * <Breadcrumb>\n *   <BreadcrumbItem>\n *     <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n *   </BreadcrumbItem>\n *   <BreadcrumbSeparator />\n *   <BreadcrumbItem>\n *     <BreadcrumbLink href=\"/about\">About</BreadcrumbLink>\n *   </BreadcrumbItem>\n * </Breadcrumb>\n */\n\nexport const Breadcrumb = ({ children, className, ...rest }) => {\n    return (\n        <nav aria-label=\"Breadcrumb\" className={className} {...rest}>\n            <ol className=\"flex items-center space-x-1 md:space-x-2\">\n                {children}\n            </ol>\n        </nav>\n    );\n};\n\n/**\n * @component BreadcrumbItem - A single item within a breadcrumb.\n *\n * @param {React.ReactNode} children - The child elements of the breadcrumb item.\n * @param {string} [className] - Additional CSS classes to apply to the breadcrumb item.\n * @param {React.HTMLAttributes<HTMLLIElement>} [rest] - Additional props to spread to the breadcrumb item.\n */\nexport const BreadcrumbItem = ({ children, className, ...rest }) => {\n    return (\n        <li className={className} {...rest}>\n            {children}\n        </li>\n    );\n};\n\n/**\n * @component BreadcrumbLink - A breadcrumb item that functions as a link.\n *\n * @param {string} href - The URL to navigate to when the link is clicked.\n * @param {React.ReactNode} children - The text content of the link.\n * @param {string} [className] - Additional CSS classes to apply to the link.\n * @param {boolean} [active=false] - Whether the link is currently active.\n * @param {React.AnchorHTMLAttributes<HTMLAnchorElement>} [rest] - Additional props to spread to the link.\n */\nexport const BreadcrumbLink = ({ href, children, className, active, ...rest }) => {\n    return (\n        <a\n            href={href}\n            className={`text-sm font-medium  ${active ? 'text-gray-100 dark:text-gray-100' : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-500'} ${className}`}\n            {...rest}\n        >\n            {children}\n        </a>\n    );\n};\n\n/**\n * @component BreadcrumbSeparator - A separator between breadcrumb items.\n *\n * @param {React.ReactNode} [children] - Optional custom separator content.\n * @param {string} [className] - Additional CSS classes to apply to the separator.\n * @param {React.HTMLAttributes<HTMLSpanElement>} [rest] - Additional props to spread to the separator.\n */\nexport const BreadcrumbSeparator = ({ children, className, ...rest }) => {\n    return (\n        <span\n            className={`text-gray-500 dark:text-gray-400 mx-1 md:mx-2 text-sm ${className}`}\n            {...rest}\n        >\n            {children ? children : '/'}\n        </span>\n    );\n};\n\n/**\n * @component BreadcrumbEllipsis - An ellipsis icon used to indicate omitted breadcrumb items.\n *\n * @param {string} [className] - Additional CSS classes to apply to the ellipsis icon.\n * @param {React.SVGProps<SVGSVGElement>} [rest] - Additional props to spread to the ellipsis icon.\n */\nexport const BreadcrumbEllipsis = ({ className, ...rest }) => {\n    return (\n        <svg\n            className={`h-4 w-4 text-gray-400 ${className}`}\n            viewBox=\"0 0 24 24\"\n            fill=\"currentColor\"\n            {...rest}\n        >\n            <path d=\"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n            />\n        </svg>\n    );\n};\n\n/**\n * @component BreadcrumbList - A container for rendering a list of breadcrumb items.\n *\n * @param {React.ReactNode} children - The child elements of the breadcrumb list.\n * @param {string} [className] - Additional CSS classes to apply to the breadcrumb list.\n * @param {React.HTMLAttributes<HTMLOListElement>} [rest] - Additional props to spread to the breadcrumb list.\n */\nexport const BreadcrumbList = ({ children, className, ...rest }) => {\n    return (\n        <ol className={`flex items-center space-x-1 md:space-x-2 ${className}`} {...rest}>\n            {children}\n        </ol>\n    );\n};\n\n/**\n * @component BreadcrumbPage - A breadcrumb item that displays the current page name.\n *\n * @param {React.ReactNode} children - The text content of the page name.\n * @param {string} [className] - Additional CSS classes to apply to the page name.\n * @param {React.HTMLAttributes<HTMLSpanElement>} [rest] - Additional props to spread to the page name.\n */\nexport const BreadcrumbPage = ({ children, className, ...rest }) => {\n    return (\n        <span\n            className={`text-sm font-medium text-gray-700 dark:text-gray-500 ${className}`}\n            {...rest}\n        >\n            {children}\n        </span>\n    );\n};\n\n/**\n * @component BreadcrumbDropdown - A breadcrumb item that displays a dropdown menu.\n *\n * @param {React.ReactNode} children - The child elements of the dropdown menu.\n * @param {string} [className] - Additional CSS classes to apply to the dropdown container.\n * @param {React.HTMLAttributes<HTMLLIElement>} [rest] - Additional props to spread to the dropdown container.\n */\nexport const BreadcrumbDropdown = ({ children, className, ...rest }) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggleDropdown = () => {\n        setIsOpen(!isOpen);\n    };\n\n    return (\n        <li className={`relative ${className}`} {...rest}>\n            <div onClick={toggleDropdown} className=\"cursor-pointer text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-500 flex items-center\">\n                Dropdown\n                <svg\n                    className={`h-4 w-4 ml-1 transform transition-transform duration-200 ${isOpen ? 'rotate-180' : ' '}`}\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                >\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\" />\n                </svg>\n            </div>\n            {isOpen && (\n                <ul className=\"absolute left-0 mt-2 w-48 rounded-md shadow-lg border border-gray-500 \">\n                    {React.Children.map(children, (child, index) => (\n                        <li key={index} className=\"px-4 py-2 hover:shadow-md\">\n                            {child}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </li>\n    );\n};\n"},
          {text: "\"use client\";\n\n/**\n* @param {Object} props\n* @param {React.ReactNode} props.children\n* @param {('default'|'outline'|'primary'|'secondary'|'danger'|'success'|'warning'|'info')} props.variant - The button variant.\n* @param {('md'|'sm'|'lg'|'xl'|'icon')} [props.size='md'] - The button size.\n* @param {string} props.className - Additional class names to apply.\n* @param {React.ButtonHTMLAttributes<HTMLButtonElement>} props.rest - All other props are spread to the button element.\n*/\n\nexport default function Button({ children, variant = 'default', size = 'md', className, ...rest }) {\n    const varients = {\n        default: 'bg-white hover:bg-white/90 text-black',\n        outline: 'bg-gray-900 hover:bg-gray-800 text-gray-100 border border-gray-700 hover:border-transparent',\n        primary: 'bg-blue-500 hover:bg-blue-700 text-white',\n        secondary: 'bg-gray-800 hover:bg-gray-700 text-gray-300',\n        danger: 'bg-red-500 hover:bg-red-800 text-white',\n        success: 'bg-green-500 hover:bg-green-700 text-white  ',\n        warning: 'bg-yellow-400 hover:bg-yellow-500 text-white ',\n        info: 'bg-blue-400 hover:bg-blue-500 text-white',\n    }\n    const sizes = {\n        xs: \"px-1 py-1 text-xs font-thin\",\n        sm: \" px-2 py-1 text-sm font-light\",\n        md: \" px-3 py-1.5 text-base font-medium\",\n        lg: \" px-5 py-2 text-lg font-semibold\",\n        xl: \" px-6  py-2.5 text-xl font-extrabold\",\n        icon: \" py-2 px-2 text-base \",\n    };\n\n    const clases = `duration-100 rounded-md disabled:opacity-50 disabled:cursor-not-allowed ${varients[variant]} ${sizes[size] ? sizes[size] : \" px-4 py-2 text-base \"} ${className}`\n\n    return (\n        <button\n            className={clases}\n            {...rest}\n        >\n            {children}\n        </button>\n    )\n}\n"},
          {text: "import React, { useState, useEffect, useRef } from 'react';\n\n/**\n * A simple and interactive calendar component with date range selection.\n *\n * The Calendar component allows users to navigate between months and select dates.\n * It provides a visual representation of a calendar month with day names, dates, and\n * highlights for the current day, selected date, and date range.\n *\n * @param {object} props - The component's props.\n * @param {Date} [props.initialDate] - The initial date to display in the calendar. Defaults to the current date.\n * @param {Date} [props.toDate] - The start date of the allowed date range. If not provided, there's no start limit.\n * @param {Date} [props.fromDate] - The end date of the allowed date range. If not provided, there's no end limit.\n * @param {string} [props.placeholder=\"Select date\"] - The placeholder text for the input box.\n * @param {Array<string>} [props.theme=['blue', 'gray']] - An array of two Tailwind CSS color names for theming: [primary, secondary].\n * @param {function(Date)} [props.onChange] - A callback function that is triggered when the selected date changes. The selected date is passed as an argument.\n * \n * @returns {JSX.Element} The rendered Calendar component.\n * \n * @example\n * <Calendar \n *   initialDate={new Date(2024, 0, 1)} \n *   toDate={new Date(2024, 2, 15)} \n *   fromDate={new Date(2024, 3, 30)} \n *   placeholder=\"Choose a date\"\n *   theme={['red', 'gray']}\n *   onChange={(date) => console.log(\"Selected date:\", date)} \n * />\n */\nconst Calendar = ({ className, initialDate, toDate, fromDate,position, placeholder = \"Select date\", onChange, theme }) => {\n    const [currentDate, setCurrentDate] = useState(initialDate || new Date());\n    const [selectedDate, setSelectedDate] = useState(null);\n    const [isOpen, setIsOpen] = useState(false);\n    const calendarRef = useRef(null);\n\n    const daysInWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const monthNames = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n\n    // Default theme: blue, gray\n    const defaultTheme = ['blue', 'green'];\n    const [primary, secondary] = theme || defaultTheme;\n\n    const getDaysInMonth = (month, year) => {\n        const date = new Date(year, month, 1);\n        const days = [];\n        while (date.getMonth() === month) {\n            days.push(new Date(date));\n            date.setDate(date.getDate() + 1);\n        }\n        return days;\n    };\n\n    const goToPreviousMonth = () => {\n        const newMonth = currentDate.getMonth() - 1;\n        const newYear = currentDate.getFullYear();\n\n        // Check if the new month is within the allowed range\n        const newDate = new Date(newYear, newMonth);\n        if (isValidMonth(newDate)) {\n            setCurrentDate(newDate);\n        }\n    };\n\n    const goToNextMonth = () => {\n        const newMonth = currentDate.getMonth() + 1;\n        const newYear = currentDate.getFullYear();\n\n        // Check if the new month is within the allowed range\n        const newDate = new Date(newYear, newMonth);\n        if (isValidMonth(newDate)) {\n            setCurrentDate(newDate);\n        }\n    };\n\n    const goToToday = () => {\n        const today = new Date();\n        setCurrentDate(today);\n        setSelectedDate(today);\n        if (onChange) {\n            onChange(today);\n        }\n    };\n\n    const handleDateClick = (day) => {\n        // Check if the date is within the allowed range (if provided)\n        const isInAllowedRange =\n            (!toDate && !fromDate) ||\n            (toDate && !fromDate && day <= toDate) ||\n            (!toDate && fromDate && day >= fromDate) ||\n            (toDate && fromDate && day >= toDate && day <= fromDate);\n\n\n        // Only update the selected date if it's within the allowed range\n        if (isInAllowedRange) {\n            setSelectedDate(day);\n            if (onChange) {\n                onChange(day);\n            }\n            setIsOpen(false);\n        }\n    };\n\n    const handleYearChange = (event) => {\n        const newYear = parseInt(event.target.value, 10);\n        const newDate = new Date(newYear, currentDate.getMonth());\n\n        // Check if the new year is within the allowed range\n        if (isValidMonth(newDate)) {\n            setCurrentDate(newDate);\n        }\n    };\n\n    const handleMonthChange = (event) => {\n        const newMonth = parseInt(event.target.value, 10);\n        const newDate = new Date(currentDate.getFullYear(), newMonth);\n\n        // Check if the new month is within the allowed range\n        if (isValidMonth(newDate)) {\n            setCurrentDate(newDate);\n        }\n    };\n\n    const handleClickOutside = (event) => {\n        if (calendarRef.current && !calendarRef.current.contains(event.target)) {\n            setIsOpen(false);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n\n    const renderHeader = () => {\n        return (\n            <div className=\"flex justify-between items-center p-2 gap-2 \">\n                <button onClick={goToPreviousMonth} className=\"hover:text-blue-500\">\n                    {\"<\"}\n                </button>\n                <div className=\"flex gap-2\">\n                    <select\n                        value={currentDate.getMonth()}\n                        onChange={handleMonthChange}\n                        className={` text-gray-700 border rounded-md px-2 py-1 border-${secondary} focus:outline-none focus:ring-1 focus:ring-${primary}-500 focus:ring-opacity-50`}\n                    >\n                        {monthNames.map((month, index) => (\n                            <option key={index} value={index}>\n                                {month}\n                            </option>\n                        ))}\n                    </select>\n                    <select\n                        value={currentDate.getFullYear()}\n                        onChange={handleYearChange}\n                        className={` text-gray-700 border rounded-md px-2 py-1 border-${secondary} focus:outline-none focus:ring-1 focus:ring-${primary}-500 focus:ring-opacity-50`}\n                    >\n                        {Array.from({ length: 10 }, (_, i) => currentDate.getFullYear() - 5 + i).map((year) => (\n                            <option key={year} value={year}>\n                                {year}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n                <button onClick={goToNextMonth} className=\"hover:text-blue-500\">\n                    {\">\"}\n                </button>\n            </div>\n        );\n    };\n\n    const renderDays = () => {\n        const days = getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear());\n        const firstDayIndex = days[0].getDay();\n        const lastDayIndex = days[days.length - 1].getDay();\n\n        // Calculate leading days\n        const prevMonthLastDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);\n        const prevDays = [];\n        for (let i = 0; i < firstDayIndex; i++) {\n            prevDays.unshift(new Date(\n                prevMonthLastDate.getFullYear(), prevMonthLastDate.getMonth(), prevMonthLastDate.getDate() - i));\n        }\n\n        const nextDays = [];\n        for (let i = 1; i <= 6 - lastDayIndex; i++) {\n            nextDays.push(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, i));\n        }\n\n        return [\n            ...prevDays.map((day) => ({ day, isPlaceholder: true })),\n            ...days.map((day) => ({ day, isPlaceholder: false })),\n            ...nextDays.map((day) => ({ day, isPlaceholder: true }))\n        ].map(({ day, isPlaceholder }, index) => {\n            const isToday = day.toDateString() === new Date().toDateString();\n            const isSelected = day.toDateString() === selectedDate?.toDateString();\n\n            const isInAllowedRange =\n                (!toDate && !fromDate) ||\n                (toDate && !fromDate && day <= toDate) ||\n                (!toDate && fromDate && day >= fromDate) ||\n                (toDate && fromDate && day >= toDate && day <= fromDate);\n\n            const isDisabled = isPlaceholder || !isInAllowedRange;\n\n\n            return (\n                <button\n                    key={index}\n                    onClick={() => !isDisabled && handleDateClick(day)}\n                    disabled={isDisabled} // Disable the button if needed\n                    className={`\n                        text-center rounded-full border-0 w-9 flex items-center justify-center h-9 p-2 relative transition duration-200 ease-in-out cursor-pointer\n                        ${isPlaceholder ? ` text-gray-300 border-transparent` : ` `} \n                        ${isSelected ? ` bg-${primary}-500 text-white border-${primary}-500` : ''} \n                        ${isToday ? `  border-2 border-${primary}-500` : ''} \n                        ${isToday && !isSelected ? ` text-${primary} border-${primary}-200` : ''}  \n                        ${!isPlaceholder && !isDisabled && `text-gray-700 duration-200 hover:border-2  `}  \n                        ${isDisabled ? `cursor-default text-gray-300` : ''} `}\n                >\n                    {day.getDate()}\n                </button>\n            );\n        });\n    };\n\n    // Helper function to check if a month is within the allowed range\n    const isValidMonth = (date) => {\n        if (toDate && fromDate) {\n            const startMonth = toDate.getMonth();\n            const startYear = toDate.getFullYear();\n            const endMonth = fromDate.getMonth();\n            const endYear = fromDate.getFullYear();\n\n            const currentMonth = date.getMonth();\n            const currentYear = date.getFullYear();\n\n            // Check if the current month and year are within the allowed range\n            return (\n                (currentYear > startYear || (currentYear === startYear && currentMonth >= startMonth)) &&\n                (currentYear < endYear || (currentYear === endYear && currentMonth <= endMonth))\n            );\n        }\n        return true; // No range restrictions, so any month is valid\n    };\n\n\n    return (\n        <div className=\"relative inline-block text-left w-full mt-1\" ref={calendarRef}>\n            <input\n                type=\"text\"\n                className={` placeholder:text-gray-400 rounded-md px-3 bg-gray-900 focus:border-white py-2 w-full text-gray-300 focus:outline-none 900 border border-gray-500 shadow-sm sm:text-sm focus:border disabled:bg-gray-900/90 disabled:cursor-not-allowed ${className} `}\n                placeholder={placeholder}\n                value={selectedDate ? selectedDate.toLocaleDateString() : ''}\n                readOnly\n                onClick={() => setIsOpen(!isOpen)}\n            />\n\n            {isOpen && (\n                <div className={`absolute z-10 mt-2 ${position} border border-${secondary}-300  rounded-md shadow-md bg-white`}>\n                    <div className=\"flex items-center justify-between text-center border-b border-${secondary} p-1\">\n                        <button onClick={goToToday} className={`text-sm text-${primary}-500 hover:underline px-2`}>\n                            Today\n                        </button>\n                        {renderHeader()}\n                    </div>\n                    <div className=\"grid grid-cols-7 gap-1 px-2 pt-2\">\n                        {daysInWeek.map((day) => (\n                            <div key={day} className=\"text-center py-2 font-medium text-gray-700\">\n                                {day}\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"grid grid-cols-7 gap-1 px-2 pb-2\">{renderDays()}</div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Calendar;"},
          {text: "'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\n\n/**\n * @typedef {Object} CarouselProps\n * @property {React.ReactNode[]} children - The slides to display in the carousel.\n * @property {boolean} [autoplay=false] - Whether the carousel should automatically advance slides.\n * @property {number} [interval=5000] - The time in milliseconds between automatic slide transitions (if `autoplay` is true).\n * @property {string} [className] - Additional CSS class names to apply to the carousel container.\n * A responsive carousel component.\n *\n * @param {CarouselProps} props - The properties for the carousel component.\n * @returns {JSX.Element} The rendered carousel component.\n */\n\nconst Carousel = ({ children, autoplay = false, interval = 5000, className }) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const carouselRef = useRef(null); // Not used in this simplified version\n\n  const goToSlide = (index) => {\n    setCurrentIndex((index + children.length) % children.length);\n  };\n\n  useEffect(() => {\n    let autoplayInterval;\n    if (autoplay) {\n      autoplayInterval = setInterval(() => goToSlide(currentIndex + 1), interval);\n    }\n    return () => clearInterval(autoplayInterval);\n  }, [currentIndex, autoplay, interval]);\n\n  return (\n    <div className={`relative ${className}`}>\n      <div className=\"overflow-hidden rounded-md \">\n        <div\n          className=\"flex transition-transform duration-500 ease-in-out \"\n          style={{ transform: `translateX(-${currentIndex * 100}%)` }}\n        >\n          {children.map((child, index) => (\n            <div key={index} className=\"flex-shrink-0 w-full\" style={{ minWidth: '100%' }}>\n              {/* Pass through children without applying default styles */}\n              {child} \n            </div>\n          ))}\n        </div>\n      </div>\n\n      <CarouselButton onClick={() => goToSlide(currentIndex - 1)} direction=\"left\" />\n      <CarouselButton onClick={() => goToSlide(currentIndex + 1)} direction=\"right\" />\n\n      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2 \">\n        {children.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => goToSlide(index)}\n            className={`w-3 h-3 rounded-full ${\n              currentIndex === index ? 'bg-blue-500' : 'bg-gray-400'\n            }`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n\n/**\n * A single slide within the carousel.\n * \n * The `CarouselItem` component represents a single slide in the carousel. It should wrap the content of each slide.\n * \n * @param {Object} props - The properties for the carousel item component.\n * @param {React.ReactNode} props.children - The content of the carousel item.\n * @returns {JSX.Element} The rendered carousel item component.\n */\nexport const CarouselItem = ({ children }) => {\n  return <>{children}</>;\n};\n\n/**\n * Reusable button component for previous/next navigation.\n * \n * @param {Object} props - The properties for the button component.\n * @param {Function} props.onClick - The function to call when the button is clicked.\n * @param {\"left\" | \"right\"} props.direction - The direction of the arrow.\n * @returns {JSX.Element} The rendered button component.\n */\nconst CarouselButton = ({ onClick, direction }) => {\n  const arrowPath = direction === \"left\" ? \"M15 19l-7-7 7-7\" : \"M9 5l7 7-7 7\";\n  const translateXClass = direction === \"left\" ? \"translate-x-1/3\" : \"-translate-x-1/3\";\n\n  return (\n    <button\n      onClick={onClick}\n      className={`absolute border border-gray-500 rounded-full p-1.5 ${\n        direction === \"left\" ? \"right-full\" : \"left-full\"\n      } top-1/2 -translate-y-1/2 ${translateXClass}`}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"h-6 w-6 text-gray-200\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n      >\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d={arrowPath} />\n      </svg>\n    </button>\n  );\n};\n\nexport default Carousel;"},
          {text: "\"use client\";\n\nimport React, { useState } from 'react';\n\n/**\n * A customizable checkbox component with various variants and sizes.\n * \n * @component\n * @param {Object} props - The component's props.\n * @param {boolean} [props.checked=false] - Whether the checkbox is checked by default.\n * @param {function} [props.onChange] - A callback function triggered when the checkbox's checked state changes. \n *   Receives the new checked state as a boolean argument.\n * @param {string} [props.id] - The ID for the checkbox element.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the checkbox container.\n * @param {'default'|'outline'|'secondary'|'danger'|'warning'|'info'} [props.variant='default'] - The visual variant of the checkbox.\n * @param {'xs'|'sm'|'md'|'lg'|'xl'} [props.size='md'] - The size of the checkbox.\n * @param {Object} [props....rest] - Any other props are spread to the underlying `<div>` container.\n * \n * @example\n * // Basic usage\n * <Checkbox id=\"agreement\" onChange={(checked) => console.log('Agreement checked:', checked)} />\n * <label htmlFor=\"agreement\">Agree to terms</label>\n * \n * @example\n * // With different variant and size\n * <Checkbox variant=\"danger\" size=\"lg\" id=\"important\" checked />\n * <label htmlFor=\"important\">Important option</label>\n */\nconst Checkbox = ({\n    checked = false,\n    onChange,\n    id,\n    className,\n    variant = 'default',\n    size = 'md',\n    ...rest\n}) => {\n    const [isChecked, setIsChecked] = useState(checked);\n\n    const handleClick = () => {\n        setIsChecked(!isChecked);\n        onChange && onChange(!isChecked);\n    };\n\n    const variants = {\n        default: {\n            unchecked: 'focus:ring-blue-500',\n            checked: 'bg-blue-600 border-transparent focus:ring-blue-500 text-white'\n        },\n        outline: {\n            unchecked: 'focus:ring-gray-400',\n            checked: 'bg-gray-800 border-gray-500 focus:ring-gray-400 text-white'\n        },\n        secondary: {\n            unchecked: 'focus:ring-gray-600',\n            checked: 'bg-gray-600 border-transparent focus:ring-gray-600 text-white'\n        },\n        danger: {\n            unchecked: 'focus:ring-red-500',\n            checked: 'bg-red-600 border-transparent focus:ring-red-500 text-white'\n        },\n        warning: {\n            unchecked: 'focus:ring-yellow-400',\n            checked: 'bg-yellow-400 border-transparent focus:ring-yellow-400 text-black'\n        },\n        info: {\n            unchecked: 'focus:ring-blue-400',\n            checked: 'bg-blue-400 border-transparent focus:ring-blue-400 text-white'\n        },\n    };\n    const sizes = {\n        xs: 'w-3 h-3',\n        sm: 'w-4 h-4',\n        md: 'w-5 h-5',\n        lg: 'w-6 h-6',\n        xl: 'w-8 h-8',\n    };\n    const svgsizes = {\n        xs: 'w-2 h-2',\n        sm: 'w-3 h-3 ',\n        md: 'w-4 h-4 ',\n        lg: 'w-5 h-5 ',\n        xl: 'w-6 h-6 ',\n    };\n\n\n\n    const currentVariant = variants[variant] || variants.default;\n\n    return (\n        <div className={`flex items-center ${className} `} {...rest}>\n            <button\n                onClick={handleClick}\n                className={` rounded-[4px] mr-2 border ${currentVariant[isChecked ? 'checked' : 'unchecked']} ${sizes[size]} flex items-center justify-center transition duration-200 ease-in-out`}\n                aria-checked={isChecked}\n                role=\"checkbox\"\n                id={id}\n            >\n                {isChecked && (\n                    <svg\n                        className={`flex items-center justify-center w-3 h-3 ${svgsizes[size]} `}\n                        viewBox=\"0 0 12 10\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                    >\n                        <path d=\"M1 4l4 4L11 1\" />\n                    </svg>\n                )}\n            </button>\n        </div>\n    );\n};\n\nexport default Checkbox;\n"},
          {text: "import React, { useState } from 'react';\n\n/**\n * A command palette component for searching and executing actions.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The command groups and items to display.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the command palette.\n * @param {function} [props.onSearch] - A callback function triggered when the search term changes.\n *   Receives the current search term as an argument.\n * @param {string} [props.searchablebaricon='🔍'] - The icon to display in the search bar.\n *\n * @example\n * // Basic usage with search and command groups\n * <Command onSearch={handleSearch}>\n *   <CommandGroup title=\"Actions\">\n *     <CommandItem onClick={() => console.log('Edit clicked!')}>\n *       <CommandItemIcon>✏️</CommandItemIcon>\n *       <CommandItemText>Edit</CommandItemText>\n *     </CommandItem>\n *   </CommandGroup>\n * </Command>\n */\nconst Command = ({ children, className, onSearch, searchablebaricon = \"🔍\" }) => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [filteredChildren, setFilteredChildren] = useState(children); // State for filtered children\n\n    const handleChange = (event) => {\n        setSearchTerm(event.target.value);\n        onSearch && onSearch(event.target.value);\n\n        //   Update the filtered children based on the new search term\n        const newFilteredChildren = React.Children.toArray(children).filter((child) => {\n            const textToSearch = child.props.title ||\n                (child.props.children && React.Children.toArray(child.props.children)\n                    .map(c => c.props.children)\n                    .join(' '));\n\n            return textToSearch && textToSearch.toLowerCase().includes(searchTerm.toLowerCase());\n        });\n\n        setFilteredChildren(newFilteredChildren); // Update state to trigger re-rendering\n    };\n\n    return (\n        <div className={`border border-gray-500 rounded-md ${className || ''}`}>\n            <div className=\"flex w-full gap-1 items-center justify-center p-1\">\n                <div className=\"w-10 text-center\">{searchablebaricon}</div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    className=\"flex-grow px-2 py-1 bg-transparent\"\n                    value={searchTerm}\n                    onChange={handleChange}\n                />\n            </div>\n            {filteredChildren} {/* Render the filtered children */}\n        </div>\n    );\n};\n\n\n\n/**\n * A group of related commands within the command palette.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The command items to display within the group.\n * @param {string} [props.title] - The title for the command group.\n */\nconst CommandGroup = ({ children, title }) => (\n    <div>\n        <hr className=\"w-full border-gray-500 mb-1\" />\n        {title && <h3 className=\"text-sm ml-2 w-fit opacity-70 font-semibold\">{title}</h3>}\n        <div className=\"pt-1 pb-2 px-2\">\n            {children}\n        </div>\n    </div>\n);\n\n/**\n * An individual command item within a command group.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The content of the command item (icon, text, suggestion).\n * @param {function} [props.onClick] - A callback function triggered when the command item is clicked.\n * @param {boolean} [props.isActive=false] - Whether the command item is currently active (e.g., matches the search term).\n */\nconst CommandItem = ({ children, onClick, isActive = false }) => (\n    <div\n        className={`p-1 rounded-md hover:bg-gray-800/90 flex gap-1 items-center ${isActive ? 'bg-gray-800/50' : ''\n            }`}\n            \n        onClick={onClick}\n    >\n        {children}\n    </div>\n);\n\n/**\n * An icon within a command item.\n *\n * @component\n * @param {React.ReactNode} props.children - The icon to display.\n */\nconst CommandItemIcon = ({ children }) => (\n    <div className=\"w-7 text-center\">{children}</div>\n);\n\n/**\n * The main text label for a command item.\n *\n * @component\n * @param {React.ReactNode} props.children - The text label to display.\n */\nconst CommandItemText = ({ children }) => <span>{children}</span>;\n\n/**\n * Suggestion text for a command item (e.g., keyboard shortcut).\n *\n * @component\n * @param {React.ReactNode} props.children - The suggestion text to display.\n */\nconst CommandItemSuggestionText = ({ children }) => (\n    <span className=\"text-gray-400 ml-auto mr-1\">{children}</span>\n);\n\nexport {\n    Command,\n    CommandGroup,\n    CommandItem,\n    CommandItemIcon,\n    CommandItemText,\n    CommandItemSuggestionText,\n};\n"},
          {text: "import React from 'react'\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the Datatable.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the Datatable.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <Datatable>\n *  <TableBody>\n *   <TableRow>\n *      <TableCell>cell 1</TableCell>\n *   </TableRow>\n *  </TableBody>\n * </Datatable>\n */\nexport default function Datatable({ children, className, ...rest }) {\n  return (\n    <table className={`bg-gray-900 rounded-md border border-gray-500 ${className}`} {...rest} >\n      {children}\n    </table>\n  )\n}\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the TableHead.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the TableHead.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <TableHead>\n *   <TableRow>\n *      <TableHeadingCell>heading cell 1</TableHeadingCell>\n *   </TableRow>\n *  </TableHead>\n */\nexport function TableHead({ children, className, ...rest }) {\n  return (\n    <thead className={` ${className}`} {...rest}>{children}</thead>\n  )\n}\n\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the TableBody.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the TableBody.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <TableBody>\n *   <TableRow>\n *      <TableCell>cell 1</TableCell>\n *   </TableRow>\n *  </TableBody>\n */\nexport function TableBody({ children, className, ...rest }) {\n  return (\n    <tbody className={`m-2 border-t border-t-orange-700 space-x-1 ${className}`} {...rest}>\n      {children}\n    </tbody>\n  )\n}\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the TableRow.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the TableRow.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <TableRow>\n *      <TableCell>cell 1</TableCell>\n * </TableRow>\n */\nexport function TableRow({ children, className, ...rest }) {\n  return (\n    <tr className={` px-2 border-b border-gray-500 ${className}`} {...rest}>{children}</tr>\n  )\n}\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the TableCell.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the TableCell.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <TableCell>cell 1</TableCell>\n */\nexport function TableCell({ children, className, ...rest }) {\n  return (\n    <td className={`rounded-md  px-2 py-1 ${className}`}  {...rest}>{children}</td>\n  )\n}\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the TableHeadingCell.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the TableHeadingCell.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <TableHeadingCell>heading cell 1</TableHeadingCell>\n */\nexport function TableHeadingCell({ children, className , ...rest}) {\n  return (\n    <th className={` p-2 ${className}`} {...rest}>{children}</th>\n  )\n} \n"},
          {text: "import React, { useEffect, useRef, useState } from 'react';\n\n/**\n * A container component that displays a context menu on right-click.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the container.\n * @param {function} [props.rightclick] - A callback function triggered when the container is right-clicked.\n * @param {React.ReactNode} props.children - The content of the container. \n *   This should be two children: the main content and the context menu content.\n *\n * @example\n * // Basic usage with a simple menu\n * <DilogContener rightclick={() => console.log('Menu clicked!')}>\n *   <span>Right-click me</span>\n *   <DilogMenuContent>\n *     <DilogMenuList>Option 1</DilogMenuList>\n *     <DilogMenuList>Option 2</DilogMenuList>\n *   </DilogMenuContent>\n * </DilogContener>\n */\nexport default function DilogContener({ className, rightclick, children }) {\n    const [DilogIsOpen, setdilogisopen] = useState(false);\n    const [dilogPosition, setDilogPosition] = useState({ x: 0, y: 0 });\n    const menuRef = useRef(null);\n\n    const handleRightClick = (e) => {\n        e.preventDefault();\n        rightclick && rightclick();\n        setdilogisopen(true);\n        const rect = e.target.getBoundingClientRect();\n\n        setDilogPosition({\n            x: e.clientX - rect.left,\n            y: e.clientY - rect.top\n        });\n    };\n\n    const handleClickOutside = (event) => {\n        if (menuRef.current && !menuRef.current.contains(event.target)) {\n            setdilogisopen(false);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n\n    return (\n        <div\n            onContextMenu={handleRightClick}\n            className={`relative ${className}`}\n        >\n            {children[0]}\n            {DilogIsOpen && (\n                <div\n                    ref={menuRef}\n                    style={{ top: `${dilogPosition.y}px`, left: `${dilogPosition.x}px` }}\n                    className=\"absolute transform z-10 \"\n                >\n                    {children[1]}\n                </div>\n            )}\n        </div>\n    );\n}\n\n/**\n * A component to wrap the content of the context menu.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The content of the menu.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the menu content.\n */\nexport const DilogMenuContent = ({ children, className }) => {\n    return (\n        <div className={`rounded-md border border-gray-500 bg-gray-900 ${className} `}>\n            {children}\n        </div>\n    );\n};\n\n/**\n * A component to group menu items within the context menu.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The menu items to group.\n * @param {string} [props.title] - The title for the group.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the group.\n */\nexport const DilogMenuGroup = ({ children, title, className }) => {\n    return (\n        <div className={`w-full p-2 flex flex-col gap-1 mb-1 ${className}`}>\n            <div className='flex items-center gap-1'>\n                <span className='text-gray-500 my-2'>\n                    {title}\n                </span>\n                <hr className='flex-grow border-t border-gray-500' />\n            </div>\n            {children}\n        </div>\n    );\n};\n\n/**\n * A component for individual menu items within the context menu.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The content of the menu item.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the menu item.\n */\nexport const DilogMenuList = ({ children, className }) => {\n    return (\n        <div className={`hover:bg-gray-800 w-full px-1 py-0.5 rounded-sm flex justify-between ${className}`}>\n            {children}\n        </div>\n    );\n};\n\n/**\n * A component to wrap the main content within the DilogContener.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The main content to display.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the content.\n */\nexport const DilogContent = ({ children, className }) => {\n    return (\n        <div className={`w-full h-full ${className}`}>\n            {children}\n        </div>\n    );\n};\n"},
          {text: "\"use client\";\n\nimport React, { useState } from 'react';\n\n\n\n/**\n * @typedef {Object} DropdownProps\n * @property {string} [className] - Additional CSS class names to apply to the dropdown container.\n * @property {React.ReactNode} children - The dropdown items to be displayed.\n * @property {string|number} [value] - The currently selected value (for single selection).\n * @property {function} [onChange] - A callback function that is triggered when the selected value changes.\n * @property {string} [placeholder] - The placeholder text to display when no value is selected.\n * @property {boolean} [multiple] - Whether to allow multiple selections. Defaults to false.\n * A customizable dropdown component for selecting single or multiple values.\n * @param {DropdownProps} props - The properties for the dropdown component.\n * @returns {JSX.Element} The rendered dropdown component.\n */\nexport default function Dropdown({ className, children, value, onChange, placeholder = \"Select an option\", multiple = false }) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [search, setSearch] = useState(\"\");\n    const [multipleSelection, setMultipleSelection] = useState([]); // Corrected typo\n\n    // Use the provided 'onChange' function to update the parent component's state\n    const handleChange = (newValue) => {\n        if (onChange && multiple) {\n            if (!multipleSelection.includes(newValue)) {\n                setMultipleSelection([...multipleSelection, newValue]);\n                onChange([...multipleSelection, newValue]);\n            } else {\n                // Remove the element if it exists in the array\n                setMultipleSelection(multipleSelection.filter(item => item !== newValue));\n                onChange(multipleSelection.filter(item => item !== newValue));\n            }\n        } else if (onChange) {\n            onChange(newValue);\n            setIsOpen(false); // Close dropdown after single selection\n        }\n    };\n\n    const filteredChildren = (React.Children.count(children) > 5) ? children.filter(child => {\n        const content = child.props.value || child.props.children;\n        return content.toLowerCase().includes(search.toLowerCase());\n        // Simplified filtering logic\n    }) : children;\n\n    return (\n        <div className={` bg-gray-900 relative mt-1 ${className}`}>\n            <div\n                onClick={() => setIsOpen(!isOpen)}\n                className=\" cursor-pointer p-2 border rounded-md relative w-full flex items-center justify-between\">\n                {/* Display selected value(s) or placeholder */}\n                <div className='flex items-center gap-1 flex-wrap'>\n                    {multiple && multipleSelection.length > 0 ? (\n                        (multipleSelection.map((item, index) => (\n                            <span key={index} className='px-2 py-1 bg-slate-500/90 text-sm rounded-md'>{item}</span>\n                        )))\n                    ) : value ? (\n                        <span>{value}</span>\n                    ) : (\n                        <span className=\"text-gray-500\">{placeholder}</span>\n                    )}\n                </div>\n                <svg\n                    className={`w-5 h-5 transition-transform transform ${isOpen ? 'rotate-180' : '' }`}\n                    viewBox=\"0 0 20 20\"\n                    fill=\"currentColor\"\n                >\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n                        clipRule=\"evenodd\" />\n                </svg>\n            </div>\n            {isOpen && (\n                <div className=\"absolute top-full z-10 border rounded-md overflow-hidden shadow-md mt-3 w-full\">\n                    <ul className=\"py-1 flex flex-col gap-1 bg-gray-900\">\n                        {(React.Children.count(children) > 5) && (\n                            <div className=\"px-2 py-1 \">\n                                <input\n                                    type=\"text\"\n                                    className=\"border bg-black rounded-md px-1 py-1 w-full\"\n                                    value={search}\n                                    onChange={(e) => setSearch(e.target.value)}\n                                    placeholder=\"Search...\"\n                                />\n                            </div>\n                        )}\n\n                        {/* Render filtered children */}\n                        {filteredChildren.map((child, index) => (\n                            <li\n                                key={index}\n                                onClick={() => handleChange(child.props.value || child.props.children)}\n                                className={`px-2 py-2 cursor-pointer hover:bg-gray-800/90 ${multipleSelection.includes(child.props.value || child.props.children) ? \"bg-gray-800/90\" : \" \"}`}\n                            >\n                                {child}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n}\n\n\n/**\n * @typedef {Object} DropdownItemProps\n * @property {React.ReactNode} children - The content of the dropdown item.\n * @property {string|number} [value] - The value associated with the dropdown item.\n * @param {DropdownItemProps} props - The properties for the dropdown item.\n * @returns {JSX.Element} The rendered dropdown item.\n */\nexport const DropdownItem = ({ children, value }) => {\n    return (\n        <div value={value || children}>{children}</div>\n    );\n};\n"},
          {text: "import React, { useState } from 'react';\n\n/**\n * A versatile input component for collecting user input.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {string} [props.id] - The ID for the input element.\n * @param {string} [props.error] - An error message to display below the input.\n * @param {string} [props.type='text'] - The type of input (e.g., 'text', 'email', 'password').\n * @param {string} [props.className=''] - Additional CSS classes to apply to the input.\n * @param {string} [props.value] - The current value of the input.\n * @param {string} [props.placeholder] - Placeholder text for the input.\n * @param {boolean} [props.disabled=false] - Whether the input is disabled.\n * @param {function} [props.onChange] - A function to call when the input value changes.\n * @param {Object} [props....rest] - Any other props are spread to the underlying `<input>` element.\n *\n * @example\n * // Basic usage\n * <Input placeholder=\"Enter your name\" />\n *\n * @example\n * // With label and error message\n * <Input \n *     id=\"name\" \n *     label=\"Name\" \n *     error=\"Please enter a valid name\" \n *     value={name} \n *     onChange={(e) => setName(e.target.value)} \n * />\n */\nconst Input = ({ id, error, type = 'text', className, value, placeholder, disabled = false, onChange, ...rest }) => {\n\n    const handleChange = (e) => {\n        onChange && onChange(e);\n    };\n\n    return (\n        <>\n            <input\n                {...rest}\n                id={id}\n                value={value}\n                type={type}\n                onChange={handleChange}\n                placeholder={placeholder}\n                className={`mt-1 p-2 block w-full rounded-md placeholder:text-gray-400 bg-gray-900 border  border-gray-500 shadow-sm sm:text-sm focus:border  disabled:bg-gray-900/90 disabled:cursor-not-allowed ${error ? 'border-red-500' : ''}  ${className}`}\n                disabled={disabled}\n            />\n            {error && <p className=\"mt-2 text-sm text-red-600\">{error}</p>}\n        </>\n    );\n};\n\nexport default Input;\n"},
          {text: "import React from 'react'\n\n/**\n * A simple label component for form elements.\n * \n * @component\n * @param {Object} props - The component's props.\n * @param {string} props.htmlFor - The ID of the form element the label is associated with.\n * @param {React.ReactNode} props.children - The content of the label.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the label.\n * @param {Object} [props....rest] - Any other props are spread to the underlying `<label>` element.\n * \n * @example\n * // Basic usage\n * <Label htmlFor=\"name\">Name:</Label>\n * <input type=\"text\" id=\"name\" />\n */\nexport default function Label({ htmlFor, children, className, ...rest }) {\n    return (\n        <label\n            htmlFor={htmlFor} \n            className={`block text-sm text-gray-400 ${className}`}\n            {...rest}\n        >\n            {children}\n        </label>\n    )\n}\n"},
          {text: "import ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nexport default function MdView({ children }) {\n\n    return (\n        <div className=\"p-1 pb-0 min-h-min w-full overflow-auto moderscroller whitespace-none\">\n            <ReactMarkdown remarkPlugins={[remarkGfm]} className=\"markdown-container\">\n                {children}\n            </ReactMarkdown>\n        </div>\n    )\n}"},
          {text: "\n\nconst ProgressBar = ({ progress, className }) => {\n    return (\n        <div className=\"w-full max-w-lg mx-auto\">\n            <div className=\"flex justify-between mb-2\">\n                <span className=\"text-sm font-medium\">{progress}%</span>\n            </div>\n            <div className={`relative w-full bg-gray-200 rounded h-4 ${className}`}\n            >\n                <div\n                    className=\"absolute h-full bg-blue-600 rounded\"\n                    style={{ width: `${progress}%` }}\n                >\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProgressBar;\n"},
          {text: "'use client';\nimport React, { useState, useRef } from 'react';\n\nconst ResizablePanelGroup = ({ direction = 'horizontal', children }) => {\n    const isHorizontal = direction === 'horizontal';\n    return (\n        <div className={`flex ${isHorizontal ? 'flex-row' : 'flex-col'} h-full w-full`} >\n            {children}\n        </div>\n    );\n};\n\nconst ResizablePanel = ({ defaultSize = 300, direction = 'horizontal', children }) => {\n    const [size, setSize] = useState(defaultSize);\n    const panelRef = useRef(null);\n    const isHorizontal = direction === 'horizontal';\n\n    const handleMouseMove = (e) => {\n        e.preventDefault();  \n\n        const boundingRect = panelRef.current.getBoundingClientRect();\n\n        if (isHorizontal) {\n            const newWidth = e.clientX - boundingRect.left;\n            setSize(newWidth);\n        } else {\n            const newHeight = e.clientY - boundingRect.top;\n            setSize(newHeight);\n        }\n    };\n\n    const handleMouseUp = () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    const handleMouseDown = (e) => {\n        e.preventDefault(); // Prevent text selection when dragging the resize handle\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n    };\n\n    return (\n        <div\n            ref={panelRef}\n            className=\"relative flex-grow\"\n            style={{\n                width: isHorizontal ? `${size}px` : '100%',\n                height: isHorizontal ? '100%' : `${size}px`,\n            }}\n        >\n            <div className=\"h-full w-full overflow-auto\">{children}</div>\n            {/* Resizing handle */}\n            <div\n                className={`absolute ${isHorizontal ? 'right-0 top-0 h-full' : 'bottom-0 left-0 w-full'\n                    } bg-gray-500 cursor-${isHorizontal ? 'ew-resize' : 'ns-resize'}`}\n                style={{\n                    width: isHorizontal ? '5px' : '100%',\n                    height: isHorizontal ? '100%' : '5px',\n                    cursor: isHorizontal ? 'col-resize' : 'row-resize' // Add this line\n                }}\n                onMouseDown={handleMouseDown}\n            />\n        </div>\n    );\n};\n\nexport { ResizablePanelGroup, ResizablePanel };\n"},
          {text: "import React, { useState } from 'react';\n\n/**\n * @typedef {Object} ScrollPosition\n * @property {number} top - The vertical scroll position.\n * @property {number} left - The horizontal scroll position.\n */\n\n/**\n * A React component that provides a scrollable area for its children.\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the scrollable area.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the scrollable area.\n * @param {'horizontal'|'vertical'|'both'} [props.orientation='horizontal'] - The scrolling orientation. \n *   - `horizontal`: Allows horizontal scrolling.\n *   - `vertical`: Allows vertical scrolling.\n *   - `both`: Allows both horizontal and vertical scrolling.\n * @param {function(ScrollPosition)} [props.onScroll] - A callback function that is triggered when the scroll position changes. \n *   The callback receives an object containing the current `top` and `left` scroll positions.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <ScrollArea>\n *   <div style={{ width: '2000px' }}>Long content here...</div>\n * </ScrollArea>\n * \n * @example\n * // Vertical scrolling with custom height\n * <ScrollArea className=\"h-64\" orientation=\"vertical\">\n *   <div style={{ height: '1000px' }}>Tall content here...</div>\n * </ScrollArea>\n */\n\nfunction ScrollArea({ children, className = '', orientation = 'horizontal', onScroll }) {\n    const [scrollPosition, setScrollPosition] = useState({ top: 0, left: 0 });\n\n    const handleScroll = (event) => {\n        const { scrollTop, scrollLeft } = event.target;\n\n        setScrollPosition({\n            top: scrollTop,\n            left: scrollLeft\n        });\n\n        // Call the onScroll prop if provided\n        if (onScroll) {\n            onScroll({\n                top: scrollTop,\n                left: scrollLeft\n            });\n        }\n    };\n\n    // Class to handle different scrolling orientations\n    const orientationClasses = {\n        horizontal: 'overflow-x-scroll',\n        vertical: 'overflow-y-scroll',\n        both: 'overflow-scroll'\n    };\n\n    const scrollClass = orientationClasses[orientation] || 'overflow-x-scroll';\n\n    return (\n        <>\n            <style>\n                {`\n                /* Custom Scrollbar Styles */\n                .custom-scrollbar::-webkit-scrollbar {\n                    width: 12px;\n                    height: 12px;\n                }\n\n                .custom-scrollbar::-webkit-scrollbar-track {\n                    background-color: #e0e0e0;\n                    border-radius: 10px;\n                }\n\n                .custom-scrollbar::-webkit-scrollbar-thumb {\n                    background-color: #888;\n                    border-radius: 10px;\n                    border: 2px solid #f4f4f4;\n                }\n\n                .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n                    background-color: #555;\n                }\n\n                .custom-scrollbar {\n                    scrollbar-width: thin;\n                    scrollbar-color: #888 #e0e0e0;\n                }\n                `}\n            </style>\n            <div\n                className={`custom-scrollbar ${scrollClass} ${className}`}\n                onScroll={handleScroll}\n            >\n                {children}\n            </div>\n        </>\n    );\n}\n\nexport default ScrollArea;\n"},
          {text: "\"use client\";\nimport { useState } from 'react';\n\n/**\n * @component Tooltip - A versatile tooltip component for providing contextual information.\n *\n * @param {React.ReactNode} children - The element that triggers the tooltip.\n * @param {string} text - The text content to display within the tooltip.\n * @param {React.ReactNode} [icon] - An optional icon to display alongside the tooltip text.\n * @param {('top'|'bottom'|'left'|'right')} [position='top'] - The position of the tooltip relative to the trigger element.\n * @param {('xs'|'sm'|'md'|'lg')} [size='md'] - The size of the tooltip, affecting its padding and font size.\n * @param {string} [className] - Additional CSS classes to apply to the tooltip element.\n *\n * @example\n * <Tooltip text=\"This is a tooltip\" position=\"right\">\n *   <button>Hover me</button>\n * </Tooltip>\n *\n * @returns {JSX.Element} The rendered Tooltip component.\n */\nexport default function Tooltip({ children, text, icon, position = 'top', size = 'md', className }) {\n    const [showTooltip, setShowTooltip] = useState(false);\n\n    const tooltipClasses = {\n        top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n        bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n        left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n        right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',\n    };\n\n    const sizeClasses = {\n        xs: 'text-xs p-2',\n        sm: 'text-sm px-2 py-1',\n        md: 'text-base px-2.5 py-1.5 ',\n        lg: 'text-lg px-3 py-2 ',\n    };\n\n    return (\n        <div className=\"relative inline-block\"\n            onMouseEnter={() => setShowTooltip(true)}\n            onMouseLeave={() => setShowTooltip(false)}>\n\n            {children}\n\n            {showTooltip && (\n                <div className={`absolute z-10 bg-gray-800 text-white rounded-md  text-base px-2.5 py-1.5  shadow-lg ${tooltipClasses[position]} ${sizeClasses[size]} ${className}`}\n                    role=\"tooltip\">\n                    <div className=\"flex items-center\">\n                        {icon && <div className=\"mr-2\">{icon}</div>}\n                        <span>{text}</span>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n"},
          {text: "'use client'\nimport { useState, useEffect } from 'react';\nimport Alert from '@/Component/Alert';\nimport Button from '@/Component/Button';\nimport Tooltip from '@/Component/Tooltip';\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '@/Component/Accordion'; // Import all the necessary components\nimport Badge from '@/Component/Badge';\nimport { Breadcrumb, BreadcrumbDropdown, BreadcrumbEllipsis, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from '@/Component/Breadcrumb';\nimport Calendar from '@/Component/Calendar';\nimport Carousel, { CarouselItem } from '@/Component/Carousel';\nimport Checkbox from '@/Component/Checkbox';\nimport Dropdown, { DropdownItem, DropdownSearch } from '@/Component/Dropdown';\nimport { Command, CommandGroup, CommandItem, CommandItemIcon, CommandItemSuggestionText, CommandItemText } from '@/Component/Command';\nimport DilogContener, { DilogContent, DilogMenuContent, DilogMenuGroup, DilogMenuList } from '@/Component/Dilog';\nimport Input from '@/Component/Input';\nimport Label from '@/Component/Label';\nimport Datatable, { TableBody, TableCell, TableRow, TableHead, TableHeadingCell } from '@/Component/Datatable';\nimport ScrollArea from '@/Component/ScrollArea';\nimport { ResizablePanel, ResizablePanelGroup } from '@/Component/Resizable';\nimport ProgressBar from '@/Component/Progress';\n\n\n\nconst sampleTableData = [\n    { id: 1, productName: \"Laptop\", category: \"Electronics\", price: 999.99, stock: 15, available: true, rating: 4.5 },\n    { id: 2, productName: \"Coffee Beans\", category: \"Grocery\", price: 12.99, stock: 50, available: true, rating: 4.8 },\n    { id: 3, productName: \"T-Shirt\", category: \"Clothing\", price: 19.99, stock: 8, available: false, rating: 3.9 },\n    { id: 4, productName: \"Keyboard\", category: \"Electronics\", price: 79.99, stock: 25, available: true, rating: 4.2 },\n    { id: 5, productName: \"Mouse\", category: \"Electronics\", price: 29.99, stock: 30, available: true, rating: 4.0 },\n    { id: 6, productName: \"Monitor\", category: \"Electronics\", price: 249.99, stock: 10, available: true, rating: 4.6 },\n    { id: 7, productName: \"Headphones\", category: \"Electronics\", price: 149.99, stock: 18, available: false, rating: 4.7 },\n    { id: 8, productName: \"Milk\", category: \"Grocery\", price: 3.99, stock: 60, available: true, rating: 4.1 },\n    { id: 9, productName: \"Bread\", category: \"Grocery\", price: 2.49, stock: 40, available: true, rating: 4.3 },\n    { id: 10, productName: \"Eggs\", category: \"Grocery\", price: 5.99, stock: 35, available: true, rating: 4.9 },\n    { id: 11, productName: \"Jeans\", category: \"Clothing\", price: 49.99, stock: 12, available: true, rating: 4.0 },\n    { id: 12, productName: \"Dress\", category: \"Clothing\", price: 39.99, stock: 5, available: false, rating: 3.7 },\n    { id: 13, productName: \"Sneakers\", category: \"Clothing\", price: 89.99, stock: 20, available: true, rating: 4.6 },\n    { id: 14, productName: \"Backpack\", category: \"Accessories\", price: 59.99, stock: 16, available: true, rating: 4.4 },\n    { id: 15, productName: \"Wallet\", category: \"Accessories\", price: 24.99, stock: 28, available: true, rating: 4.2 },\n    { id: 16, productName: \"Sunglasses\", category: \"Accessories\", price: 79.99, stock: 8, available: false, rating: 3.8 },\n    { id: 17, productName: \"Book\", category: \"Books\", price: 14.99, stock: 32, available: true, rating: 4.5 },\n    { id: 18, productName: \"Notebook\", category: \"Stationery\", price: 4.99, stock: 45, available: true, rating: 4.3 },\n    { id: 19, productName: \"Pen\", category: \"Stationery\", price: 1.99, stock: 70, available: true, rating: 4.1 },\n    { id: 20, productName: \"Pencil\", category: \"Stationery\", price: 0.99, stock: 80, available: true, rating: 4.0 },\n    { id: 21, productName: \"Camera\", category: \"Electronics\", price: 599.99, stock: 6, available: true, rating: 4.8 },\n    { id: 22, productName: \"Lens\", category: \"Electronics\", price: 299.99, stock: 4, available: false, rating: 4.9 },\n    { id: 23, productName: \"Tripod\", category: \"Electronics\", price: 49.99, stock: 11, available: true, rating: 4.3 },\n    { id: 24, productName: \"Phone Case\", category: \"Accessories\", price: 19.99, stock: 23, available: true, rating: 4.2 },\n    { id: 25, productName: \"Screen Protector\", category: \"Accessories\", price: 9.99, stock: 38, available: true, rating: 4.7 }\n];\n\n\n\nexport default function Home() {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [showAlert, setShowAlert] = useState(false);\n    const [selectedDate, setSelectedDate] = useState(null);\n    const [value, setvalue] = useState(\"asdf\")\n    const [DropdownValue, setDropdownValue] = useState(\"\")\n    const [showSimpleAlert, setShowSimpleAlert] = useState(false);\n\n    const [buttonConfig, setbuttonConfig] = useState({\n        variant: \"outline\",\n        size: \"md\",\n        className: \"\",\n        disabled: false,\n    })\n\n    const [TooltipConfig, setTooltipConfig] = useState({\n        text: \"This tooltip appears on the left.\",\n        position: \"left\",\n        size: \"xs\",\n        className: \"\",\n    })\n\n    const [alertConfig, setAlertConfig] = useState({\n        variant: \"info\",\n        size: \"md\",\n        position: \"top-right\",\n        duration: 5000,\n        text: \"This is an alert!\",\n        showAlert: false,\n        showConfirm: false,\n    });\n\n    const [CheckBoxConfig, setCheckBoxConfig] = useState({\n        checked: false,\n        className: \"\",\n        variant: 'default',\n        size: 'md',\n    })\n\n\n    const [badgeConfig, setBadgeConfig] = useState({\n        variant: 'default',\n        variantStyle: 'default',\n        size: 'md',\n        className: '',\n        content: 'new',\n    })\n\n    const [dropdownConfig, setDropdownConfig] = useState({\n        searchable: false,\n        placeholder: 'Select an option',\n        multiple: false,\n        className: ' w-52',\n        value: '', // For single select\n        values: [], // For multiple select\n    });\n\n    const handleDropdownChange = (newValue) => {\n        if (dropdownConfig.multiple) {\n            setDropdownConfig({ ...dropdownConfig, values: newValue });\n        } else {\n            setDropdownConfig({ ...dropdownConfig, value: newValue });\n        }\n    };\n\n    const handleSearch = (term) => {\n        setSearchTerm(term);\n    };\n\n    const [inputConfig, setInputConfig] = useState({\n        className: 'w-44',\n        placeholder: 'Enter text here',\n        type: 'text',\n        value: '',\n    });\n\n    const handleInputChange = (e) => {\n        setInputConfig({ ...inputConfig, value: e.target.value });\n    };\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n        console.log('Selected date:', date);\n    };\n\n    return (\n        <div className=\" overflow-hidden grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]\">\n            <h1 className=\"text-3xl font-bold text-center mb-20\">My UI Library</h1>\n            <main className=\" flex flex-col gap-8 space-y-4 max-w-4xl\">\n                {/* Buttons Section */}\n                <section className=\"space-y-4 w-full\" id='section1'>\n                    <h2 className=\"text-xl font-semibold\">Buttons</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className=' w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Input className='  ' type='text' placeholder='classes'\n                                    value={buttonConfig.className}\n                                    onChange={(e) => { setbuttonConfig({ ...buttonConfig, className: e.target.value }) }} />\n                                <Dropdown searchablebar className=\"mt-2  w-72\"\n                                    value={buttonConfig.variant}\n                                    onChange={(value) => { setbuttonConfig({ ...buttonConfig, variant: value }) }}\n                                >\n                                    <DropdownItem value=\"default\">default</DropdownItem>\n                                    <DropdownItem value=\"outline\">Outline</DropdownItem>\n                                    <DropdownItem value=\"primary\">Primary</DropdownItem>\n                                    <DropdownItem value=\"secondary\">Secondary</DropdownItem>\n                                    <DropdownItem value=\"danger\">Danger</DropdownItem>\n                                    <DropdownItem value=\"success\">Success</DropdownItem>\n                                    <DropdownItem value=\"warning\">Warning</DropdownItem>\n                                    <DropdownItem value=\"info\">Info</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown searchablebar className=\" mt-2 w-72\"\n                                    value={buttonConfig.size}\n                                    onChange={(value) => { setbuttonConfig({ ...buttonConfig, size: value }) }}\n                                >\n                                    <DropdownItem value=\"xs\">Extra Small</DropdownItem>\n                                    <DropdownItem value=\"sm\">Small</DropdownItem>\n                                    <DropdownItem value=\"md\">Medium</DropdownItem>\n                                    <DropdownItem value=\"lg\">Large</DropdownItem>\n                                    <DropdownItem value=\"xl\">Extra Large</DropdownItem>\n\n                                </Dropdown>\n                                <div className='flex justify-start mt-2 '>\n                                    <Checkbox\n                                        checked={buttonConfig.disabled}\n                                        onChange={(checked) => { setbuttonConfig({ ...buttonConfig, disabled: checked }) }}\n                                        id={\"lable1\"} />\n                                    <Label htmlFor={\"lable1\"}>Default</Label>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=' w-1/2 flex items-center justify-center '>\n                            <Button\n                                className={buttonConfig.className}\n                                variant={buttonConfig.variant}\n                                size={buttonConfig.size}\n                                disabled={buttonConfig.disabled}\n                            >\n                                Default\n                            </Button>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Tooltips Section */}\n                <section className=\"space-y-4 w-full\" id='section2'>\n                    <h2 className=\"text-xl font-semibold\">Tooltips</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className=' w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Input className='  ' type='text' placeholder='classes'\n                                    value={TooltipConfig.className}\n                                    onChange={(e) => { setTooltipConfig({ ...TooltipConfig, className: e.target.value }) }} />\n                                <Dropdown searchablebar className=\"mt-2 w-72\"\n                                    value={TooltipConfig.position}\n                                    onChange={(value) => { setTooltipConfig({ ...TooltipConfig, position: value }) }}\n                                >\n                                    <DropdownItem value=\"left\">Left</DropdownItem>\n                                    <DropdownItem value=\"right\">Right</DropdownItem>\n                                    <DropdownItem value=\"top\">Top</DropdownItem>\n                                    <DropdownItem value=\"bottom\">Bottom</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown searchablebar className=\" mt-2 w-72\"\n                                    value={TooltipConfig.size}\n                                    onChange={(value) => { setTooltipConfig({ ...TooltipConfig, size: value }) }}\n                                >\n                                    <DropdownItem value=\"xs\">Extra Small</DropdownItem>\n                                    <DropdownItem value=\"sm\">Small</DropdownItem>\n                                    <DropdownItem value=\"md\">Medium</DropdownItem>\n                                    <DropdownItem value=\"lg\">Large</DropdownItem>\n                                    <DropdownItem value=\"xl\">Extra Large</DropdownItem>\n\n                                </Dropdown>\n                                <Input className='  mt-2' type='text' placeholder='text'\n                                    value={TooltipConfig.text}\n                                    onChange={(e) => { setTooltipConfig({ ...TooltipConfig, text: e.target.value }) }} />\n                            </div>\n                        </div>\n                        <div className=' w-1/2 flex items-center justify-center '>\n                            <Tooltip className={TooltipConfig.className} text={TooltipConfig.text} position={TooltipConfig.position} size={TooltipConfig.size}>\n                                <Button>Hover Me</Button>\n                            </Tooltip>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Alerts Section */}\n                <section className=\"space-y-4 w-full\" id='section3'>\n                    <h2 className=\"text-xl font-semibold\">Alerts</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className=' w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Dropdown searchablebar className=\"mt-2  w-72\"\n                                    value={alertConfig.variant}\n                                    onChange={(value) => { setAlertConfig({ ...alertConfig, variant: value }) }}\n                                >\n                                    <DropdownItem value=\"default\">Default</DropdownItem>\n                                    <DropdownItem value=\"error\">Error</DropdownItem>\n                                    <DropdownItem value=\"success\">Success</DropdownItem>\n                                    <DropdownItem value=\"warning\">Warning</DropdownItem>\n                                    <DropdownItem value=\"info\">Info</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown searchablebar className=\" mt-2 w-72\"\n                                    value={alertConfig.size}\n                                    onChange={(value) => { setAlertConfig({ ...alertConfig, size: value }) }}\n                                >\n                                    <DropdownItem value=\"xs\">Extra Small</DropdownItem>\n                                    <DropdownItem value=\"sm\">Small</DropdownItem>\n                                    <DropdownItem value=\"md\">Medium</DropdownItem>\n                                    <DropdownItem value=\"lg\">Large</DropdownItem>\n                                    <DropdownItem value=\"xl\">Extra Large</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown searchablebar className=\"mt-2 w-72\"\n                                    value={alertConfig.position}\n                                    onChange={(value) => { setAlertConfig({ ...alertConfig, position: value }) }}\n                                >\n                                    <DropdownItem value=\"top-left\">Top Left</DropdownItem>\n                                    <DropdownItem value=\"top-center\">Top Center</DropdownItem>\n                                    <DropdownItem value=\"top-right\">Top Right</DropdownItem>\n                                    <DropdownItem value=\"bottom-left\">Bottom Left</DropdownItem>\n                                    <DropdownItem value=\"bottom-center\">Bottom Center</DropdownItem>\n                                    <DropdownItem value=\"bottom-right\">Bottom Right</DropdownItem>\n                                </Dropdown>\n\n                                <Input className='  mt-2' type='text' placeholder='Alert Text'\n                                    value={alertConfig.text}\n                                    onChange={(e) => { setAlertConfig({ ...alertConfig, text: e.target.value }) }} />\n                            </div>\n                        </div>\n                        <div className=' w-1/2 flex flex-col items-center justify-center gap-4'>\n                            {alertConfig.showAlert && (\n                                <Alert\n                                    variant={alertConfig.variant}\n                                    size={alertConfig.size}\n                                    position={alertConfig.position}\n                                    duration={alertConfig.duration}\n                                    onClose={() => setAlertConfig({ ...alertConfig, showAlert: false })}\n                                >\n                                    {alertConfig.text}\n                                </Alert>\n                            )}\n                            <Button onClick={() => setAlertConfig({ ...alertConfig, showAlert: true })}>Show Alert</Button>\n\n                            {alertConfig.showConfirm && (\n                                <Alert\n                                    variant=\"warning\"\n                                    size={alertConfig.size}\n                                    onConfirm={() => {\n                                        console.log('Confirmed!');\n                                        setAlertConfig({ ...alertConfig, showConfirm: false });\n                                    }}\n                                    onClose={() => setAlertConfig({ ...alertConfig, showConfirm: false })}\n                                >\n                                    Are you sure you want to delete this?\n                                </Alert>\n                            )}\n                            <Button onClick={() => setAlertConfig({ ...alertConfig, showConfirm: true })}>Show Confirmation</Button>\n                        </div>\n                    </div>\n                </section>\n\n\n                {/* Accordion Section */}\n                <section className=\"space-y-4  w-full\" id='section4'>\n                    <h2 className=\"text-xl font-semibold\">Accordion</h2>\n                    <div className='h-52 flex items-center justify-center w-full'>\n                        <Accordion >\n                            <AccordionItem value=\"item-1\">\n                                <AccordionTrigger>Is it accessible?</AccordionTrigger>\n                                <AccordionContent>\n                                    Yes. It adheres to the WAI-ARIA design pattern\n                                </AccordionContent>\n                            </AccordionItem>\n                            <AccordionItem value=\"item-2\">\n                                <AccordionTrigger>Is it accessible?</AccordionTrigger>\n                                <AccordionContent>\n                                    <Tooltip text=\"This tooltip appears on the right.\" position=\"right\" size='xs' className='w-52'>\n                                        <Button>Hover Me</Button>\n                                    </Tooltip>\n                                </AccordionContent>\n                            </AccordionItem>\n                        </Accordion>\n                    </div>\n                </section>\n\n                {/* Badge Examples */}\n                <section className=\"space-y-4 w-full\" id='section5'>\n                    <h2 className=\"text-xl font-semibold\">Badges</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className=' w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Input\n                                    className=''\n                                    type='text'\n                                    placeholder='classes'\n                                    value={badgeConfig.className}\n                                    onChange={(e) => setBadgeConfig({ ...badgeConfig, className: e.target.value })}\n                                />\n                                <Dropdown\n                                    searchablebar\n                                    className=\"mt-2  w-72\"\n                                    value={badgeConfig.variant}\n                                    onChange={(value) => setBadgeConfig({ ...badgeConfig, variant: value })}\n                                >\n                                    <DropdownItem value=\"default\">Default</DropdownItem>\n                                    <DropdownItem value=\"error\">Error</DropdownItem>\n                                    <DropdownItem value=\"success\">Success</DropdownItem>\n                                    <DropdownItem value=\"warning\">Warning</DropdownItem>\n                                    <DropdownItem value=\"info\">Info</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown\n                                    searchablebar\n                                    className=\"mt-2 w-72\"\n                                    value={badgeConfig.variantStyle}\n                                    onChange={(value) => setBadgeConfig({ ...badgeConfig, variantStyle: value })}\n                                >\n                                    <DropdownItem value=\"default\">default</DropdownItem>\n                                    <DropdownItem value=\"solid\">Solid</DropdownItem>\n                                    <DropdownItem value=\"outline\">Outline</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown\n                                    searchablebar\n                                    className=\" mt-2 w-72\"\n                                    value={badgeConfig.size}\n                                    onChange={(value) => setBadgeConfig({ ...badgeConfig, size: value })}\n                                >\n                                    <DropdownItem value=\"xs\">Extra Small</DropdownItem>\n                                    <DropdownItem value=\"sm\">Small</DropdownItem>\n                                    <DropdownItem value=\"md\">Medium</DropdownItem>\n                                    <DropdownItem value=\"lg\">Large</DropdownItem>\n                                    <DropdownItem value=\"xl\">Extra Large</DropdownItem>\n                                </Dropdown>\n\n                                <Input\n                                    className='mt-2'\n                                    type='text'\n                                    placeholder='Badge Content'\n                                    value={badgeConfig.content}\n                                    onChange={(e) => setBadgeConfig({ ...badgeConfig, content: e.target.value })}\n                                />\n                            </div>\n                        </div>\n                        <div className='w-1/2 flex items-center justify-center '>\n                            <Badge\n                                variant={badgeConfig.variant}\n                                variantStyle={badgeConfig.variantStyle}\n                                size={badgeConfig.size}\n                                className={badgeConfig.className}\n                            >\n                                <span>{badgeConfig.content}</span>\n                            </Badge>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Breadcrumb */}\n                <section className=\"space-y-4 w-full\" id='section6'>\n                    <h2 className=\"text-xl font-semibold\">Breadcrumb</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n\n                        <Breadcrumb className=\"my-4\">\n                            <BreadcrumbItem>\n                                <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n                            </BreadcrumbItem>\n                            <BreadcrumbSeparator />\n                            <BreadcrumbItem>\n                                <BreadcrumbLink href=\"/category\">Category</BreadcrumbLink>\n                            </BreadcrumbItem>\n                            <BreadcrumbSeparator />\n                            <BreadcrumbDropdown>\n                                <BreadcrumbItem>\n                                    <BreadcrumbLink href=\"#section1\">Section 1</BreadcrumbLink>\n                                </BreadcrumbItem>\n                                <BreadcrumbItem>\n                                    <BreadcrumbLink href=\"#section2\">Section 2</BreadcrumbLink>\n                                </BreadcrumbItem>\n                                <BreadcrumbItem>\n                                    <BreadcrumbLink href=\"#section3\">Section 3</BreadcrumbLink>\n                                </BreadcrumbItem>\n                            </BreadcrumbDropdown>\n                            <BreadcrumbSeparator />\n                            <BreadcrumbItem>\n                                <BreadcrumbLink active={true} href=\"/category\">Category</BreadcrumbLink>\n                            </BreadcrumbItem>\n                        </Breadcrumb>\n                    </div>\n                </section>\n\n                {/* Calendar */}\n                <section className=\"space-y-4 w-full\" id='section7'>\n                    <h2 className=\"text-xl font-semibold\">Calendar</h2>\n\n                    <div className=' flex gap-5 justify-center items-center w-full'>\n                        {/* Basic usage with initial date and placeholder */}\n                        <Calendar\n                            initialDate={new Date()}\n                            placeholder=\"Select your birthday\"\n                            onChange={handleDateChange}\n                        />\n\n                        {/* Example with date range (toDate must be before fromDate) */}\n                        <Calendar\n                            toDate={new Date('2024-01-01')}\n                            fromDate={new Date('2024-01-15')}\n                            initialDate={new Date('2024-01-15')}\n                            onChange={handleDateChange}\n                        />\n\n                        {/* Example with custom theme */}\n                        <Calendar\n                            theme={['pink', 'green', 'gray']}\n                            fromDate={new Date('2024-01-15')}\n                            initialDate={new Date('2024-01-15')}\n                            onChange={handleDateChange}\n                        />\n                        <Calendar\n                            theme={['pink', 'green', 'gray']}\n                            toDate={new Date('2024-01-15')}\n                            initialDate={new Date('2024-01-15')}\n                            onChange={handleDateChange}\n                        />\n                    </div>\n                </section>\n\n                {/* Carousel */}\n                <section className=\"space-y-4 w-full\" id='section8'>\n                    <h2 className=\"text-xl font-semibold\">Carousel</h2>\n                    <div className=\"relative w-96 h-[300px] mx-auto\"> {/* Adjust width and height as needed */}\n                        <Carousel autoplay interval={2500} orientation='vertical'>\n                            <CarouselItem className=\" border \">\n                                <img\n                                    src=\"https://placehold.co/600x400/black/white?text=1\"\n                                    alt=\"Slide 1\"\n                                    className=\"w-full h-full object-cover\"\n                                />\n                            </CarouselItem>\n                            <CarouselItem>\n                                <img\n                                    src=\"https://placehold.co/600x400/black/white?text=2\"\n                                    alt=\"Slide 2\"\n                                    className=\"w-full h-full object-cover\"\n                                />\n                            </CarouselItem>\n                            <CarouselItem>\n                                <div className=\"w-full h-full bg-black flex flex-col items-center justify-center\">\n                                    <h3 className=\"text-3xl text-white font-bold\">Custom Content</h3>\n                                    roles watch\n                                </div>\n                            </CarouselItem>\n                        </Carousel>\n                    </div>\n                </section>\n\n                {/* Checkbox */}\n                <section id='section9' className=\"space-y-4 w-full\" >\n                    <h2 className=\"text-xl font-semibold\">Check box </h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className=' w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Dropdown searchablebar className=\"mt-2  w-72\"\n                                    value={CheckBoxConfig.variant}\n                                    onChange={(value) => { setCheckBoxConfig({ ...CheckBoxConfig, variant: value }) }}\n                                >\n                                    <DropdownItem value=\"default\">Default</DropdownItem>\n                                    <DropdownItem value=\"error\">Error</DropdownItem>\n                                    <DropdownItem value=\"success\">Success</DropdownItem>\n                                    <DropdownItem value=\"warning\">Warning</DropdownItem>\n                                    <DropdownItem value=\"info\">Info</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown searchablebar className=\" mt-2 w-72\"\n                                    value={CheckBoxConfig.size}\n                                    onChange={(value) => { setCheckBoxConfig({ ...CheckBoxConfig, size: value }) }}\n                                >\n                                    <DropdownItem value=\"xs\">Extra Small</DropdownItem>\n                                    <DropdownItem value=\"sm\">Small</DropdownItem>\n                                    <DropdownItem value=\"md\">Medium</DropdownItem>\n                                    <DropdownItem value=\"lg\">Large</DropdownItem>\n                                    <DropdownItem value=\"xl\">Extra Large</DropdownItem>\n\n                                </Dropdown>\n                                <Input className='  mt-2' type='text' placeholder='classes'\n                                    value={CheckBoxConfig.className}\n                                    onChange={(e) => { setCheckBoxConfig({ ...CheckBoxConfig, className: e.target.value }) }} />\n                            </div>\n                        </div>\n                        <div className=' w-1/2 flex items-center justify-center '>\n                            <Checkbox\n                                checked={CheckBoxConfig.checked}\n                                onChange={(checked) => { setCheckBoxConfig({ ...CheckBoxConfig, checked: checked }) }}\n                                id={\"lable1\"}\n                                variant={CheckBoxConfig.variant}\n                                size={CheckBoxConfig.size}\n                                className={CheckBoxConfig.className}\n                            />\n                            <Label htmlFor={\"lable1\"}>Default</Label>\n\n                        </div>\n                    </div>\n                    {/* <div className='flex' >\n                            <Checkbox variant=\"danger\" size=\"lg\" id=\"Large (Danger)\" />\n                            <Label htmlFor={\"Large\"}>Large (Danger)</Label>\n                        </div>\n                    </div> */}\n                </section>\n\n                {/* Dropdown */}\n                <section id='section10' className='space-y-6 w-full'>\n                    <h2 className=\"text-xl font-semibold\">Dropdown</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className='w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <div className='flex justify-start mt-2 '>\n                                    <Checkbox\n                                        checked={dropdownConfig.searchable}\n                                        onChange={(checked) => setDropdownConfig({ ...dropdownConfig, searchable: checked })}\n                                        id={\"dropdownSearchable\"}\n                                    />\n                                    <Label htmlFor={\"dropdownSearchable\"}>Searchable</Label>\n                                </div>\n                                <div className='flex justify-start mt-2 '>\n                                    <Checkbox\n                                        checked={dropdownConfig.multiple}\n                                        onChange={(checked) => setDropdownConfig({ ...dropdownConfig, multiple: checked })}\n                                        id={\"dropdownMultiple\"}\n                                    />\n                                    <Label htmlFor={\"dropdownMultiple\"}>Multiple</Label>\n                                </div>\n                                <Input\n                                    className='mt-2'\n                                    type='text'\n                                    placeholder='Placeholder'\n                                    value={dropdownConfig.placeholder}\n                                    onChange={(e) => setDropdownConfig({ ...dropdownConfig, placeholder: e.target.value })}\n                                />\n                                <Input\n                                    className='mt-2'\n                                    type='text'\n                                    placeholder='Classes'\n                                    value={dropdownConfig.className}\n                                    onChange={(e) => setDropdownConfig({ ...dropdownConfig, className: e.target.value })}\n                                />\n                            </div>\n                        </div>\n                        <div className='w-1/2 flex items-center justify-center '>\n                            <Dropdown\n                                searchablebar={dropdownConfig.searchable}\n                                className={dropdownConfig.className}\n                                placeholder={dropdownConfig.placeholder}\n                                multiple={dropdownConfig.multiple}\n                                value={dropdownConfig.multiple ? dropdownConfig.values : dropdownConfig.value}\n                                onChange={handleDropdownChange}\n                            >\n                                <DropdownItem>Option 1</DropdownItem>\n                                <DropdownItem>Choice 2</DropdownItem>\n                                <DropdownItem>Selection 3</DropdownItem>\n                            </Dropdown>\n                        </div>\n                    </div>\n                </section>\n\n\n                {/* Cammondbox */}\n                <section className=\"space-y-4 w-full\" id='section11'>\n                    <h2 className=\"text-xl font-semibold\">Command Box</h2>\n                    <div className=' flex gap-5 justify-center items-center w-full text-white' >\n                        <Command onSearch={handleSearch} searchablebaricon=\"🔍\">\n                            <CommandGroup title=\"Actions\">\n                                <CommandItem onClick={() => console.log('Edit clicked!')} isActive={searchTerm === 'Edit'}>\n                                    <CommandItemIcon>✏️</CommandItemIcon>\n                                    <CommandItemText>Edit</CommandItemText>\n                                    <CommandItemSuggestionText>Ctrl+E</CommandItemSuggestionText>\n                                </CommandItem>\n\n                                <CommandItem onClick={() => console.log('Delete clicked!')}>\n                                    <CommandItemIcon>🗑️</CommandItemIcon>\n                                    <CommandItemText>Delete</CommandItemText>\n                                </CommandItem>\n\n                                {/* More Command Items can be added here */}\n                            </CommandGroup>\n\n                            <CommandGroup title=\"Settings\">\n                                <CommandItem>\n                                    <CommandItemIcon>⚙️</CommandItemIcon>\n                                    <CommandItemText>General</CommandItemText>\n                                </CommandItem>\n                                <CommandItem>\n                                    <CommandItemIcon>🎨</CommandItemIcon>\n                                    <CommandItemText>Appearance</CommandItemText>\n                                </CommandItem>\n                            </CommandGroup>\n                        </Command>\n                    </div>\n                </section>\n\n                {/* dilog */}\n                <section className=\"space-y-4 w-full\" id='section12'>\n                    <h2 className=\"text-xl font-semibold\">Dilog box</h2>\n                    <div className=' flex gap-5 justify-center items-center w-full text-white' >\n                        <DilogContener rightclick={() => console.log('Menu 1 clicked!')} className={\"border-gray-500 border w-1/2 p-2\"}>\n                            <span>Right-click me for Menu 1</span>\n                            <DilogMenuContent className=\" border-gray-500 border  \">\n                                <DilogMenuList > <div>Option 1</div></DilogMenuList>\n                                <DilogMenuList > <div>Option 2</div></DilogMenuList>\n                            </DilogMenuContent>\n                        </DilogContener>\n\n                        <DilogContener rightclick={() => console.log(' Menu 2 clicked!')} className={\"border-gray-500 border w-1/2 p-2\"}>\n                            <DilogContent>\n                                <span>Right-click me for Menu 2</span>\n                                hehehehe\n                            </DilogContent>\n\n                            <DilogMenuContent className=\" w-96  \" >\n                                <DilogMenuGroup title=\"hello\">\n                                    <DilogMenuList >Item A</DilogMenuList>\n                                    <DilogMenuList>Item B</DilogMenuList>\n                                    <DilogMenuList >Item A</DilogMenuList>\n                                    <DilogMenuList>Item B</DilogMenuList>\n                                </DilogMenuGroup>\n                                <DilogMenuGroup>\n\n                                    <DilogMenuList >Item A</DilogMenuList>\n                                    <DilogMenuList>Item B</DilogMenuList>\n                                </DilogMenuGroup>\n                            </DilogMenuContent>\n                        </DilogContener>\n                    </div>\n                </section>\n\n                {/* Input */}\n                    <section className=\"space-y-4 w-full\" id='section13'>\n                    <h2 className=\"text-xl font-semibold\">Input</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className='w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Input\n                                    className='mt-2'\n                                    type='text'\n                                    placeholder='Classes'\n                                    value={inputConfig.className}\n                                    onChange={(e) => setInputConfig({ ...inputConfig, className: e.target.value })}\n                                />\n                                <Input\n                                    className='mt-2'\n                                    type='text'\n                                    placeholder='Placeholder'\n                                    value={inputConfig.placeholder}\n                                    onChange={(e) => setInputConfig({ ...inputConfig, placeholder: e.target.value })}\n                                />\n                                <Dropdown searchablebar className=\"mt-2  w-72\"\n                                    value={inputConfig.type}\n                                    onChange={(value) => { setInputConfig({ ...inputConfig, type: value }) }}\n                                >\n                                    <DropdownItem value=\"text\">Text</DropdownItem>\n                                    <DropdownItem value=\"email\">Email</DropdownItem>\n                                    <DropdownItem value=\"password\">Password</DropdownItem>\n                                 </Dropdown>\n                            </div>\n                        </div>\n                        <div className='w-1/2 flex items-center justify-center '>\n                            <Input\n                                className={inputConfig.className}\n                                placeholder={inputConfig.placeholder}\n                                type={inputConfig.type}\n                                value={inputConfig.value}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                    </div>\n                </section>\n\n                {/* Datatable */}\n                <section className=\"space-y-4 w-full\" id='section15'>\n                    <h2 className=\"text-xl font-semibold\">Datatable</h2>\n                    <div className='flex flex-col justify-start w-full'>\n                        <ScrollArea className={\"w-1/2 mx-auto h-96 overflow-scroll\"} orientation='horizontal'>\n                            <Datatable className=\"w-fit\">\n                                <TableHead>\n                                    <TableRow >\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"} >\n                                            ID\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"} >\n                                            Name\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"} >\n                                            Category\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"} >\n                                            Stock\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"  hover:bg-slate-800 w-52 text-center\"} >\n                                            Avilability\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"}>\n                                            Price\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"}>\n                                            Rating\n                                        </TableHeadingCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody className=\"w-fit\">\n                                    {\n                                        sampleTableData.map((row) => {\n                                            return (\n                                                <TableRow key={row.id}>\n                                                    <TableCell className={\"hover:bg-slate-800 w-96\"}>\n                                                        {row.id}\n                                                    </TableCell>\n                                                    <TableCell className={\"hover:bg-slate-800 w-96\"}>\n                                                        {row.productName}\n                                                    </TableCell>\n                                                    <TableCell className={\"hover:bg-slate-800 w-96\"}>\n                                                        {row.category}\n                                                    </TableCell>\n                                                    <TableCell className={\"hover:bg-slate-800 w-96\"}>\n                                                        {row.stock}\n                                                    </TableCell>\n                                                    <TableCell className={\"  hover:bg-slate-800 w-52 text-center\"}>\n                                                        {row.available ? \"yes\" : \"oh no\"}\n                                                    </TableCell>\n                                                    <TableCell className={\"hover:bg-slate-800\"}>\n                                                        {row.price}\n                                                    </TableCell>\n                                                    <TableCell className={\"hover:bg-slate-800\"}>\n                                                        {row.rating}\n                                                    </TableCell>\n                                                </TableRow>\n                                            )\n                                        })\n                                    }\n                                </TableBody>\n                            </Datatable>\n                        </ScrollArea>\n                    </div>\n                </section>\n\n                {/* scroll Area */}\n                <section className=\"space-y-4 w-full\" id='section16'>\n                    <h2 className=\"text-xl font-semibold\">Datatable</h2>\n                    <div className='flex flex-col justify-start w-full'>\n                        <ScrollArea className={\"w-[50vw] h-[50vh] mx-auto overflow-scroll\"} orientation=''>\n                            <div\n                                className='w-screen h-screen'\n                                style={{\n                                    backgroundImage: `linear-gradient(to right, rgba(255, 255, 255, 0.5) 1px, transparent 1px), \n                          linear-gradient(to bottom, rgba(255, 255, 255, 0.5) 1px, transparent 1px)`,\n                                    backgroundSize: '40px 40px', // Adjust grid size here\n                                    backgroundColor: '#000000', // Optional: set a background color\n                                }}\n                            >\n                                {/* You can place other components or content here */}\n                            </div>\n\n                        </ScrollArea>\n                    </div>\n                </section >\n\n                {/* Resizable */}\n                <section className=\"space-y-4 w-full\" id='section17'>\n                    <h2 className=\"text-xl font-semibold\">Resizable</h2>\n                    <div className='flex flex-col justify-start w-1/2 mx-auto min-w-64 min-h-80 '>\n\n                        <ResizablePanelGroup direction=\"horizontal\">\n                            <ResizablePanel defaultSize={300}>\n                                <div className=\"p-4 h-full\">\n                                    <h1 className=\"text-2xl\">Panel 1</h1>\n                                    <p>This is the first panel of the outer group.</p>\n                                </div>\n                            </ResizablePanel>\n\n                            <ResizablePanel defaultSize={500}>\n\n                                <ResizablePanelGroup direction=\"vertical\">\n                                    <ResizablePanel defaultSize={100} direction='vertical'>\n                                        <div className=\"p-4 h-full\">\n                                            <h1 className=\"text-xl\">Nested Panel 1</h1>\n                                            <p>This is the first panel in the nested group.</p>\n                                        </div>\n                                    </ResizablePanel>\n                                    <ResizablePanel defaultSize={100} direction='vertical'>\n                                        <div className=\"p-4   h-full\">\n                                            <h1 className=\"text-xl\">Nested Panel 2</h1>\n                                            <p>This is the second panel in the nested group.</p>\n                                        </div>\n                                    </ResizablePanel>\n                                </ResizablePanelGroup>\n                            </ResizablePanel>\n                        </ResizablePanelGroup>\n                    </div>\n                </section>\n\n                {/* ProgressBar */}\n                <section className=\"space-y-4 w-full\" id='section17'>\n                    <h2 className=\"text-xl font-semibold\">Datatable</h2>\n                    <div className='flex flex-col justify-start w-1/2 mx-auto min-w-64 min-h-80 '>\n                        <h1 className=\"text-2xl font-bold mb-4\">Progress Bar Example</h1>\n                        <ProgressBar progress={30} />\n                    </div>\n                </section>\n            </main >\n            {\n                showAlert && (\n                    <Alert\n                        variant=\"warning\"\n                        size=\"md\"\n                        onConfirm={() => {\n                            console.log('Confirmed!');\n                            setShowAlert(false);\n                        }}\n                        onClose={() => setShowAlert(false)}\n                    >\n                        Are you sure you want to delete this?\n                    </Alert>\n                )\n            }\n        </div >\n    );\n}\n"},
          {text: "When I say to create a component or page, then use this component to make a page or component. First, think consciously and make a description of what my component requires and how the UI should look. Then use the component and add some customized props. Make and style them, such as spacing between components and display designs. Then create the component or page when I say to create something.\n\n"},
          {text: "Okay, I understand.  From now on, when you ask me to create a component or page, I will follow these steps:\n\n1. **Requirements and UI Design:** I will first analyze your request and determine the necessary props, functionality, and desired UI appearance. I will provide a brief description of my understanding before proceeding with the code.\n\n2. **Component Usage and Customization:** I will use the appropriate components from the provided UI library, customizing them with relevant props and styling to achieve the desired look and feel. I will pay attention to spacing, layout, and overall visual design.\n\n3. **Component/Page Creation:** Finally, I will provide the complete code for the component or page, incorporating the components and styles as described.\n\n\nJust let me know what you'd like me to create!  I'm ready for your next instruction.\n"},
        ],
      }, 









      /*
 * Install the Generative AI SDK
 *
 * $ npm install @google/generative-ai
 */

const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash-8b-exp-0924",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

async function run() {
  const chatSession = model.startChat({
    generationConfig,
 // safetySettings: Adjust safety settings
 // See https://ai.google.dev/gemini-api/docs/safety-settings
    history: [
      {
        role: "user",
        parts: [
          {text: "import React, { useState } from 'react';\n\n/**\n * @typedef {Object} AccordionContentProps\n * @property {boolean} isOpen - Whether the accordion content is open or closed.\n * @property {React.ReactNode} children - The content to be displayed inside the accordion.\n */\n\n/**\n * The content section of an accordion item.\n *\n * This component should be used as a child of `AccordionItem`.\n * It displays the content associated with an accordion item.\n *\n * @param {AccordionContentProps} props - The component props.\n * @returns {JSX.Element} The rendered AccordionContent component. \n */\nexport const AccordionContent = ({ isOpen, children }) => {\n    return (\n        <div\n            className={` transition-max-height duration-300 ease-in-out overflow-hidden transform  ${isOpen ? 'min-h-fit duration-400 ' : 'max-h-0 duration-400 '} `}\n        >\n            <div className='px-4 py-3'>\n                {children}\n            </div>\n        </div>\n    );\n};\n\n/**\n * @typedef {Object} AccordionTriggerProps\n * @property {boolean} isOpen - Whether the accordion item is open or closed.\n * @property {Function} onClick - The function to be called when the trigger is clicked.\n * @property {React.ReactNode} children - The content to be displayed inside the trigger button.\n */\n\n/**\n * The trigger button for an accordion item.\n *\n * This component should be used as a child of `AccordionItem`.\n * It acts as a button that toggles the open/closed state of the accordion item.\n *\n * @param {AccordionTriggerProps} props - The component props.\n * @returns {JSX.Element} The rendered AccordionTrigger component.\n */\nexport const AccordionTrigger = ({ isOpen, onClick, children }) => {\n    return (\n        <>\n            <button\n                onClick={onClick}\n                className=\"w-full px-4 py-3 text-left font-medium flex justify-between items-center focus:outline-none\"\n            >\n                {children}\n\n                <svg\n                    className={` h-4 w-4 transition-transform transform ${isOpen ? 'rotate-180' : ''}`}\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"currentColor\"\n                >\n\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n                        clipRule=\"evenodd\"\n                    />\n                </svg>\n            </button>\n        </>\n    );\n};\n\n/**\n * @typedef {Object} AccordionItemProps\n * @property {React.ReactNode} children - The children of the AccordionItem component.\n * @property {any} value - The value associated with the accordion item.\n */\n\n/**\n * An individual accordion item.\n *\n * This component represents a single item within an accordion.\n * It should contain `AccordionTrigger` and `AccordionContent` as children.\n *\n * @param {AccordionItemProps} props - The component props.\n * @returns {JSX.Element} The rendered AccordionItem component.\n */\nexport const AccordionItem = ({ children, value }) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggleOpen = () => {\n        setIsOpen(!isOpen);\n    };\n\n    return (\n        <div className=\" overflow-hidden mb-2\">\n            {React.Children.map(children, (child) => {\n                if (child.type === AccordionTrigger) {\n                    return React.cloneElement(child, {\n                        isOpen: isOpen,\n                        onClick: toggleOpen,\n                    });\n                } else if (child.type === AccordionContent) {\n                    return React.cloneElement(child, {\n                        isOpen: isOpen,\n                    });\n                }\n                return null;\n            })}\n\n            <hr className='border-t-gray-500 ' />\n        </div>\n    );\n};\n\n/**\n * @typedef {Object} AccordionProps\n * @property {React.ReactNode} children - The children of the Accordion component.\n */\n\n/**\n * The main accordion component.\n *\n * This component acts as a container for multiple `AccordionItem` components.\n * It provides the overall structure and styling for the accordion.\n *\n * @param {AccordionProps} props - The component props.\n * @returns {JSX.Element} The rendered Accordion component.\n */\nexport const Accordion = ({ children }) => {\n    return (\n        <div className='p-4 border border-gray-500 rounded-md'>\n            {children}\n        </div>\n    );\n};"},
          {text: "\"use client\"; \nimport { useState, useEffect, useRef } from 'react';\nimport Button from './Button';\n\n/**\n * A versatile alert component that can be used for both informational messages and confirmation dialogs.\n * @param {Object} props - The component props.\n * @param {React.ReactNode} props.children - The content of the alert message.\n * @param {('success'|'warning'|'error'|'info')} [props.variant='info'] - The visual style of the alert.\n * @param {('xs'|'sm'|'md'|'lg'|'xl')} [props.size='md'] - The size of the alert.\n * @param {number} [props.duration=10000] - The duration in milliseconds to display the alert before auto-closing (ignored for confirmation dialogs).\n * @param {function} [props.onClose] - Callback function triggered when the alert is closed (either by auto-close, clicking the close button, or clicking \"Cancel\").\n * @param {function} [props.onConfirm] - Callback function triggered when the \"Confirm\" button is clicked (turns the alert into a confirmation dialog).\n * @param {boolean} [props.showCloseButton=true] - Whether to show the close button (hidden automatically for confirmation dialogs).\n * @param {string} [props.confirmButtonLabel='Confirm'] - The label for the \"Confirm\" button.\n * @param {string} [props.cancelButtonLabel='Cancel'] - The label for the \"Cancel\" button.\n * @param {('top'|'top-left'|'top-right'|'bottom'|'bottom-left'|'bottom-right'|'center')} [props.position='top'] - The position of the alert on the screen.\n * @returns {JSX.Element} The rendered Alert component.\n */\n\nconst Alert = ({\n    children,\n    variant = 'info',\n    size = 'md',\n    duration = 10000,\n    onClose,\n    onConfirm,\n    showCloseButton = true,\n    confirmButtonLabel = 'Confirm',\n    cancelButtonLabel = 'Cancel',\n    position = 'top' // Default position\n}) => {\n    const [isOpen, setIsOpen] = useState(true);\n    const timerRef = useRef(null);\n\n    const variantClasses = {\n        success: 'bg-green-50 border border-green-400 text-green-900',\n        warning: 'bg-yellow-50 border border-yellow-400 text-yellow-900',\n        error: 'bg-red-50 border border-red-400 text-red-900',\n        info: 'bg-blue-50 border border-blue-400 text-blue-900',\n    };\n\n    const sizeClasses = {\n        xs: 'text-xs p-1', // Extra small size\n        sm: 'text-sm p-2',\n        md: 'text-base p-3',\n        lg: 'text-lg p-4',\n        xl: 'text-xl p-5'  // Extra large size\n    };\n\n    const positionClasses = {\n        top: 'top-4 left-1/2 transform -translate-x-1/2',\n        'top-left': 'top-4 left-4',\n        'top-right': 'top-4 right-4',\n        bottom: 'bottom-4 left-1/2 transform -translate-x-1/2',\n        'bottom-left': 'bottom-4 left-4',\n        'bottom-right': 'bottom-4 right-4',\n        center: 'top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2',\n    };\n\n    useEffect(() => {\n        if (duration > 0 && !onConfirm) {\n            timerRef.current = setTimeout(() => {\n                setIsOpen(false);\n                onClose && onClose();\n            }, duration);\n        }\n\n        return () => clearTimeout(timerRef.current);\n    }, [duration, onClose, onConfirm]);\n\n    if (!isOpen) return null;\n\n    return (\n        <div className={`fixed z-50 rounded-lg shadow-md ${variantClasses[variant]} ${sizeClasses[size]} flex flex-col justify-between w-full max-w-md transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'} ${positionClasses[position]}`}>\n            <div className=\"p-3 text-left\">{children}</div>\n            <div className=\"flex items-center justify-end w-full space-x-2 border-t border-gray-200 p-3\">\n                {onConfirm && (\n                    <>\n                        <Button\n                            size={size}\n                            variant=\"primary\"\n                            onClick={() => {\n                                setIsOpen(false);\n                                onConfirm();\n                            }}\n                        >\n                            {confirmButtonLabel}\n                        </Button>\n                        <Button\n                            size={size}\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setIsOpen(false);\n                                onClose && onClose();\n                            }}\n                        >\n                            {cancelButtonLabel}\n                        </Button>\n                    </>\n                )}\n                {showCloseButton && !onConfirm &&\n                    (\n                        <Button variant=\"icon\" size={size} onClick={() => { setIsOpen(false); onClose && onClose(); }}>\n                            <svg className=\"h-5 w-5 text-gray-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                            </svg>\n                        </Button>\n                    )}\n            </div>\n        </div>\n    );\n}\n\nexport default Alert;\n"},
          {text: "\"use client\";\n\n/**\n * A versatile badge component for displaying concise information based on UI requirements.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The content to display within the badge.\n * @param {'success'|'warning'|'error'|'info'|'default'} [props.variant='default'] - The UI-based variant of the badge (success, warning, etc.).\n * @param {'solid'|'outline'|'default'} [props.variantStyle='default'] - The style of the badge (solid background, outlined, or light background).\n * @param {'xs'|'sm'|'md'|'lg'|'xl'} [props.size='md'] - The size of the badge.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the badge.\n * @param {Object} [props.rest] - Any other props are spread to the underlying `<span>` element.\n *\n * @example\n * // Basic usage\n * <Badge>Default</Badge>\n *\n * @example\n * // With different variant, style, and size\n * <Badge variant=\"success\" variantStyle=\"outline\" size=\"lg\">\n *   Success Outline (Large)\n * </Badge>\n */\n\nexport default function Badge({\n    children,\n    variant = 'default',\n    variantStyle = 'default',\n    size = 'md',\n    className = '',\n    ...rest\n}) {\n    // Define the variant classes based on the style and variant\n    const variantClasses = {\n        success: `${variantStyle === 'solid' ? 'bg-green-500 text-white' : variantStyle === 'outline' ? 'border border-green-500 text-green-500' : 'bg-green-100 text-green-700'}`,\n        warning: `${variantStyle === 'solid' ? 'bg-yellow-500 text-white' : variantStyle === 'outline' ? 'border border-yellow-500 text-yellow-500' : 'bg-yellow-100 text-yellow-700'}`,\n        error: `${variantStyle === 'solid' ? 'bg-red-500 text-white' : variantStyle === 'outline' ? 'border border-red-500 text-red-500' : 'bg-red-100 text-red-700'}`,\n        info: `${variantStyle === 'solid' ? 'bg-blue-500 text-white' : variantStyle === 'outline' ? 'border border-blue-500 text-blue-500' : 'bg-blue-100 text-blue-700'}`,\n        default: `${variantStyle === 'solid' ? 'bg-gray-500 text-white' : variantStyle === 'outline' ? 'border border-gray-500 text-gray-500' : 'bg-gray-100 text-gray-700'}`,\n    };\n\n    // Define the size classes\n    const sizeClasses = {\n        xs: 'text-xs px-1 py-0.5',  // Extra small\n        sm: 'text-sm px-1.5 py-0.5',    // Small\n        md: 'text-base px-2 py-1',  // Medium (default)\n        lg: 'text-lg px-2.5 py-1',  // Large\n        xl: 'text-xl px-3 py-2',  // Extra large\n    };\n\n    return (\n        <span\n            className={`rounded-full  inline-flex items-center font-medium ${variantClasses[variant]} ${sizeClasses[size] ? sizeClasses[size]  : \" text-base px-2 py-1 \" } ${className}`}\n            {...rest}\n        >\n            {children}\n        </span>\n    );\n}\n"},
          {text: "\"use client\";\nimport React, { useState } from 'react';\n\n/**\n * @component Breadcrumb - A React component for rendering breadcrumb navigation.\n *\n * @param {React.ReactNode} children - The child elements of the breadcrumb.\n * @param {string} [className] - Additional CSS classes to apply to the breadcrumb container.\n * @param {React.HTMLAttributes<HTMLDivElement>} [rest] - Additional props to spread to the breadcrumb container.\n *\n * @example\n * <Breadcrumb>\n *   <BreadcrumbItem>\n *     <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n *   </BreadcrumbItem>\n *   <BreadcrumbSeparator />\n *   <BreadcrumbItem>\n *     <BreadcrumbLink href=\"/about\">About</BreadcrumbLink>\n *   </BreadcrumbItem>\n * </Breadcrumb>\n */\n\nexport const Breadcrumb = ({ children, className, ...rest }) => {\n    return (\n        <nav aria-label=\"Breadcrumb\" className={className} {...rest}>\n            <ol className=\"flex items-center space-x-1 md:space-x-2\">\n                {children}\n            </ol>\n        </nav>\n    );\n};\n\n/**\n * @component BreadcrumbItem - A single item within a breadcrumb.\n *\n * @param {React.ReactNode} children - The child elements of the breadcrumb item.\n * @param {string} [className] - Additional CSS classes to apply to the breadcrumb item.\n * @param {React.HTMLAttributes<HTMLLIElement>} [rest] - Additional props to spread to the breadcrumb item.\n */\nexport const BreadcrumbItem = ({ children, className, ...rest }) => {\n    return (\n        <li className={className} {...rest}>\n            {children}\n        </li>\n    );\n};\n\n/**\n * @component BreadcrumbLink - A breadcrumb item that functions as a link.\n *\n * @param {string} href - The URL to navigate to when the link is clicked.\n * @param {React.ReactNode} children - The text content of the link.\n * @param {string} [className] - Additional CSS classes to apply to the link.\n * @param {boolean} [active=false] - Whether the link is currently active.\n * @param {React.AnchorHTMLAttributes<HTMLAnchorElement>} [rest] - Additional props to spread to the link.\n */\nexport const BreadcrumbLink = ({ href, children, className, active, ...rest }) => {\n    return (\n        <a\n            href={href}\n            className={`text-sm font-medium  ${active ? 'text-gray-100 dark:text-gray-100' : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-500'} ${className}`}\n            {...rest}\n        >\n            {children}\n        </a>\n    );\n};\n\n/**\n * @component BreadcrumbSeparator - A separator between breadcrumb items.\n *\n * @param {React.ReactNode} [children] - Optional custom separator content.\n * @param {string} [className] - Additional CSS classes to apply to the separator.\n * @param {React.HTMLAttributes<HTMLSpanElement>} [rest] - Additional props to spread to the separator.\n */\nexport const BreadcrumbSeparator = ({ children, className, ...rest }) => {\n    return (\n        <span\n            className={`text-gray-500 dark:text-gray-400 mx-1 md:mx-2 text-sm ${className}`}\n            {...rest}\n        >\n            {children ? children : '/'}\n        </span>\n    );\n};\n\n/**\n * @component BreadcrumbEllipsis - An ellipsis icon used to indicate omitted breadcrumb items.\n *\n * @param {string} [className] - Additional CSS classes to apply to the ellipsis icon.\n * @param {React.SVGProps<SVGSVGElement>} [rest] - Additional props to spread to the ellipsis icon.\n */\nexport const BreadcrumbEllipsis = ({ className, ...rest }) => {\n    return (\n        <svg\n            className={`h-4 w-4 text-gray-400 ${className}`}\n            viewBox=\"0 0 24 24\"\n            fill=\"currentColor\"\n            {...rest}\n        >\n            <path d=\"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n            />\n        </svg>\n    );\n};\n\n/**\n * @component BreadcrumbList - A container for rendering a list of breadcrumb items.\n *\n * @param {React.ReactNode} children - The child elements of the breadcrumb list.\n * @param {string} [className] - Additional CSS classes to apply to the breadcrumb list.\n * @param {React.HTMLAttributes<HTMLOListElement>} [rest] - Additional props to spread to the breadcrumb list.\n */\nexport const BreadcrumbList = ({ children, className, ...rest }) => {\n    return (\n        <ol className={`flex items-center space-x-1 md:space-x-2 ${className}`} {...rest}>\n            {children}\n        </ol>\n    );\n};\n\n/**\n * @component BreadcrumbPage - A breadcrumb item that displays the current page name.\n *\n * @param {React.ReactNode} children - The text content of the page name.\n * @param {string} [className] - Additional CSS classes to apply to the page name.\n * @param {React.HTMLAttributes<HTMLSpanElement>} [rest] - Additional props to spread to the page name.\n */\nexport const BreadcrumbPage = ({ children, className, ...rest }) => {\n    return (\n        <span\n            className={`text-sm font-medium text-gray-700 dark:text-gray-500 ${className}`}\n            {...rest}\n        >\n            {children}\n        </span>\n    );\n};\n\n/**\n * @component BreadcrumbDropdown - A breadcrumb item that displays a dropdown menu.\n *\n * @param {React.ReactNode} children - The child elements of the dropdown menu.\n * @param {string} [className] - Additional CSS classes to apply to the dropdown container.\n * @param {React.HTMLAttributes<HTMLLIElement>} [rest] - Additional props to spread to the dropdown container.\n */\nexport const BreadcrumbDropdown = ({ children, className, ...rest }) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggleDropdown = () => {\n        setIsOpen(!isOpen);\n    };\n\n    return (\n        <li className={`relative ${className}`} {...rest}>\n            <div onClick={toggleDropdown} className=\"cursor-pointer text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-500 flex items-center\">\n                Dropdown\n                <svg\n                    className={`h-4 w-4 ml-1 transform transition-transform duration-200 ${isOpen ? 'rotate-180' : ' '}`}\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                >\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\" />\n                </svg>\n            </div>\n            {isOpen && (\n                <ul className=\"absolute left-0 mt-2 w-48 rounded-md shadow-lg border border-gray-500 \">\n                    {React.Children.map(children, (child, index) => (\n                        <li key={index} className=\"px-4 py-2 hover:shadow-md\">\n                            {child}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </li>\n    );\n};\n"},
          {text: "\"use client\";\n\n/**\n* @param {Object} props\n* @param {React.ReactNode} props.children\n* @param {('default'|'outline'|'primary'|'secondary'|'danger'|'success'|'warning'|'info')} props.variant - The button variant.\n* @param {('md'|'sm'|'lg'|'xl'|'icon')} [props.size='md'] - The button size.\n* @param {string} props.className - Additional class names to apply.\n* @param {React.ButtonHTMLAttributes<HTMLButtonElement>} props.rest - All other props are spread to the button element.\n*/\n\nexport default function Button({ children, variant = 'default', size = 'md', className, ...rest }) {\n    const varients = {\n        default: 'bg-white hover:bg-white/90 text-black',\n        outline: 'bg-gray-900 hover:bg-gray-800 text-gray-100 border border-gray-700 hover:border-transparent',\n        primary: 'bg-blue-500 hover:bg-blue-700 text-white',\n        secondary: 'bg-gray-800 hover:bg-gray-700 text-gray-300',\n        danger: 'bg-red-500 hover:bg-red-800 text-white',\n        success: 'bg-green-500 hover:bg-green-700 text-white  ',\n        warning: 'bg-yellow-400 hover:bg-yellow-500 text-white ',\n        info: 'bg-blue-400 hover:bg-blue-500 text-white',\n    }\n    const sizes = {\n        xs: \"px-1 py-1 text-xs font-thin\",\n        sm: \" px-2 py-1 text-sm font-light\",\n        md: \" px-3 py-1.5 text-base font-medium\",\n        lg: \" px-5 py-2 text-lg font-semibold\",\n        xl: \" px-6  py-2.5 text-xl font-extrabold\",\n        icon: \" py-2 px-2 text-base \",\n    };\n\n    const clases = `duration-100 rounded-md disabled:opacity-50 disabled:cursor-not-allowed ${varients[variant]} ${sizes[size] ? sizes[size] : \" px-4 py-2 text-base \"} ${className}`\n\n    return (\n        <button\n            className={clases}\n            {...rest}\n        >\n            {children}\n        </button>\n    )\n}\n"},
          {text: "import React, { useState, useEffect, useRef } from 'react';\n\n/**\n * A simple and interactive calendar component with date range selection.\n *\n * The Calendar component allows users to navigate between months and select dates.\n * It provides a visual representation of a calendar month with day names, dates, and\n * highlights for the current day, selected date, and date range.\n *\n * @param {object} props - The component's props.\n * @param {Date} [props.initialDate] - The initial date to display in the calendar. Defaults to the current date.\n * @param {Date} [props.toDate] - The start date of the allowed date range. If not provided, there's no start limit.\n * @param {Date} [props.fromDate] - The end date of the allowed date range. If not provided, there's no end limit.\n * @param {string} [props.placeholder=\"Select date\"] - The placeholder text for the input box.\n * @param {Array<string>} [props.theme=['blue', 'gray']] - An array of two Tailwind CSS color names for theming: [primary, secondary].\n * @param {function(Date)} [props.onChange] - A callback function that is triggered when the selected date changes. The selected date is passed as an argument.\n * \n * @returns {JSX.Element} The rendered Calendar component.\n * \n * @example\n * <Calendar \n *   initialDate={new Date(2024, 0, 1)} \n *   toDate={new Date(2024, 2, 15)} \n *   fromDate={new Date(2024, 3, 30)} \n *   placeholder=\"Choose a date\"\n *   theme={['red', 'gray']}\n *   onChange={(date) => console.log(\"Selected date:\", date)} \n * />\n */\nconst Calendar = ({ className, initialDate, toDate, fromDate,position, placeholder = \"Select date\", onChange, theme }) => {\n    const [currentDate, setCurrentDate] = useState(initialDate || new Date());\n    const [selectedDate, setSelectedDate] = useState(null);\n    const [isOpen, setIsOpen] = useState(false);\n    const calendarRef = useRef(null);\n\n    const daysInWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const monthNames = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n\n    // Default theme: blue, gray\n    const defaultTheme = ['blue', 'green'];\n    const [primary, secondary] = theme || defaultTheme;\n\n    const getDaysInMonth = (month, year) => {\n        const date = new Date(year, month, 1);\n        const days = [];\n        while (date.getMonth() === month) {\n            days.push(new Date(date));\n            date.setDate(date.getDate() + 1);\n        }\n        return days;\n    };\n\n    const goToPreviousMonth = () => {\n        const newMonth = currentDate.getMonth() - 1;\n        const newYear = currentDate.getFullYear();\n\n        // Check if the new month is within the allowed range\n        const newDate = new Date(newYear, newMonth);\n        if (isValidMonth(newDate)) {\n            setCurrentDate(newDate);\n        }\n    };\n\n    const goToNextMonth = () => {\n        const newMonth = currentDate.getMonth() + 1;\n        const newYear = currentDate.getFullYear();\n\n        // Check if the new month is within the allowed range\n        const newDate = new Date(newYear, newMonth);\n        if (isValidMonth(newDate)) {\n            setCurrentDate(newDate);\n        }\n    };\n\n    const goToToday = () => {\n        const today = new Date();\n        setCurrentDate(today);\n        setSelectedDate(today);\n        if (onChange) {\n            onChange(today);\n        }\n    };\n\n    const handleDateClick = (day) => {\n        // Check if the date is within the allowed range (if provided)\n        const isInAllowedRange =\n            (!toDate && !fromDate) ||\n            (toDate && !fromDate && day <= toDate) ||\n            (!toDate && fromDate && day >= fromDate) ||\n            (toDate && fromDate && day >= toDate && day <= fromDate);\n\n\n        // Only update the selected date if it's within the allowed range\n        if (isInAllowedRange) {\n            setSelectedDate(day);\n            if (onChange) {\n                onChange(day);\n            }\n            setIsOpen(false);\n        }\n    };\n\n    const handleYearChange = (event) => {\n        const newYear = parseInt(event.target.value, 10);\n        const newDate = new Date(newYear, currentDate.getMonth());\n\n        // Check if the new year is within the allowed range\n        if (isValidMonth(newDate)) {\n            setCurrentDate(newDate);\n        }\n    };\n\n    const handleMonthChange = (event) => {\n        const newMonth = parseInt(event.target.value, 10);\n        const newDate = new Date(currentDate.getFullYear(), newMonth);\n\n        // Check if the new month is within the allowed range\n        if (isValidMonth(newDate)) {\n            setCurrentDate(newDate);\n        }\n    };\n\n    const handleClickOutside = (event) => {\n        if (calendarRef.current && !calendarRef.current.contains(event.target)) {\n            setIsOpen(false);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n\n    const renderHeader = () => {\n        return (\n            <div className=\"flex justify-between items-center p-2 gap-2 \">\n                <button onClick={goToPreviousMonth} className=\"hover:text-blue-500\">\n                    {\"<\"}\n                </button>\n                <div className=\"flex gap-2\">\n                    <select\n                        value={currentDate.getMonth()}\n                        onChange={handleMonthChange}\n                        className={` text-gray-700 border rounded-md px-2 py-1 border-${secondary} focus:outline-none focus:ring-1 focus:ring-${primary}-500 focus:ring-opacity-50`}\n                    >\n                        {monthNames.map((month, index) => (\n                            <option key={index} value={index}>\n                                {month}\n                            </option>\n                        ))}\n                    </select>\n                    <select\n                        value={currentDate.getFullYear()}\n                        onChange={handleYearChange}\n                        className={` text-gray-700 border rounded-md px-2 py-1 border-${secondary} focus:outline-none focus:ring-1 focus:ring-${primary}-500 focus:ring-opacity-50`}\n                    >\n                        {Array.from({ length: 10 }, (_, i) => currentDate.getFullYear() - 5 + i).map((year) => (\n                            <option key={year} value={year}>\n                                {year}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n                <button onClick={goToNextMonth} className=\"hover:text-blue-500\">\n                    {\">\"}\n                </button>\n            </div>\n        );\n    };\n\n    const renderDays = () => {\n        const days = getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear());\n        const firstDayIndex = days[0].getDay();\n        const lastDayIndex = days[days.length - 1].getDay();\n\n        // Calculate leading days\n        const prevMonthLastDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);\n        const prevDays = [];\n        for (let i = 0; i < firstDayIndex; i++) {\n            prevDays.unshift(new Date(\n                prevMonthLastDate.getFullYear(), prevMonthLastDate.getMonth(), prevMonthLastDate.getDate() - i));\n        }\n\n        const nextDays = [];\n        for (let i = 1; i <= 6 - lastDayIndex; i++) {\n            nextDays.push(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, i));\n        }\n\n        return [\n            ...prevDays.map((day) => ({ day, isPlaceholder: true })),\n            ...days.map((day) => ({ day, isPlaceholder: false })),\n            ...nextDays.map((day) => ({ day, isPlaceholder: true }))\n        ].map(({ day, isPlaceholder }, index) => {\n            const isToday = day.toDateString() === new Date().toDateString();\n            const isSelected = day.toDateString() === selectedDate?.toDateString();\n\n            const isInAllowedRange =\n                (!toDate && !fromDate) ||\n                (toDate && !fromDate && day <= toDate) ||\n                (!toDate && fromDate && day >= fromDate) ||\n                (toDate && fromDate && day >= toDate && day <= fromDate);\n\n            const isDisabled = isPlaceholder || !isInAllowedRange;\n\n\n            return (\n                <button\n                    key={index}\n                    onClick={() => !isDisabled && handleDateClick(day)}\n                    disabled={isDisabled} // Disable the button if needed\n                    className={`\n                        text-center rounded-full border-0 w-9 flex items-center justify-center h-9 p-2 relative transition duration-200 ease-in-out cursor-pointer\n                        ${isPlaceholder ? ` text-gray-300 border-transparent` : ` `} \n                        ${isSelected ? ` bg-${primary}-500 text-white border-${primary}-500` : ''} \n                        ${isToday ? `  border-2 border-${primary}-500` : ''} \n                        ${isToday && !isSelected ? ` text-${primary} border-${primary}-200` : ''}  \n                        ${!isPlaceholder && !isDisabled && `text-gray-700 duration-200 hover:border-2  `}  \n                        ${isDisabled ? `cursor-default text-gray-300` : ''} `}\n                >\n                    {day.getDate()}\n                </button>\n            );\n        });\n    };\n\n    // Helper function to check if a month is within the allowed range\n    const isValidMonth = (date) => {\n        if (toDate && fromDate) {\n            const startMonth = toDate.getMonth();\n            const startYear = toDate.getFullYear();\n            const endMonth = fromDate.getMonth();\n            const endYear = fromDate.getFullYear();\n\n            const currentMonth = date.getMonth();\n            const currentYear = date.getFullYear();\n\n            // Check if the current month and year are within the allowed range\n            return (\n                (currentYear > startYear || (currentYear === startYear && currentMonth >= startMonth)) &&\n                (currentYear < endYear || (currentYear === endYear && currentMonth <= endMonth))\n            );\n        }\n        return true; // No range restrictions, so any month is valid\n    };\n\n\n    return (\n        <div className=\"relative inline-block text-left w-full mt-1\" ref={calendarRef}>\n            <input\n                type=\"text\"\n                className={` placeholder:text-gray-400 rounded-md px-3 bg-gray-900 focus:border-white py-2 w-full text-gray-300 focus:outline-none 900 border border-gray-500 shadow-sm sm:text-sm focus:border disabled:bg-gray-900/90 disabled:cursor-not-allowed ${className} `}\n                placeholder={placeholder}\n                value={selectedDate ? selectedDate.toLocaleDateString() : ''}\n                readOnly\n                onClick={() => setIsOpen(!isOpen)}\n            />\n\n            {isOpen && (\n                <div className={`absolute z-10 mt-2 ${position} border border-${secondary}-300  rounded-md shadow-md bg-white`}>\n                    <div className=\"flex items-center justify-between text-center border-b border-${secondary} p-1\">\n                        <button onClick={goToToday} className={`text-sm text-${primary}-500 hover:underline px-2`}>\n                            Today\n                        </button>\n                        {renderHeader()}\n                    </div>\n                    <div className=\"grid grid-cols-7 gap-1 px-2 pt-2\">\n                        {daysInWeek.map((day) => (\n                            <div key={day} className=\"text-center py-2 font-medium text-gray-700\">\n                                {day}\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"grid grid-cols-7 gap-1 px-2 pb-2\">{renderDays()}</div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Calendar;"},
          {text: "'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\n\n/**\n * @typedef {Object} CarouselProps\n * @property {React.ReactNode[]} children - The slides to display in the carousel.\n * @property {boolean} [autoplay=false] - Whether the carousel should automatically advance slides.\n * @property {number} [interval=5000] - The time in milliseconds between automatic slide transitions (if `autoplay` is true).\n * @property {string} [className] - Additional CSS class names to apply to the carousel container.\n * A responsive carousel component.\n *\n * @param {CarouselProps} props - The properties for the carousel component.\n * @returns {JSX.Element} The rendered carousel component.\n */\n\nconst Carousel = ({ children, autoplay = false, interval = 5000, className }) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const carouselRef = useRef(null); // Not used in this simplified version\n\n  const goToSlide = (index) => {\n    setCurrentIndex((index + children.length) % children.length);\n  };\n\n  useEffect(() => {\n    let autoplayInterval;\n    if (autoplay) {\n      autoplayInterval = setInterval(() => goToSlide(currentIndex + 1), interval);\n    }\n    return () => clearInterval(autoplayInterval);\n  }, [currentIndex, autoplay, interval]);\n\n  return (\n    <div className={`relative ${className}`}>\n      <div className=\"overflow-hidden rounded-md \">\n        <div\n          className=\"flex transition-transform duration-500 ease-in-out \"\n          style={{ transform: `translateX(-${currentIndex * 100}%)` }}\n        >\n          {children.map((child, index) => (\n            <div key={index} className=\"flex-shrink-0 w-full\" style={{ minWidth: '100%' }}>\n              {/* Pass through children without applying default styles */}\n              {child} \n            </div>\n          ))}\n        </div>\n      </div>\n\n      <CarouselButton onClick={() => goToSlide(currentIndex - 1)} direction=\"left\" />\n      <CarouselButton onClick={() => goToSlide(currentIndex + 1)} direction=\"right\" />\n\n      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2 \">\n        {children.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => goToSlide(index)}\n            className={`w-3 h-3 rounded-full ${\n              currentIndex === index ? 'bg-blue-500' : 'bg-gray-400'\n            }`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n\n/**\n * A single slide within the carousel.\n * \n * The `CarouselItem` component represents a single slide in the carousel. It should wrap the content of each slide.\n * \n * @param {Object} props - The properties for the carousel item component.\n * @param {React.ReactNode} props.children - The content of the carousel item.\n * @returns {JSX.Element} The rendered carousel item component.\n */\nexport const CarouselItem = ({ children }) => {\n  return <>{children}</>;\n};\n\n/**\n * Reusable button component for previous/next navigation.\n * \n * @param {Object} props - The properties for the button component.\n * @param {Function} props.onClick - The function to call when the button is clicked.\n * @param {\"left\" | \"right\"} props.direction - The direction of the arrow.\n * @returns {JSX.Element} The rendered button component.\n */\nconst CarouselButton = ({ onClick, direction }) => {\n  const arrowPath = direction === \"left\" ? \"M15 19l-7-7 7-7\" : \"M9 5l7 7-7 7\";\n  const translateXClass = direction === \"left\" ? \"translate-x-1/3\" : \"-translate-x-1/3\";\n\n  return (\n    <button\n      onClick={onClick}\n      className={`absolute border border-gray-500 rounded-full p-1.5 ${\n        direction === \"left\" ? \"right-full\" : \"left-full\"\n      } top-1/2 -translate-y-1/2 ${translateXClass}`}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"h-6 w-6 text-gray-200\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n      >\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d={arrowPath} />\n      </svg>\n    </button>\n  );\n};\n\nexport default Carousel;"},
          {text: "\"use client\";\n\nimport React, { useState } from 'react';\n\n/**\n * A customizable checkbox component with various variants and sizes.\n * \n * @component\n * @param {Object} props - The component's props.\n * @param {boolean} [props.checked=false] - Whether the checkbox is checked by default.\n * @param {function} [props.onChange] - A callback function triggered when the checkbox's checked state changes. \n *   Receives the new checked state as a boolean argument.\n * @param {string} [props.id] - The ID for the checkbox element.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the checkbox container.\n * @param {'default'|'outline'|'secondary'|'danger'|'warning'|'info'} [props.variant='default'] - The visual variant of the checkbox.\n * @param {'xs'|'sm'|'md'|'lg'|'xl'} [props.size='md'] - The size of the checkbox.\n * @param {Object} [props....rest] - Any other props are spread to the underlying `<div>` container.\n * \n * @example\n * // Basic usage\n * <Checkbox id=\"agreement\" onChange={(checked) => console.log('Agreement checked:', checked)} />\n * <label htmlFor=\"agreement\">Agree to terms</label>\n * \n * @example\n * // With different variant and size\n * <Checkbox variant=\"danger\" size=\"lg\" id=\"important\" checked />\n * <label htmlFor=\"important\">Important option</label>\n */\nconst Checkbox = ({\n    checked = false,\n    onChange,\n    id,\n    className,\n    variant = 'default',\n    size = 'md',\n    ...rest\n}) => {\n    const [isChecked, setIsChecked] = useState(checked);\n\n    const handleClick = () => {\n        setIsChecked(!isChecked);\n        onChange && onChange(!isChecked);\n    };\n\n    const variants = {\n        default: {\n            unchecked: 'focus:ring-blue-500',\n            checked: 'bg-blue-600 border-transparent focus:ring-blue-500 text-white'\n        },\n        outline: {\n            unchecked: 'focus:ring-gray-400',\n            checked: 'bg-gray-800 border-gray-500 focus:ring-gray-400 text-white'\n        },\n        secondary: {\n            unchecked: 'focus:ring-gray-600',\n            checked: 'bg-gray-600 border-transparent focus:ring-gray-600 text-white'\n        },\n        danger: {\n            unchecked: 'focus:ring-red-500',\n            checked: 'bg-red-600 border-transparent focus:ring-red-500 text-white'\n        },\n        warning: {\n            unchecked: 'focus:ring-yellow-400',\n            checked: 'bg-yellow-400 border-transparent focus:ring-yellow-400 text-black'\n        },\n        info: {\n            unchecked: 'focus:ring-blue-400',\n            checked: 'bg-blue-400 border-transparent focus:ring-blue-400 text-white'\n        },\n    };\n    const sizes = {\n        xs: 'w-3 h-3',\n        sm: 'w-4 h-4',\n        md: 'w-5 h-5',\n        lg: 'w-6 h-6',\n        xl: 'w-8 h-8',\n    };\n    const svgsizes = {\n        xs: 'w-2 h-2',\n        sm: 'w-3 h-3 ',\n        md: 'w-4 h-4 ',\n        lg: 'w-5 h-5 ',\n        xl: 'w-6 h-6 ',\n    };\n\n\n\n    const currentVariant = variants[variant] || variants.default;\n\n    return (\n        <div className={`flex items-center ${className} `} {...rest}>\n            <button\n                onClick={handleClick}\n                className={` rounded-[4px] mr-2 border ${currentVariant[isChecked ? 'checked' : 'unchecked']} ${sizes[size]} flex items-center justify-center transition duration-200 ease-in-out`}\n                aria-checked={isChecked}\n                role=\"checkbox\"\n                id={id}\n            >\n                {isChecked && (\n                    <svg\n                        className={`flex items-center justify-center w-3 h-3 ${svgsizes[size]} `}\n                        viewBox=\"0 0 12 10\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                    >\n                        <path d=\"M1 4l4 4L11 1\" />\n                    </svg>\n                )}\n            </button>\n        </div>\n    );\n};\n\nexport default Checkbox;\n"},
          {text: "import React, { useState } from 'react';\n\n/**\n * A command palette component for searching and executing actions.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The command groups and items to display.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the command palette.\n * @param {function} [props.onSearch] - A callback function triggered when the search term changes.\n *   Receives the current search term as an argument.\n * @param {string} [props.searchablebaricon='🔍'] - The icon to display in the search bar.\n *\n * @example\n * // Basic usage with search and command groups\n * <Command onSearch={handleSearch}>\n *   <CommandGroup title=\"Actions\">\n *     <CommandItem onClick={() => console.log('Edit clicked!')}>\n *       <CommandItemIcon>✏️</CommandItemIcon>\n *       <CommandItemText>Edit</CommandItemText>\n *     </CommandItem>\n *   </CommandGroup>\n * </Command>\n */\nconst Command = ({ children, className, onSearch, searchablebaricon = \"🔍\" }) => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [filteredChildren, setFilteredChildren] = useState(children); // State for filtered children\n\n    const handleChange = (event) => {\n        setSearchTerm(event.target.value);\n        onSearch && onSearch(event.target.value);\n\n        //   Update the filtered children based on the new search term\n        const newFilteredChildren = React.Children.toArray(children).filter((child) => {\n            const textToSearch = child.props.title ||\n                (child.props.children && React.Children.toArray(child.props.children)\n                    .map(c => c.props.children)\n                    .join(' '));\n\n            return textToSearch && textToSearch.toLowerCase().includes(searchTerm.toLowerCase());\n        });\n\n        setFilteredChildren(newFilteredChildren); // Update state to trigger re-rendering\n    };\n\n    return (\n        <div className={`border border-gray-500 rounded-md ${className || ''}`}>\n            <div className=\"flex w-full gap-1 items-center justify-center p-1\">\n                <div className=\"w-10 text-center\">{searchablebaricon}</div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    className=\"flex-grow px-2 py-1 bg-transparent\"\n                    value={searchTerm}\n                    onChange={handleChange}\n                />\n            </div>\n            {filteredChildren} {/* Render the filtered children */}\n        </div>\n    );\n};\n\n\n\n/**\n * A group of related commands within the command palette.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The command items to display within the group.\n * @param {string} [props.title] - The title for the command group.\n */\nconst CommandGroup = ({ children, title }) => (\n    <div>\n        <hr className=\"w-full border-gray-500 mb-1\" />\n        {title && <h3 className=\"text-sm ml-2 w-fit opacity-70 font-semibold\">{title}</h3>}\n        <div className=\"pt-1 pb-2 px-2\">\n            {children}\n        </div>\n    </div>\n);\n\n/**\n * An individual command item within a command group.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The content of the command item (icon, text, suggestion).\n * @param {function} [props.onClick] - A callback function triggered when the command item is clicked.\n * @param {boolean} [props.isActive=false] - Whether the command item is currently active (e.g., matches the search term).\n */\nconst CommandItem = ({ children, onClick, isActive = false }) => (\n    <div\n        className={`p-1 rounded-md hover:bg-gray-800/90 flex gap-1 items-center ${isActive ? 'bg-gray-800/50' : ''\n            }`}\n            \n        onClick={onClick}\n    >\n        {children}\n    </div>\n);\n\n/**\n * An icon within a command item.\n *\n * @component\n * @param {React.ReactNode} props.children - The icon to display.\n */\nconst CommandItemIcon = ({ children }) => (\n    <div className=\"w-7 text-center\">{children}</div>\n);\n\n/**\n * The main text label for a command item.\n *\n * @component\n * @param {React.ReactNode} props.children - The text label to display.\n */\nconst CommandItemText = ({ children }) => <span>{children}</span>;\n\n/**\n * Suggestion text for a command item (e.g., keyboard shortcut).\n *\n * @component\n * @param {React.ReactNode} props.children - The suggestion text to display.\n */\nconst CommandItemSuggestionText = ({ children }) => (\n    <span className=\"text-gray-400 ml-auto mr-1\">{children}</span>\n);\n\nexport {\n    Command,\n    CommandGroup,\n    CommandItem,\n    CommandItemIcon,\n    CommandItemText,\n    CommandItemSuggestionText,\n};\n"},
          {text: "import React from 'react'\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the Datatable.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the Datatable.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <Datatable>\n *  <TableBody>\n *   <TableRow>\n *      <TableCell>cell 1</TableCell>\n *   </TableRow>\n *  </TableBody>\n * </Datatable>\n */\nexport default function Datatable({ children, className, ...rest }) {\n  return (\n    <table className={`bg-gray-900 rounded-md border border-gray-500 ${className}`} {...rest} >\n      {children}\n    </table>\n  )\n}\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the TableHead.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the TableHead.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <TableHead>\n *   <TableRow>\n *      <TableHeadingCell>heading cell 1</TableHeadingCell>\n *   </TableRow>\n *  </TableHead>\n */\nexport function TableHead({ children, className, ...rest }) {\n  return (\n    <thead className={` ${className}`} {...rest}>{children}</thead>\n  )\n}\n\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the TableBody.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the TableBody.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <TableBody>\n *   <TableRow>\n *      <TableCell>cell 1</TableCell>\n *   </TableRow>\n *  </TableBody>\n */\nexport function TableBody({ children, className, ...rest }) {\n  return (\n    <tbody className={`m-2 border-t border-t-orange-700 space-x-1 ${className}`} {...rest}>\n      {children}\n    </tbody>\n  )\n}\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the TableRow.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the TableRow.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <TableRow>\n *      <TableCell>cell 1</TableCell>\n * </TableRow>\n */\nexport function TableRow({ children, className, ...rest }) {\n  return (\n    <tr className={` px-2 border-b border-gray-500 ${className}`} {...rest}>{children}</tr>\n  )\n}\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the TableCell.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the TableCell.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <TableCell>cell 1</TableCell>\n */\nexport function TableCell({ children, className, ...rest }) {\n  return (\n    <td className={`rounded-md  px-2 py-1 ${className}`}  {...rest}>{children}</td>\n  )\n}\n\n/**\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the TableHeadingCell.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the TableHeadingCell.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <TableHeadingCell>heading cell 1</TableHeadingCell>\n */\nexport function TableHeadingCell({ children, className , ...rest}) {\n  return (\n    <th className={` p-2 ${className}`} {...rest}>{children}</th>\n  )\n} \n"},
          {text: "import React, { useEffect, useRef, useState } from 'react';\n\n/**\n * A container component that displays a context menu on right-click.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the container.\n * @param {function} [props.rightclick] - A callback function triggered when the container is right-clicked.\n * @param {React.ReactNode} props.children - The content of the container. \n *   This should be two children: the main content and the context menu content.\n *\n * @example\n * // Basic usage with a simple menu\n * <DilogContener rightclick={() => console.log('Menu clicked!')}>\n *   <span>Right-click me</span>\n *   <DilogMenuContent>\n *     <DilogMenuList>Option 1</DilogMenuList>\n *     <DilogMenuList>Option 2</DilogMenuList>\n *   </DilogMenuContent>\n * </DilogContener>\n */\nexport default function DilogContener({ className, rightclick, children }) {\n    const [DilogIsOpen, setdilogisopen] = useState(false);\n    const [dilogPosition, setDilogPosition] = useState({ x: 0, y: 0 });\n    const menuRef = useRef(null);\n\n    const handleRightClick = (e) => {\n        e.preventDefault();\n        rightclick && rightclick();\n        setdilogisopen(true);\n        const rect = e.target.getBoundingClientRect();\n\n        setDilogPosition({\n            x: e.clientX - rect.left,\n            y: e.clientY - rect.top\n        });\n    };\n\n    const handleClickOutside = (event) => {\n        if (menuRef.current && !menuRef.current.contains(event.target)) {\n            setdilogisopen(false);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n\n    return (\n        <div\n            onContextMenu={handleRightClick}\n            className={`relative ${className}`}\n        >\n            {children[0]}\n            {DilogIsOpen && (\n                <div\n                    ref={menuRef}\n                    style={{ top: `${dilogPosition.y}px`, left: `${dilogPosition.x}px` }}\n                    className=\"absolute transform z-10 \"\n                >\n                    {children[1]}\n                </div>\n            )}\n        </div>\n    );\n}\n\n/**\n * A component to wrap the content of the context menu.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The content of the menu.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the menu content.\n */\nexport const DilogMenuContent = ({ children, className }) => {\n    return (\n        <div className={`rounded-md border border-gray-500 bg-gray-900 ${className} `}>\n            {children}\n        </div>\n    );\n};\n\n/**\n * A component to group menu items within the context menu.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The menu items to group.\n * @param {string} [props.title] - The title for the group.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the group.\n */\nexport const DilogMenuGroup = ({ children, title, className }) => {\n    return (\n        <div className={`w-full p-2 flex flex-col gap-1 mb-1 ${className}`}>\n            <div className='flex items-center gap-1'>\n                <span className='text-gray-500 my-2'>\n                    {title}\n                </span>\n                <hr className='flex-grow border-t border-gray-500' />\n            </div>\n            {children}\n        </div>\n    );\n};\n\n/**\n * A component for individual menu items within the context menu.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The content of the menu item.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the menu item.\n */\nexport const DilogMenuList = ({ children, className }) => {\n    return (\n        <div className={`hover:bg-gray-800 w-full px-1 py-0.5 rounded-sm flex justify-between ${className}`}>\n            {children}\n        </div>\n    );\n};\n\n/**\n * A component to wrap the main content within the DilogContener.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {React.ReactNode} props.children - The main content to display.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the content.\n */\nexport const DilogContent = ({ children, className }) => {\n    return (\n        <div className={`w-full h-full ${className}`}>\n            {children}\n        </div>\n    );\n};\n"},
          {text: "\"use client\";\n\nimport React, { useState } from 'react';\n\n\n\n/**\n * @typedef {Object} DropdownProps\n * @property {string} [className] - Additional CSS class names to apply to the dropdown container.\n * @property {React.ReactNode} children - The dropdown items to be displayed.\n * @property {string|number} [value] - The currently selected value (for single selection).\n * @property {function} [onChange] - A callback function that is triggered when the selected value changes.\n * @property {string} [placeholder] - The placeholder text to display when no value is selected.\n * @property {boolean} [multiple] - Whether to allow multiple selections. Defaults to false.\n * A customizable dropdown component for selecting single or multiple values.\n * @param {DropdownProps} props - The properties for the dropdown component.\n * @returns {JSX.Element} The rendered dropdown component.\n */\nexport default function Dropdown({ className, children, value, onChange, placeholder = \"Select an option\", multiple = false }) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [search, setSearch] = useState(\"\");\n    const [multipleSelection, setMultipleSelection] = useState([]); // Corrected typo\n\n    // Use the provided 'onChange' function to update the parent component's state\n    const handleChange = (newValue) => {\n        if (onChange && multiple) {\n            if (!multipleSelection.includes(newValue)) {\n                setMultipleSelection([...multipleSelection, newValue]);\n                onChange([...multipleSelection, newValue]);\n            } else {\n                // Remove the element if it exists in the array\n                setMultipleSelection(multipleSelection.filter(item => item !== newValue));\n                onChange(multipleSelection.filter(item => item !== newValue));\n            }\n        } else if (onChange) {\n            onChange(newValue);\n            setIsOpen(false); // Close dropdown after single selection\n        }\n    };\n\n    const filteredChildren = (React.Children.count(children) > 5) ? children.filter(child => {\n        const content = child.props.value || child.props.children;\n        return content.toLowerCase().includes(search.toLowerCase());\n        // Simplified filtering logic\n    }) : children;\n\n    return (\n        <div className={` bg-gray-900 relative mt-1 ${className}`}>\n            <div\n                onClick={() => setIsOpen(!isOpen)}\n                className=\" cursor-pointer p-2 border rounded-md relative w-full flex items-center justify-between\">\n                {/* Display selected value(s) or placeholder */}\n                <div className='flex items-center gap-1 flex-wrap'>\n                    {multiple && multipleSelection.length > 0 ? (\n                        (multipleSelection.map((item, index) => (\n                            <span key={index} className='px-2 py-1 bg-slate-500/90 text-sm rounded-md'>{item}</span>\n                        )))\n                    ) : value ? (\n                        <span>{value}</span>\n                    ) : (\n                        <span className=\"text-gray-500\">{placeholder}</span>\n                    )}\n                </div>\n                <svg\n                    className={`w-5 h-5 transition-transform transform ${isOpen ? 'rotate-180' : '' }`}\n                    viewBox=\"0 0 20 20\"\n                    fill=\"currentColor\"\n                >\n                    <path\n                        fillRule=\"evenodd\"\n                        d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n                        clipRule=\"evenodd\" />\n                </svg>\n            </div>\n            {isOpen && (\n                <div className=\"absolute top-full z-10 border rounded-md overflow-hidden shadow-md mt-3 w-full\">\n                    <ul className=\"py-1 flex flex-col gap-1 bg-gray-900\">\n                        {(React.Children.count(children) > 5) && (\n                            <div className=\"px-2 py-1 \">\n                                <input\n                                    type=\"text\"\n                                    className=\"border bg-black rounded-md px-1 py-1 w-full\"\n                                    value={search}\n                                    onChange={(e) => setSearch(e.target.value)}\n                                    placeholder=\"Search...\"\n                                />\n                            </div>\n                        )}\n\n                        {/* Render filtered children */}\n                        {filteredChildren.map((child, index) => (\n                            <li\n                                key={index}\n                                onClick={() => handleChange(child.props.value || child.props.children)}\n                                className={`px-2 py-2 cursor-pointer hover:bg-gray-800/90 ${multipleSelection.includes(child.props.value || child.props.children) ? \"bg-gray-800/90\" : \" \"}`}\n                            >\n                                {child}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n}\n\n\n/**\n * @typedef {Object} DropdownItemProps\n * @property {React.ReactNode} children - The content of the dropdown item.\n * @property {string|number} [value] - The value associated with the dropdown item.\n * @param {DropdownItemProps} props - The properties for the dropdown item.\n * @returns {JSX.Element} The rendered dropdown item.\n */\nexport const DropdownItem = ({ children, value }) => {\n    return (\n        <div value={value || children}>{children}</div>\n    );\n};\n"},
          {text: "import React, { useState } from 'react';\n\n/**\n * A versatile input component for collecting user input.\n *\n * @component\n * @param {Object} props - The component's props.\n * @param {string} [props.id] - The ID for the input element.\n * @param {string} [props.error] - An error message to display below the input.\n * @param {string} [props.type='text'] - The type of input (e.g., 'text', 'email', 'password').\n * @param {string} [props.className=''] - Additional CSS classes to apply to the input.\n * @param {string} [props.value] - The current value of the input.\n * @param {string} [props.placeholder] - Placeholder text for the input.\n * @param {boolean} [props.disabled=false] - Whether the input is disabled.\n * @param {function} [props.onChange] - A function to call when the input value changes.\n * @param {Object} [props....rest] - Any other props are spread to the underlying `<input>` element.\n *\n * @example\n * // Basic usage\n * <Input placeholder=\"Enter your name\" />\n *\n * @example\n * // With label and error message\n * <Input \n *     id=\"name\" \n *     label=\"Name\" \n *     error=\"Please enter a valid name\" \n *     value={name} \n *     onChange={(e) => setName(e.target.value)} \n * />\n */\nconst Input = ({ id, error, type = 'text', className, value, placeholder, disabled = false, onChange, ...rest }) => {\n\n    const handleChange = (e) => {\n        onChange && onChange(e);\n    };\n\n    return (\n        <>\n            <input\n                {...rest}\n                id={id}\n                value={value}\n                type={type}\n                onChange={handleChange}\n                placeholder={placeholder}\n                className={`mt-1 p-2 block w-full rounded-md placeholder:text-gray-400 bg-gray-900 border  border-gray-500 shadow-sm sm:text-sm focus:border  disabled:bg-gray-900/90 disabled:cursor-not-allowed ${error ? 'border-red-500' : ''}  ${className}`}\n                disabled={disabled}\n            />\n            {error && <p className=\"mt-2 text-sm text-red-600\">{error}</p>}\n        </>\n    );\n};\n\nexport default Input;\n"},
          {text: "import React from 'react'\n\n/**\n * A simple label component for form elements.\n * \n * @component\n * @param {Object} props - The component's props.\n * @param {string} props.htmlFor - The ID of the form element the label is associated with.\n * @param {React.ReactNode} props.children - The content of the label.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the label.\n * @param {Object} [props....rest] - Any other props are spread to the underlying `<label>` element.\n * \n * @example\n * // Basic usage\n * <Label htmlFor=\"name\">Name:</Label>\n * <input type=\"text\" id=\"name\" />\n */\nexport default function Label({ htmlFor, children, className, ...rest }) {\n    return (\n        <label\n            htmlFor={htmlFor} \n            className={`block text-sm text-gray-400 ${className}`}\n            {...rest}\n        >\n            {children}\n        </label>\n    )\n}\n"},
          {text: "import ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nexport default function MdView({ children }) {\n\n    return (\n        <div className=\"p-1 pb-0 min-h-min w-full overflow-auto moderscroller whitespace-none\">\n            <ReactMarkdown remarkPlugins={[remarkGfm]} className=\"markdown-container\">\n                {children}\n            </ReactMarkdown>\n        </div>\n    )\n}"},
          {text: "\n\nconst ProgressBar = ({ progress, className }) => {\n    return (\n        <div className=\"w-full max-w-lg mx-auto\">\n            <div className=\"flex justify-between mb-2\">\n                <span className=\"text-sm font-medium\">{progress}%</span>\n            </div>\n            <div className={`relative w-full bg-gray-200 rounded h-4 ${className}`}\n            >\n                <div\n                    className=\"absolute h-full bg-blue-600 rounded\"\n                    style={{ width: `${progress}%` }}\n                >\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProgressBar;\n"},
          {text: "'use client';\nimport React, { useState, useRef } from 'react';\n\nconst ResizablePanelGroup = ({ direction = 'horizontal', children }) => {\n    const isHorizontal = direction === 'horizontal';\n    return (\n        <div className={`flex ${isHorizontal ? 'flex-row' : 'flex-col'} h-full w-full`} >\n            {children}\n        </div>\n    );\n};\n\nconst ResizablePanel = ({ defaultSize = 300, direction = 'horizontal', children }) => {\n    const [size, setSize] = useState(defaultSize);\n    const panelRef = useRef(null);\n    const isHorizontal = direction === 'horizontal';\n\n    const handleMouseMove = (e) => {\n        e.preventDefault();  \n\n        const boundingRect = panelRef.current.getBoundingClientRect();\n\n        if (isHorizontal) {\n            const newWidth = e.clientX - boundingRect.left;\n            setSize(newWidth);\n        } else {\n            const newHeight = e.clientY - boundingRect.top;\n            setSize(newHeight);\n        }\n    };\n\n    const handleMouseUp = () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    const handleMouseDown = (e) => {\n        e.preventDefault(); // Prevent text selection when dragging the resize handle\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n    };\n\n    return (\n        <div\n            ref={panelRef}\n            className=\"relative flex-grow\"\n            style={{\n                width: isHorizontal ? `${size}px` : '100%',\n                height: isHorizontal ? '100%' : `${size}px`,\n            }}\n        >\n            <div className=\"h-full w-full overflow-auto\">{children}</div>\n            {/* Resizing handle */}\n            <div\n                className={`absolute ${isHorizontal ? 'right-0 top-0 h-full' : 'bottom-0 left-0 w-full'\n                    } bg-gray-500 cursor-${isHorizontal ? 'ew-resize' : 'ns-resize'}`}\n                style={{\n                    width: isHorizontal ? '5px' : '100%',\n                    height: isHorizontal ? '100%' : '5px',\n                    cursor: isHorizontal ? 'col-resize' : 'row-resize' // Add this line\n                }}\n                onMouseDown={handleMouseDown}\n            />\n        </div>\n    );\n};\n\nexport { ResizablePanelGroup, ResizablePanel };\n"},
          {text: "import React, { useState } from 'react';\n\n/**\n * @typedef {Object} ScrollPosition\n * @property {number} top - The vertical scroll position.\n * @property {number} left - The horizontal scroll position.\n */\n\n/**\n * A React component that provides a scrollable area for its children.\n * \n * @component\n * @param {Object} props\n * @param {React.ReactNode} props.children - The content to be displayed within the scrollable area.\n * @param {string} [props.className=''] - Additional CSS classes to apply to the scrollable area.\n * @param {'horizontal'|'vertical'|'both'} [props.orientation='horizontal'] - The scrolling orientation. \n *   - `horizontal`: Allows horizontal scrolling.\n *   - `vertical`: Allows vertical scrolling.\n *   - `both`: Allows both horizontal and vertical scrolling.\n * @param {function(ScrollPosition)} [props.onScroll] - A callback function that is triggered when the scroll position changes. \n *   The callback receives an object containing the current `top` and `left` scroll positions.\n * \n * @example\n * // Basic usage with horizontal scrolling\n * <ScrollArea>\n *   <div style={{ width: '2000px' }}>Long content here...</div>\n * </ScrollArea>\n * \n * @example\n * // Vertical scrolling with custom height\n * <ScrollArea className=\"h-64\" orientation=\"vertical\">\n *   <div style={{ height: '1000px' }}>Tall content here...</div>\n * </ScrollArea>\n */\n\nfunction ScrollArea({ children, className = '', orientation = 'horizontal', onScroll }) {\n    const [scrollPosition, setScrollPosition] = useState({ top: 0, left: 0 });\n\n    const handleScroll = (event) => {\n        const { scrollTop, scrollLeft } = event.target;\n\n        setScrollPosition({\n            top: scrollTop,\n            left: scrollLeft\n        });\n\n        // Call the onScroll prop if provided\n        if (onScroll) {\n            onScroll({\n                top: scrollTop,\n                left: scrollLeft\n            });\n        }\n    };\n\n    // Class to handle different scrolling orientations\n    const orientationClasses = {\n        horizontal: 'overflow-x-scroll',\n        vertical: 'overflow-y-scroll',\n        both: 'overflow-scroll'\n    };\n\n    const scrollClass = orientationClasses[orientation] || 'overflow-x-scroll';\n\n    return (\n        <>\n            <style>\n                {`\n                /* Custom Scrollbar Styles */\n                .custom-scrollbar::-webkit-scrollbar {\n                    width: 12px;\n                    height: 12px;\n                }\n\n                .custom-scrollbar::-webkit-scrollbar-track {\n                    background-color: #e0e0e0;\n                    border-radius: 10px;\n                }\n\n                .custom-scrollbar::-webkit-scrollbar-thumb {\n                    background-color: #888;\n                    border-radius: 10px;\n                    border: 2px solid #f4f4f4;\n                }\n\n                .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n                    background-color: #555;\n                }\n\n                .custom-scrollbar {\n                    scrollbar-width: thin;\n                    scrollbar-color: #888 #e0e0e0;\n                }\n                `}\n            </style>\n            <div\n                className={`custom-scrollbar ${scrollClass} ${className}`}\n                onScroll={handleScroll}\n            >\n                {children}\n            </div>\n        </>\n    );\n}\n\nexport default ScrollArea;\n"},
          {text: "\"use client\";\nimport { useState } from 'react';\n\n/**\n * @component Tooltip - A versatile tooltip component for providing contextual information.\n *\n * @param {React.ReactNode} children - The element that triggers the tooltip.\n * @param {string} text - The text content to display within the tooltip.\n * @param {React.ReactNode} [icon] - An optional icon to display alongside the tooltip text.\n * @param {('top'|'bottom'|'left'|'right')} [position='top'] - The position of the tooltip relative to the trigger element.\n * @param {('xs'|'sm'|'md'|'lg')} [size='md'] - The size of the tooltip, affecting its padding and font size.\n * @param {string} [className] - Additional CSS classes to apply to the tooltip element.\n *\n * @example\n * <Tooltip text=\"This is a tooltip\" position=\"right\">\n *   <button>Hover me</button>\n * </Tooltip>\n *\n * @returns {JSX.Element} The rendered Tooltip component.\n */\nexport default function Tooltip({ children, text, icon, position = 'top', size = 'md', className }) {\n    const [showTooltip, setShowTooltip] = useState(false);\n\n    const tooltipClasses = {\n        top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n        bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n        left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n        right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',\n    };\n\n    const sizeClasses = {\n        xs: 'text-xs p-2',\n        sm: 'text-sm px-2 py-1',\n        md: 'text-base px-2.5 py-1.5 ',\n        lg: 'text-lg px-3 py-2 ',\n    };\n\n    return (\n        <div className=\"relative inline-block\"\n            onMouseEnter={() => setShowTooltip(true)}\n            onMouseLeave={() => setShowTooltip(false)}>\n\n            {children}\n\n            {showTooltip && (\n                <div className={`absolute z-10 bg-gray-800 text-white rounded-md  text-base px-2.5 py-1.5  shadow-lg ${tooltipClasses[position]} ${sizeClasses[size]} ${className}`}\n                    role=\"tooltip\">\n                    <div className=\"flex items-center\">\n                        {icon && <div className=\"mr-2\">{icon}</div>}\n                        <span>{text}</span>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n"},
          {text: "'use client'\nimport { useState, useEffect } from 'react';\nimport Alert from '@/Component/Alert';\nimport Button from '@/Component/Button';\nimport Tooltip from '@/Component/Tooltip';\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '@/Component/Accordion'; // Import all the necessary components\nimport Badge from '@/Component/Badge';\nimport { Breadcrumb, BreadcrumbDropdown, BreadcrumbEllipsis, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from '@/Component/Breadcrumb';\nimport Calendar from '@/Component/Calendar';\nimport Carousel, { CarouselItem } from '@/Component/Carousel';\nimport Checkbox from '@/Component/Checkbox';\nimport Dropdown, { DropdownItem, DropdownSearch } from '@/Component/Dropdown';\nimport { Command, CommandGroup, CommandItem, CommandItemIcon, CommandItemSuggestionText, CommandItemText } from '@/Component/Command';\nimport DilogContener, { DilogContent, DilogMenuContent, DilogMenuGroup, DilogMenuList } from '@/Component/Dilog';\nimport Input from '@/Component/Input';\nimport Label from '@/Component/Label';\nimport Datatable, { TableBody, TableCell, TableRow, TableHead, TableHeadingCell } from '@/Component/Datatable';\nimport ScrollArea from '@/Component/ScrollArea';\nimport { ResizablePanel, ResizablePanelGroup } from '@/Component/Resizable';\nimport ProgressBar from '@/Component/Progress';\n\n\n\nconst sampleTableData = [\n    { id: 1, productName: \"Laptop\", category: \"Electronics\", price: 999.99, stock: 15, available: true, rating: 4.5 },\n    { id: 2, productName: \"Coffee Beans\", category: \"Grocery\", price: 12.99, stock: 50, available: true, rating: 4.8 },\n    { id: 3, productName: \"T-Shirt\", category: \"Clothing\", price: 19.99, stock: 8, available: false, rating: 3.9 },\n    { id: 4, productName: \"Keyboard\", category: \"Electronics\", price: 79.99, stock: 25, available: true, rating: 4.2 },\n    { id: 5, productName: \"Mouse\", category: \"Electronics\", price: 29.99, stock: 30, available: true, rating: 4.0 },\n    { id: 6, productName: \"Monitor\", category: \"Electronics\", price: 249.99, stock: 10, available: true, rating: 4.6 },\n    { id: 7, productName: \"Headphones\", category: \"Electronics\", price: 149.99, stock: 18, available: false, rating: 4.7 },\n    { id: 8, productName: \"Milk\", category: \"Grocery\", price: 3.99, stock: 60, available: true, rating: 4.1 },\n    { id: 9, productName: \"Bread\", category: \"Grocery\", price: 2.49, stock: 40, available: true, rating: 4.3 },\n    { id: 10, productName: \"Eggs\", category: \"Grocery\", price: 5.99, stock: 35, available: true, rating: 4.9 },\n    { id: 11, productName: \"Jeans\", category: \"Clothing\", price: 49.99, stock: 12, available: true, rating: 4.0 },\n    { id: 12, productName: \"Dress\", category: \"Clothing\", price: 39.99, stock: 5, available: false, rating: 3.7 },\n    { id: 13, productName: \"Sneakers\", category: \"Clothing\", price: 89.99, stock: 20, available: true, rating: 4.6 },\n    { id: 14, productName: \"Backpack\", category: \"Accessories\", price: 59.99, stock: 16, available: true, rating: 4.4 },\n    { id: 15, productName: \"Wallet\", category: \"Accessories\", price: 24.99, stock: 28, available: true, rating: 4.2 },\n    { id: 16, productName: \"Sunglasses\", category: \"Accessories\", price: 79.99, stock: 8, available: false, rating: 3.8 },\n    { id: 17, productName: \"Book\", category: \"Books\", price: 14.99, stock: 32, available: true, rating: 4.5 },\n    { id: 18, productName: \"Notebook\", category: \"Stationery\", price: 4.99, stock: 45, available: true, rating: 4.3 },\n    { id: 19, productName: \"Pen\", category: \"Stationery\", price: 1.99, stock: 70, available: true, rating: 4.1 },\n    { id: 20, productName: \"Pencil\", category: \"Stationery\", price: 0.99, stock: 80, available: true, rating: 4.0 },\n    { id: 21, productName: \"Camera\", category: \"Electronics\", price: 599.99, stock: 6, available: true, rating: 4.8 },\n    { id: 22, productName: \"Lens\", category: \"Electronics\", price: 299.99, stock: 4, available: false, rating: 4.9 },\n    { id: 23, productName: \"Tripod\", category: \"Electronics\", price: 49.99, stock: 11, available: true, rating: 4.3 },\n    { id: 24, productName: \"Phone Case\", category: \"Accessories\", price: 19.99, stock: 23, available: true, rating: 4.2 },\n    { id: 25, productName: \"Screen Protector\", category: \"Accessories\", price: 9.99, stock: 38, available: true, rating: 4.7 }\n];\n\n\n\nexport default function Home() {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [showAlert, setShowAlert] = useState(false);\n    const [selectedDate, setSelectedDate] = useState(null);\n    const [value, setvalue] = useState(\"asdf\")\n    const [DropdownValue, setDropdownValue] = useState(\"\")\n    const [showSimpleAlert, setShowSimpleAlert] = useState(false);\n\n    const [buttonConfig, setbuttonConfig] = useState({\n        variant: \"outline\",\n        size: \"md\",\n        className: \"\",\n        disabled: false,\n    })\n\n    const [TooltipConfig, setTooltipConfig] = useState({\n        text: \"This tooltip appears on the left.\",\n        position: \"left\",\n        size: \"xs\",\n        className: \"\",\n    })\n\n    const [alertConfig, setAlertConfig] = useState({\n        variant: \"info\",\n        size: \"md\",\n        position: \"top-right\",\n        duration: 5000,\n        text: \"This is an alert!\",\n        showAlert: false,\n        showConfirm: false,\n    });\n\n    const [CheckBoxConfig, setCheckBoxConfig] = useState({\n        checked: false,\n        className: \"\",\n        variant: 'default',\n        size: 'md',\n    })\n\n\n    const [badgeConfig, setBadgeConfig] = useState({\n        variant: 'default',\n        variantStyle: 'default',\n        size: 'md',\n        className: '',\n        content: 'new',\n    })\n\n    const [dropdownConfig, setDropdownConfig] = useState({\n        searchable: false,\n        placeholder: 'Select an option',\n        multiple: false,\n        className: ' w-52',\n        value: '', // For single select\n        values: [], // For multiple select\n    });\n\n    const handleDropdownChange = (newValue) => {\n        if (dropdownConfig.multiple) {\n            setDropdownConfig({ ...dropdownConfig, values: newValue });\n        } else {\n            setDropdownConfig({ ...dropdownConfig, value: newValue });\n        }\n    };\n\n    const handleSearch = (term) => {\n        setSearchTerm(term);\n    };\n\n    const [inputConfig, setInputConfig] = useState({\n        className: 'w-44',\n        placeholder: 'Enter text here',\n        type: 'text',\n        value: '',\n    });\n\n    const handleInputChange = (e) => {\n        setInputConfig({ ...inputConfig, value: e.target.value });\n    };\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n        console.log('Selected date:', date);\n    };\n\n    return (\n        <div className=\" overflow-hidden grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]\">\n            <h1 className=\"text-3xl font-bold text-center mb-20\">My UI Library</h1>\n            <main className=\" flex flex-col gap-8 space-y-4 max-w-4xl\">\n                {/* Buttons Section */}\n                <section className=\"space-y-4 w-full\" id='section1'>\n                    <h2 className=\"text-xl font-semibold\">Buttons</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className=' w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Input className='  ' type='text' placeholder='classes'\n                                    value={buttonConfig.className}\n                                    onChange={(e) => { setbuttonConfig({ ...buttonConfig, className: e.target.value }) }} />\n                                <Dropdown searchablebar className=\"mt-2  w-72\"\n                                    value={buttonConfig.variant}\n                                    onChange={(value) => { setbuttonConfig({ ...buttonConfig, variant: value }) }}\n                                >\n                                    <DropdownItem value=\"default\">default</DropdownItem>\n                                    <DropdownItem value=\"outline\">Outline</DropdownItem>\n                                    <DropdownItem value=\"primary\">Primary</DropdownItem>\n                                    <DropdownItem value=\"secondary\">Secondary</DropdownItem>\n                                    <DropdownItem value=\"danger\">Danger</DropdownItem>\n                                    <DropdownItem value=\"success\">Success</DropdownItem>\n                                    <DropdownItem value=\"warning\">Warning</DropdownItem>\n                                    <DropdownItem value=\"info\">Info</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown searchablebar className=\" mt-2 w-72\"\n                                    value={buttonConfig.size}\n                                    onChange={(value) => { setbuttonConfig({ ...buttonConfig, size: value }) }}\n                                >\n                                    <DropdownItem value=\"xs\">Extra Small</DropdownItem>\n                                    <DropdownItem value=\"sm\">Small</DropdownItem>\n                                    <DropdownItem value=\"md\">Medium</DropdownItem>\n                                    <DropdownItem value=\"lg\">Large</DropdownItem>\n                                    <DropdownItem value=\"xl\">Extra Large</DropdownItem>\n\n                                </Dropdown>\n                                <div className='flex justify-start mt-2 '>\n                                    <Checkbox\n                                        checked={buttonConfig.disabled}\n                                        onChange={(checked) => { setbuttonConfig({ ...buttonConfig, disabled: checked }) }}\n                                        id={\"lable1\"} />\n                                    <Label htmlFor={\"lable1\"}>Default</Label>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=' w-1/2 flex items-center justify-center '>\n                            <Button\n                                className={buttonConfig.className}\n                                variant={buttonConfig.variant}\n                                size={buttonConfig.size}\n                                disabled={buttonConfig.disabled}\n                            >\n                                Default\n                            </Button>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Tooltips Section */}\n                <section className=\"space-y-4 w-full\" id='section2'>\n                    <h2 className=\"text-xl font-semibold\">Tooltips</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className=' w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Input className='  ' type='text' placeholder='classes'\n                                    value={TooltipConfig.className}\n                                    onChange={(e) => { setTooltipConfig({ ...TooltipConfig, className: e.target.value }) }} />\n                                <Dropdown searchablebar className=\"mt-2 w-72\"\n                                    value={TooltipConfig.position}\n                                    onChange={(value) => { setTooltipConfig({ ...TooltipConfig, position: value }) }}\n                                >\n                                    <DropdownItem value=\"left\">Left</DropdownItem>\n                                    <DropdownItem value=\"right\">Right</DropdownItem>\n                                    <DropdownItem value=\"top\">Top</DropdownItem>\n                                    <DropdownItem value=\"bottom\">Bottom</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown searchablebar className=\" mt-2 w-72\"\n                                    value={TooltipConfig.size}\n                                    onChange={(value) => { setTooltipConfig({ ...TooltipConfig, size: value }) }}\n                                >\n                                    <DropdownItem value=\"xs\">Extra Small</DropdownItem>\n                                    <DropdownItem value=\"sm\">Small</DropdownItem>\n                                    <DropdownItem value=\"md\">Medium</DropdownItem>\n                                    <DropdownItem value=\"lg\">Large</DropdownItem>\n                                    <DropdownItem value=\"xl\">Extra Large</DropdownItem>\n\n                                </Dropdown>\n                                <Input className='  mt-2' type='text' placeholder='text'\n                                    value={TooltipConfig.text}\n                                    onChange={(e) => { setTooltipConfig({ ...TooltipConfig, text: e.target.value }) }} />\n                            </div>\n                        </div>\n                        <div className=' w-1/2 flex items-center justify-center '>\n                            <Tooltip className={TooltipConfig.className} text={TooltipConfig.text} position={TooltipConfig.position} size={TooltipConfig.size}>\n                                <Button>Hover Me</Button>\n                            </Tooltip>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Alerts Section */}\n                <section className=\"space-y-4 w-full\" id='section3'>\n                    <h2 className=\"text-xl font-semibold\">Alerts</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className=' w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Dropdown searchablebar className=\"mt-2  w-72\"\n                                    value={alertConfig.variant}\n                                    onChange={(value) => { setAlertConfig({ ...alertConfig, variant: value }) }}\n                                >\n                                    <DropdownItem value=\"default\">Default</DropdownItem>\n                                    <DropdownItem value=\"error\">Error</DropdownItem>\n                                    <DropdownItem value=\"success\">Success</DropdownItem>\n                                    <DropdownItem value=\"warning\">Warning</DropdownItem>\n                                    <DropdownItem value=\"info\">Info</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown searchablebar className=\" mt-2 w-72\"\n                                    value={alertConfig.size}\n                                    onChange={(value) => { setAlertConfig({ ...alertConfig, size: value }) }}\n                                >\n                                    <DropdownItem value=\"xs\">Extra Small</DropdownItem>\n                                    <DropdownItem value=\"sm\">Small</DropdownItem>\n                                    <DropdownItem value=\"md\">Medium</DropdownItem>\n                                    <DropdownItem value=\"lg\">Large</DropdownItem>\n                                    <DropdownItem value=\"xl\">Extra Large</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown searchablebar className=\"mt-2 w-72\"\n                                    value={alertConfig.position}\n                                    onChange={(value) => { setAlertConfig({ ...alertConfig, position: value }) }}\n                                >\n                                    <DropdownItem value=\"top-left\">Top Left</DropdownItem>\n                                    <DropdownItem value=\"top-center\">Top Center</DropdownItem>\n                                    <DropdownItem value=\"top-right\">Top Right</DropdownItem>\n                                    <DropdownItem value=\"bottom-left\">Bottom Left</DropdownItem>\n                                    <DropdownItem value=\"bottom-center\">Bottom Center</DropdownItem>\n                                    <DropdownItem value=\"bottom-right\">Bottom Right</DropdownItem>\n                                </Dropdown>\n\n                                <Input className='  mt-2' type='text' placeholder='Alert Text'\n                                    value={alertConfig.text}\n                                    onChange={(e) => { setAlertConfig({ ...alertConfig, text: e.target.value }) }} />\n                            </div>\n                        </div>\n                        <div className=' w-1/2 flex flex-col items-center justify-center gap-4'>\n                            {alertConfig.showAlert && (\n                                <Alert\n                                    variant={alertConfig.variant}\n                                    size={alertConfig.size}\n                                    position={alertConfig.position}\n                                    duration={alertConfig.duration}\n                                    onClose={() => setAlertConfig({ ...alertConfig, showAlert: false })}\n                                >\n                                    {alertConfig.text}\n                                </Alert>\n                            )}\n                            <Button onClick={() => setAlertConfig({ ...alertConfig, showAlert: true })}>Show Alert</Button>\n\n                            {alertConfig.showConfirm && (\n                                <Alert\n                                    variant=\"warning\"\n                                    size={alertConfig.size}\n                                    onConfirm={() => {\n                                        console.log('Confirmed!');\n                                        setAlertConfig({ ...alertConfig, showConfirm: false });\n                                    }}\n                                    onClose={() => setAlertConfig({ ...alertConfig, showConfirm: false })}\n                                >\n                                    Are you sure you want to delete this?\n                                </Alert>\n                            )}\n                            <Button onClick={() => setAlertConfig({ ...alertConfig, showConfirm: true })}>Show Confirmation</Button>\n                        </div>\n                    </div>\n                </section>\n\n\n                {/* Accordion Section */}\n                <section className=\"space-y-4  w-full\" id='section4'>\n                    <h2 className=\"text-xl font-semibold\">Accordion</h2>\n                    <div className='h-52 flex items-center justify-center w-full'>\n                        <Accordion >\n                            <AccordionItem value=\"item-1\">\n                                <AccordionTrigger>Is it accessible?</AccordionTrigger>\n                                <AccordionContent>\n                                    Yes. It adheres to the WAI-ARIA design pattern\n                                </AccordionContent>\n                            </AccordionItem>\n                            <AccordionItem value=\"item-2\">\n                                <AccordionTrigger>Is it accessible?</AccordionTrigger>\n                                <AccordionContent>\n                                    <Tooltip text=\"This tooltip appears on the right.\" position=\"right\" size='xs' className='w-52'>\n                                        <Button>Hover Me</Button>\n                                    </Tooltip>\n                                </AccordionContent>\n                            </AccordionItem>\n                        </Accordion>\n                    </div>\n                </section>\n\n                {/* Badge Examples */}\n                <section className=\"space-y-4 w-full\" id='section5'>\n                    <h2 className=\"text-xl font-semibold\">Badges</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className=' w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Input\n                                    className=''\n                                    type='text'\n                                    placeholder='classes'\n                                    value={badgeConfig.className}\n                                    onChange={(e) => setBadgeConfig({ ...badgeConfig, className: e.target.value })}\n                                />\n                                <Dropdown\n                                    searchablebar\n                                    className=\"mt-2  w-72\"\n                                    value={badgeConfig.variant}\n                                    onChange={(value) => setBadgeConfig({ ...badgeConfig, variant: value })}\n                                >\n                                    <DropdownItem value=\"default\">Default</DropdownItem>\n                                    <DropdownItem value=\"error\">Error</DropdownItem>\n                                    <DropdownItem value=\"success\">Success</DropdownItem>\n                                    <DropdownItem value=\"warning\">Warning</DropdownItem>\n                                    <DropdownItem value=\"info\">Info</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown\n                                    searchablebar\n                                    className=\"mt-2 w-72\"\n                                    value={badgeConfig.variantStyle}\n                                    onChange={(value) => setBadgeConfig({ ...badgeConfig, variantStyle: value })}\n                                >\n                                    <DropdownItem value=\"default\">default</DropdownItem>\n                                    <DropdownItem value=\"solid\">Solid</DropdownItem>\n                                    <DropdownItem value=\"outline\">Outline</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown\n                                    searchablebar\n                                    className=\" mt-2 w-72\"\n                                    value={badgeConfig.size}\n                                    onChange={(value) => setBadgeConfig({ ...badgeConfig, size: value })}\n                                >\n                                    <DropdownItem value=\"xs\">Extra Small</DropdownItem>\n                                    <DropdownItem value=\"sm\">Small</DropdownItem>\n                                    <DropdownItem value=\"md\">Medium</DropdownItem>\n                                    <DropdownItem value=\"lg\">Large</DropdownItem>\n                                    <DropdownItem value=\"xl\">Extra Large</DropdownItem>\n                                </Dropdown>\n\n                                <Input\n                                    className='mt-2'\n                                    type='text'\n                                    placeholder='Badge Content'\n                                    value={badgeConfig.content}\n                                    onChange={(e) => setBadgeConfig({ ...badgeConfig, content: e.target.value })}\n                                />\n                            </div>\n                        </div>\n                        <div className='w-1/2 flex items-center justify-center '>\n                            <Badge\n                                variant={badgeConfig.variant}\n                                variantStyle={badgeConfig.variantStyle}\n                                size={badgeConfig.size}\n                                className={badgeConfig.className}\n                            >\n                                <span>{badgeConfig.content}</span>\n                            </Badge>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Breadcrumb */}\n                <section className=\"space-y-4 w-full\" id='section6'>\n                    <h2 className=\"text-xl font-semibold\">Breadcrumb</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n\n                        <Breadcrumb className=\"my-4\">\n                            <BreadcrumbItem>\n                                <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n                            </BreadcrumbItem>\n                            <BreadcrumbSeparator />\n                            <BreadcrumbItem>\n                                <BreadcrumbLink href=\"/category\">Category</BreadcrumbLink>\n                            </BreadcrumbItem>\n                            <BreadcrumbSeparator />\n                            <BreadcrumbDropdown>\n                                <BreadcrumbItem>\n                                    <BreadcrumbLink href=\"#section1\">Section 1</BreadcrumbLink>\n                                </BreadcrumbItem>\n                                <BreadcrumbItem>\n                                    <BreadcrumbLink href=\"#section2\">Section 2</BreadcrumbLink>\n                                </BreadcrumbItem>\n                                <BreadcrumbItem>\n                                    <BreadcrumbLink href=\"#section3\">Section 3</BreadcrumbLink>\n                                </BreadcrumbItem>\n                            </BreadcrumbDropdown>\n                            <BreadcrumbSeparator />\n                            <BreadcrumbItem>\n                                <BreadcrumbLink active={true} href=\"/category\">Category</BreadcrumbLink>\n                            </BreadcrumbItem>\n                        </Breadcrumb>\n                    </div>\n                </section>\n\n                {/* Calendar */}\n                <section className=\"space-y-4 w-full\" id='section7'>\n                    <h2 className=\"text-xl font-semibold\">Calendar</h2>\n\n                    <div className=' flex gap-5 justify-center items-center w-full'>\n                        {/* Basic usage with initial date and placeholder */}\n                        <Calendar\n                            initialDate={new Date()}\n                            placeholder=\"Select your birthday\"\n                            onChange={handleDateChange}\n                        />\n\n                        {/* Example with date range (toDate must be before fromDate) */}\n                        <Calendar\n                            toDate={new Date('2024-01-01')}\n                            fromDate={new Date('2024-01-15')}\n                            initialDate={new Date('2024-01-15')}\n                            onChange={handleDateChange}\n                        />\n\n                        {/* Example with custom theme */}\n                        <Calendar\n                            theme={['pink', 'green', 'gray']}\n                            fromDate={new Date('2024-01-15')}\n                            initialDate={new Date('2024-01-15')}\n                            onChange={handleDateChange}\n                        />\n                        <Calendar\n                            theme={['pink', 'green', 'gray']}\n                            toDate={new Date('2024-01-15')}\n                            initialDate={new Date('2024-01-15')}\n                            onChange={handleDateChange}\n                        />\n                    </div>\n                </section>\n\n                {/* Carousel */}\n                <section className=\"space-y-4 w-full\" id='section8'>\n                    <h2 className=\"text-xl font-semibold\">Carousel</h2>\n                    <div className=\"relative w-96 h-[300px] mx-auto\"> {/* Adjust width and height as needed */}\n                        <Carousel autoplay interval={2500} orientation='vertical'>\n                            <CarouselItem className=\" border \">\n                                <img\n                                    src=\"https://placehold.co/600x400/black/white?text=1\"\n                                    alt=\"Slide 1\"\n                                    className=\"w-full h-full object-cover\"\n                                />\n                            </CarouselItem>\n                            <CarouselItem>\n                                <img\n                                    src=\"https://placehold.co/600x400/black/white?text=2\"\n                                    alt=\"Slide 2\"\n                                    className=\"w-full h-full object-cover\"\n                                />\n                            </CarouselItem>\n                            <CarouselItem>\n                                <div className=\"w-full h-full bg-black flex flex-col items-center justify-center\">\n                                    <h3 className=\"text-3xl text-white font-bold\">Custom Content</h3>\n                                    roles watch\n                                </div>\n                            </CarouselItem>\n                        </Carousel>\n                    </div>\n                </section>\n\n                {/* Checkbox */}\n                <section id='section9' className=\"space-y-4 w-full\" >\n                    <h2 className=\"text-xl font-semibold\">Check box </h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className=' w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Dropdown searchablebar className=\"mt-2  w-72\"\n                                    value={CheckBoxConfig.variant}\n                                    onChange={(value) => { setCheckBoxConfig({ ...CheckBoxConfig, variant: value }) }}\n                                >\n                                    <DropdownItem value=\"default\">Default</DropdownItem>\n                                    <DropdownItem value=\"error\">Error</DropdownItem>\n                                    <DropdownItem value=\"success\">Success</DropdownItem>\n                                    <DropdownItem value=\"warning\">Warning</DropdownItem>\n                                    <DropdownItem value=\"info\">Info</DropdownItem>\n                                </Dropdown>\n\n                                <Dropdown searchablebar className=\" mt-2 w-72\"\n                                    value={CheckBoxConfig.size}\n                                    onChange={(value) => { setCheckBoxConfig({ ...CheckBoxConfig, size: value }) }}\n                                >\n                                    <DropdownItem value=\"xs\">Extra Small</DropdownItem>\n                                    <DropdownItem value=\"sm\">Small</DropdownItem>\n                                    <DropdownItem value=\"md\">Medium</DropdownItem>\n                                    <DropdownItem value=\"lg\">Large</DropdownItem>\n                                    <DropdownItem value=\"xl\">Extra Large</DropdownItem>\n\n                                </Dropdown>\n                                <Input className='  mt-2' type='text' placeholder='classes'\n                                    value={CheckBoxConfig.className}\n                                    onChange={(e) => { setCheckBoxConfig({ ...CheckBoxConfig, className: e.target.value }) }} />\n                            </div>\n                        </div>\n                        <div className=' w-1/2 flex items-center justify-center '>\n                            <Checkbox\n                                checked={CheckBoxConfig.checked}\n                                onChange={(checked) => { setCheckBoxConfig({ ...CheckBoxConfig, checked: checked }) }}\n                                id={\"lable1\"}\n                                variant={CheckBoxConfig.variant}\n                                size={CheckBoxConfig.size}\n                                className={CheckBoxConfig.className}\n                            />\n                            <Label htmlFor={\"lable1\"}>Default</Label>\n\n                        </div>\n                    </div>\n                    {/* <div className='flex' >\n                            <Checkbox variant=\"danger\" size=\"lg\" id=\"Large (Danger)\" />\n                            <Label htmlFor={\"Large\"}>Large (Danger)</Label>\n                        </div>\n                    </div> */}\n                </section>\n\n                {/* Dropdown */}\n                <section id='section10' className='space-y-6 w-full'>\n                    <h2 className=\"text-xl font-semibold\">Dropdown</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className='w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <div className='flex justify-start mt-2 '>\n                                    <Checkbox\n                                        checked={dropdownConfig.searchable}\n                                        onChange={(checked) => setDropdownConfig({ ...dropdownConfig, searchable: checked })}\n                                        id={\"dropdownSearchable\"}\n                                    />\n                                    <Label htmlFor={\"dropdownSearchable\"}>Searchable</Label>\n                                </div>\n                                <div className='flex justify-start mt-2 '>\n                                    <Checkbox\n                                        checked={dropdownConfig.multiple}\n                                        onChange={(checked) => setDropdownConfig({ ...dropdownConfig, multiple: checked })}\n                                        id={\"dropdownMultiple\"}\n                                    />\n                                    <Label htmlFor={\"dropdownMultiple\"}>Multiple</Label>\n                                </div>\n                                <Input\n                                    className='mt-2'\n                                    type='text'\n                                    placeholder='Placeholder'\n                                    value={dropdownConfig.placeholder}\n                                    onChange={(e) => setDropdownConfig({ ...dropdownConfig, placeholder: e.target.value })}\n                                />\n                                <Input\n                                    className='mt-2'\n                                    type='text'\n                                    placeholder='Classes'\n                                    value={dropdownConfig.className}\n                                    onChange={(e) => setDropdownConfig({ ...dropdownConfig, className: e.target.value })}\n                                />\n                            </div>\n                        </div>\n                        <div className='w-1/2 flex items-center justify-center '>\n                            <Dropdown\n                                searchablebar={dropdownConfig.searchable}\n                                className={dropdownConfig.className}\n                                placeholder={dropdownConfig.placeholder}\n                                multiple={dropdownConfig.multiple}\n                                value={dropdownConfig.multiple ? dropdownConfig.values : dropdownConfig.value}\n                                onChange={handleDropdownChange}\n                            >\n                                <DropdownItem>Option 1</DropdownItem>\n                                <DropdownItem>Choice 2</DropdownItem>\n                                <DropdownItem>Selection 3</DropdownItem>\n                            </Dropdown>\n                        </div>\n                    </div>\n                </section>\n\n\n                {/* Cammondbox */}\n                <section className=\"space-y-4 w-full\" id='section11'>\n                    <h2 className=\"text-xl font-semibold\">Command Box</h2>\n                    <div className=' flex gap-5 justify-center items-center w-full text-white' >\n                        <Command onSearch={handleSearch} searchablebaricon=\"🔍\">\n                            <CommandGroup title=\"Actions\">\n                                <CommandItem onClick={() => console.log('Edit clicked!')} isActive={searchTerm === 'Edit'}>\n                                    <CommandItemIcon>✏️</CommandItemIcon>\n                                    <CommandItemText>Edit</CommandItemText>\n                                    <CommandItemSuggestionText>Ctrl+E</CommandItemSuggestionText>\n                                </CommandItem>\n\n                                <CommandItem onClick={() => console.log('Delete clicked!')}>\n                                    <CommandItemIcon>🗑️</CommandItemIcon>\n                                    <CommandItemText>Delete</CommandItemText>\n                                </CommandItem>\n\n                                {/* More Command Items can be added here */}\n                            </CommandGroup>\n\n                            <CommandGroup title=\"Settings\">\n                                <CommandItem>\n                                    <CommandItemIcon>⚙️</CommandItemIcon>\n                                    <CommandItemText>General</CommandItemText>\n                                </CommandItem>\n                                <CommandItem>\n                                    <CommandItemIcon>🎨</CommandItemIcon>\n                                    <CommandItemText>Appearance</CommandItemText>\n                                </CommandItem>\n                            </CommandGroup>\n                        </Command>\n                    </div>\n                </section>\n\n                {/* dilog */}\n                <section className=\"space-y-4 w-full\" id='section12'>\n                    <h2 className=\"text-xl font-semibold\">Dilog box</h2>\n                    <div className=' flex gap-5 justify-center items-center w-full text-white' >\n                        <DilogContener rightclick={() => console.log('Menu 1 clicked!')} className={\"border-gray-500 border w-1/2 p-2\"}>\n                            <span>Right-click me for Menu 1</span>\n                            <DilogMenuContent className=\" border-gray-500 border  \">\n                                <DilogMenuList > <div>Option 1</div></DilogMenuList>\n                                <DilogMenuList > <div>Option 2</div></DilogMenuList>\n                            </DilogMenuContent>\n                        </DilogContener>\n\n                        <DilogContener rightclick={() => console.log(' Menu 2 clicked!')} className={\"border-gray-500 border w-1/2 p-2\"}>\n                            <DilogContent>\n                                <span>Right-click me for Menu 2</span>\n                                hehehehe\n                            </DilogContent>\n\n                            <DilogMenuContent className=\" w-96  \" >\n                                <DilogMenuGroup title=\"hello\">\n                                    <DilogMenuList >Item A</DilogMenuList>\n                                    <DilogMenuList>Item B</DilogMenuList>\n                                    <DilogMenuList >Item A</DilogMenuList>\n                                    <DilogMenuList>Item B</DilogMenuList>\n                                </DilogMenuGroup>\n                                <DilogMenuGroup>\n\n                                    <DilogMenuList >Item A</DilogMenuList>\n                                    <DilogMenuList>Item B</DilogMenuList>\n                                </DilogMenuGroup>\n                            </DilogMenuContent>\n                        </DilogContener>\n                    </div>\n                </section>\n\n                {/* Input */}\n                    <section className=\"space-y-4 w-full\" id='section13'>\n                    <h2 className=\"text-xl font-semibold\">Input</h2>\n                    <div className=\"flex flex-wrap rounded-md border border-gray-500 p-5 max-w-xl mx-auto \">\n                        <div className='w-1/2'>\n                            <div className='w-72 mx-auto '>\n                                <Input\n                                    className='mt-2'\n                                    type='text'\n                                    placeholder='Classes'\n                                    value={inputConfig.className}\n                                    onChange={(e) => setInputConfig({ ...inputConfig, className: e.target.value })}\n                                />\n                                <Input\n                                    className='mt-2'\n                                    type='text'\n                                    placeholder='Placeholder'\n                                    value={inputConfig.placeholder}\n                                    onChange={(e) => setInputConfig({ ...inputConfig, placeholder: e.target.value })}\n                                />\n                                <Dropdown searchablebar className=\"mt-2  w-72\"\n                                    value={inputConfig.type}\n                                    onChange={(value) => { setInputConfig({ ...inputConfig, type: value }) }}\n                                >\n                                    <DropdownItem value=\"text\">Text</DropdownItem>\n                                    <DropdownItem value=\"email\">Email</DropdownItem>\n                                    <DropdownItem value=\"password\">Password</DropdownItem>\n                                 </Dropdown>\n                            </div>\n                        </div>\n                        <div className='w-1/2 flex items-center justify-center '>\n                            <Input\n                                className={inputConfig.className}\n                                placeholder={inputConfig.placeholder}\n                                type={inputConfig.type}\n                                value={inputConfig.value}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                    </div>\n                </section>\n\n                {/* Datatable */}\n                <section className=\"space-y-4 w-full\" id='section15'>\n                    <h2 className=\"text-xl font-semibold\">Datatable</h2>\n                    <div className='flex flex-col justify-start w-full'>\n                        <ScrollArea className={\"w-1/2 mx-auto h-96 overflow-scroll\"} orientation='horizontal'>\n                            <Datatable className=\"w-fit\">\n                                <TableHead>\n                                    <TableRow >\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"} >\n                                            ID\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"} >\n                                            Name\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"} >\n                                            Category\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"} >\n                                            Stock\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"  hover:bg-slate-800 w-52 text-center\"} >\n                                            Avilability\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"}>\n                                            Price\n                                        </TableHeadingCell>\n                                        <TableHeadingCell className={\"hover:bg-slate-800 w-96\"}>\n                                            Rating\n                                        </TableHeadingCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody className=\"w-fit\">\n                                    {\n                                        sampleTableData.map((row) => {\n                                            return (\n                                                <TableRow key={row.id}>\n                                                    <TableCell className={\"hover:bg-slate-800 w-96\"}>\n                                                        {row.id}\n                                                    </TableCell>\n                                                    <TableCell className={\"hover:bg-slate-800 w-96\"}>\n                                                        {row.productName}\n                                                    </TableCell>\n                                                    <TableCell className={\"hover:bg-slate-800 w-96\"}>\n                                                        {row.category}\n                                                    </TableCell>\n                                                    <TableCell className={\"hover:bg-slate-800 w-96\"}>\n                                                        {row.stock}\n                                                    </TableCell>\n                                                    <TableCell className={\"  hover:bg-slate-800 w-52 text-center\"}>\n                                                        {row.available ? \"yes\" : \"oh no\"}\n                                                    </TableCell>\n                                                    <TableCell className={\"hover:bg-slate-800\"}>\n                                                        {row.price}\n                                                    </TableCell>\n                                                    <TableCell className={\"hover:bg-slate-800\"}>\n                                                        {row.rating}\n                                                    </TableCell>\n                                                </TableRow>\n                                            )\n                                        })\n                                    }\n                                </TableBody>\n                            </Datatable>\n                        </ScrollArea>\n                    </div>\n                </section>\n\n                {/* scroll Area */}\n                <section className=\"space-y-4 w-full\" id='section16'>\n                    <h2 className=\"text-xl font-semibold\">Datatable</h2>\n                    <div className='flex flex-col justify-start w-full'>\n                        <ScrollArea className={\"w-[50vw] h-[50vh] mx-auto overflow-scroll\"} orientation=''>\n                            <div\n                                className='w-screen h-screen'\n                                style={{\n                                    backgroundImage: `linear-gradient(to right, rgba(255, 255, 255, 0.5) 1px, transparent 1px), \n                          linear-gradient(to bottom, rgba(255, 255, 255, 0.5) 1px, transparent 1px)`,\n                                    backgroundSize: '40px 40px', // Adjust grid size here\n                                    backgroundColor: '#000000', // Optional: set a background color\n                                }}\n                            >\n                                {/* You can place other components or content here */}\n                            </div>\n\n                        </ScrollArea>\n                    </div>\n                </section >\n\n                {/* Resizable */}\n                <section className=\"space-y-4 w-full\" id='section17'>\n                    <h2 className=\"text-xl font-semibold\">Resizable</h2>\n                    <div className='flex flex-col justify-start w-1/2 mx-auto min-w-64 min-h-80 '>\n\n                        <ResizablePanelGroup direction=\"horizontal\">\n                            <ResizablePanel defaultSize={300}>\n                                <div className=\"p-4 h-full\">\n                                    <h1 className=\"text-2xl\">Panel 1</h1>\n                                    <p>This is the first panel of the outer group.</p>\n                                </div>\n                            </ResizablePanel>\n\n                            <ResizablePanel defaultSize={500}>\n\n                                <ResizablePanelGroup direction=\"vertical\">\n                                    <ResizablePanel defaultSize={100} direction='vertical'>\n                                        <div className=\"p-4 h-full\">\n                                            <h1 className=\"text-xl\">Nested Panel 1</h1>\n                                            <p>This is the first panel in the nested group.</p>\n                                        </div>\n                                    </ResizablePanel>\n                                    <ResizablePanel defaultSize={100} direction='vertical'>\n                                        <div className=\"p-4   h-full\">\n                                            <h1 className=\"text-xl\">Nested Panel 2</h1>\n                                            <p>This is the second panel in the nested group.</p>\n                                        </div>\n                                    </ResizablePanel>\n                                </ResizablePanelGroup>\n                            </ResizablePanel>\n                        </ResizablePanelGroup>\n                    </div>\n                </section>\n\n                {/* ProgressBar */}\n                <section className=\"space-y-4 w-full\" id='section17'>\n                    <h2 className=\"text-xl font-semibold\">Datatable</h2>\n                    <div className='flex flex-col justify-start w-1/2 mx-auto min-w-64 min-h-80 '>\n                        <h1 className=\"text-2xl font-bold mb-4\">Progress Bar Example</h1>\n                        <ProgressBar progress={30} />\n                    </div>\n                </section>\n            </main >\n            {\n                showAlert && (\n                    <Alert\n                        variant=\"warning\"\n                        size=\"md\"\n                        onConfirm={() => {\n                            console.log('Confirmed!');\n                            setShowAlert(false);\n                        }}\n                        onClose={() => setShowAlert(false)}\n                    >\n                        Are you sure you want to delete this?\n                    </Alert>\n                )\n            }\n        </div >\n    );\n}\n"},
          {text: "When I say to create a component or page, then use this component to make a page or component. First, think consciously and make a description of what my component requires and how the UI should look. Then use the component and add some customized props. Make and style them, such as spacing between components and display designs. Then create the component or page when I say to create something.\n\n"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```jsx\n// pages/components.js\n\"use client\";\n\nimport React, { useState } from 'react';\nimport Alert from '@/Component/Alert';\nimport Button from '@/Component/Button';\nimport Tooltip from '@/Component/Tooltip';\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '@/Component/Accordion';\nimport Badge from '@/Component/Badge';\nimport { Breadcrumb, BreadcrumbDropdown, BreadcrumbEllipsis, Br"},
        ],
      },
    ],
  });

  const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
  console.log(result.response.text());
}

run();