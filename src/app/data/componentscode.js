
const componentscode = {
  "Accordion": "```javascript\n/**\r\n * @file Provides a flexible and customizable Accordion component for displaying collapsible content sections.\r\n *\r\n * The Accordion component is designed to be highly versatile and can be easily integrated into various layouts and designs.\r\n * It allows for the creation of interactive user interfaces where content can be expanded or collapsed as needed.\r\n *\r\n * @example\r\n * // Basic usage:\r\n * <Accordion>\r\n *   <AccordionItem>\r\n *     <AccordionTrigger>Section 1</AccordionTrigger>\r\n *     <AccordionContent>Content for Section 1</AccordionContent>\r\n *   </AccordionItem>\r\n *   <AccordionItem open={true}>\r\n *     <AccordionTrigger>Section 2</AccordionTrigger>\r\n *     <AccordionContent>Content for Section 2</AccordionContent>\r\n *   </AccordionItem>\r\n * </Accordion>\r\n */\r\n\r\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * The main Accordion component that wraps around individual AccordionItem components.\r\n *\r\n * @param {object} props - The component props.\r\n * @param {React.ReactNode} props.children - The child components to be rendered within the Accordion.\r\n * @param {string} [props.className] - Optional className to apply to the Accordion container.\r\n * @returns {JSX.Element} The Accordion component.\r\n */\r\nexport const Accordion = ({ children, className }) => {\r\n    return (\r\n        <div className={`p-4 border border-gray-500/50 rounded-md ${className}`}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * Represents a single item within the Accordion, containing a trigger and its corresponding content.\r\n *\r\n * @param {object} props - The component props.\r\n * @param {React.ReactNode} props.children - The child components of the AccordionItem, including AccordionTrigger and AccordionContent.\r\n * @param {string} [props.className] - Optional className to apply to the AccordionItem container.\r\n * @param {boolean} [props.open=false] - Whether the AccordionItem should be initially open.\r\n * @returns {JSX.Element} The AccordionItem component.\r\n */\r\nexport const AccordionItem = ({ children, className, open = false }) => {\r\n    const [isOpen, setIsOpen] = useState(open);\r\n\r\n    const toggleOpen = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    return (\r\n        <div className={`w-full mb-2 ${className}`}>\r\n            {React.Children.map(children, (child) => {\r\n                if (child.type === AccordionTrigger) {\r\n                    return React.cloneElement(child, {\r\n                        isOpen: isOpen,\r\n                        onClick: toggleOpen,\r\n                    });\r\n                } else if (child.type === AccordionContent) {\r\n                    return React.cloneElement(child, {\r\n                        isOpen: isOpen,\r\n                    });\r\n                }\r\n                return null;\r\n            })}\r\n            <hr className='border-t-gray-500/50' />\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * The trigger element that toggles the visibility of the AccordionContent.\r\n *\r\n * @param {object} props - The component props.\r\n * @param {boolean} props.isOpen - Whether the AccordionItem is currently open.\r\n * @param {Function} props.onClick - The function to be called when the trigger is clicked.\r\n * @param {React.ReactNode} props.children - The content to be displayed within the trigger.\r\n * @param {string} [props.className] - Optional className to apply to the AccordionTrigger button.\r\n * @returns {JSX.Element} The AccordionTrigger component.\r\n */\r\nexport const AccordionTrigger = ({ isOpen, onClick, children, className }) => {\r\n    return (\r\n        <button\r\n            onClick={onClick}\r\n            className={`w-full px-4 py-3 text-left font-medium flex justify-between items-center focus:outline-none ${className}`}\r\n        >\r\n            {children}\r\n            <svg\r\n                className={` h-4 w-4 transition-transform transform ${isOpen ? 'rotate-180' : ''}`}\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 20 20\"\r\n                fill=\"currentColor\"\r\n            >\r\n\r\n                <path\r\n                    fillRule=\"evenodd\"\r\n                    d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\r\n                    clipRule=\"evenodd\"\r\n                />\r\n            </svg>\r\n        </button>\r\n    );\r\n};\r\n\r\n/**\r\n * The content section that is displayed or hidden based on the state of the AccordionItem.\r\n *\r\n * @param {object} props - The component props.\r\n * @param {boolean} props.isOpen - Whether the AccordionItem is currently open.\r\n * @param {React.ReactNode} props.children - The content to be displayed within the AccordionContent.\r\n * @param {string} [props.className] - Optional className to apply to the AccordionContent container.\r\n * @returns {JSX.Element} The AccordionContent component.\r\n */\r\nexport const AccordionContent = ({ isOpen, children, className }) => {\r\n    return (\r\n        <div\r\n            className={`transition-max-height duration-300 ease-in-out transform ${isOpen ? 'min-h-fit overflow-visible' : 'max-h-0 overflow-hidden'} ${className}`}\r\n        >\r\n            <div className='px-4 py-3'>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\n```\n",
  "Alert": "```javascript\n\"use client\";\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport Button from './Button';\r\n\r\n/**\r\n * @typedef {Object} AlertProps\r\n * @property {React.ReactNode} children - The content of the alert message.\r\n * @property {'success' | 'warning' | 'error' | 'info'} [variant='info'] - The variant of the alert, which determines its color.\r\n * @property {'xs' | 'sm' | 'md' | 'lg' | 'xl'} [size='md'] - The size of the alert, which determines its font size and padding.\r\n * @property {number} [duration=10000] - The duration in milliseconds to display the alert. Set to 0 to disable auto-close.\r\n * @property {() => void} [onClose] - Callback function triggered when the alert is closed.\r\n * @property {() => void} [onConfirm] - Callback function triggered when the confirm button is clicked.\r\n * @property {boolean} [showCloseButton=true] - Whether to show the close button.\r\n * @property {string} [confirmButtonLabel='Confirm'] - The label for the confirm button.\r\n * @property {string} [cancelButtonLabel='Cancel'] - The label for the cancel button.\r\n * @property {'top' | 'top-left' | 'top-right' | 'top-center' | 'bottom' | 'bottom-left' | 'bottom-right' | 'bottom-center' | 'center'} [position='top'] - The position of the alert on the screen.\r\n */\r\n\r\n/**\r\n * A flexible and customizable alert component for displaying important messages to the user.\r\n *\r\n * @param {AlertProps} props - The props for the Alert component.\r\n * @returns {JSX.Element | null} The rendered Alert component or null if not open.\r\n */\r\nconst Alert = ({\r\n\tchildren,\r\n\tvariant = 'info',\r\n\tsize = 'md',\r\n\tduration = 10000,\r\n\tonClose,\r\n\tonConfirm,\r\n\tshowCloseButton = true,\r\n\tconfirmButtonLabel = 'Confirm',\r\n\tcancelButtonLabel = 'Cancel',\r\n\tposition = 'top' // Default position\r\n}) => {\r\n\tconst [isOpen, setIsOpen] = useState(true);\r\n\tconst timerRef = useRef(null);\r\n\r\n\tconst variantClasses = {\r\n\t\tsuccess: 'bg-green-100 text-green-800 text-black',\r\n\t\twarning: 'bg-yellow-100 text-yellow-800',\r\n\t\terror: 'bg-red-100 text-red-800',\r\n\t\tinfo: 'bg-blue-100 text-blue-800 ',\r\n\t};\r\n\tconst ButtonVarients = {\r\n\t\tinfo: 'bg-gray-800 hover:bg-gray-700 text-gray-100 border border-gray-700 hover:border-transparent',\r\n\t\terror: 'bg-red-500 hover:bg-red-800 text-white',\r\n\t\tsuccess: 'bg-green-500 hover:bg-green-700 text-black  ',\r\n\t\twarning: 'bg-yellow-400 hover:bg-yellow-500 text-white ',\r\n\t}\r\n\r\n\tconst sizeClasses = {\r\n\t\txs: 'text-xs px-2 py-1',\r\n\t\tsm: 'text-sm px-3 py-2',\r\n\t\tmd: 'text-base px-4 py-3',\r\n\t\tlg: 'text-lg px-5 py-4',\r\n\t\txl: 'text-xl px-6 py-5',\r\n\t};\r\n\r\n\tconst Buttonsizes = {\r\n\t\txs: \"px-1 py-1 text-xs font-thin\",\r\n\t\tsm: \" px-2 py-1 text-sm font-light\",\r\n\t\tmd: \" px-3 py-1.5 text-base font-medium\",\r\n\t\tlg: \" px-5 py-2 text-lg font-semibold\",\r\n\t\txl: \" px-6  py-2.5 text-xl font-extrabold\",\r\n\t\ticon: \" py-2 px-2 text-base \",\r\n\t};\r\n\r\n\tconst positionClasses = {\r\n\t\ttop: 'top-4 left-1/2 transform -translate-x-1/2',\r\n\t\t'top-left': 'top-4 left-4',\r\n\t\t'top-right': 'top-4 right-4',\r\n\t\t'top-center': 'top-4 left-1/2 transform -translate-x-1/2',\r\n\t\tbottom: 'bottom-4 left-1/2 transform -translate-x-1/2',\r\n\t\t'bottom-left': 'bottom-4 left-4',\r\n\t\t'bottom-right': 'bottom-4 right-4',\r\n\t\t'bottom-center': 'bottom-4 left-1/2 transform -translate-x-1/2',\r\n\t\tcenter: 'top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2',\r\n\r\n\t};\r\n\r\n\tconst svgfillcolor = {\r\n\t\tinfo: ' fill-gray-300',\r\n\t\terror: ' fill-black',\r\n\t\tsuccess: ' fill-gray-900  ',\r\n\t\twarning: '  fill-black ',\r\n\t}\r\n\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tif (duration > 0 && !onConfirm) {\r\n\t\t\ttimerRef.current = setTimeout(() => {\r\n\t\t\t\tsetIsOpen(false);\r\n\t\t\t\tonClose && onClose();\r\n\t\t\t}, duration);\r\n\t\t}\r\n\r\n\t\treturn () => clearTimeout(timerRef.current);\r\n\t}, [duration, onClose, onConfirm]);\r\n\r\n\tif (!isOpen) return null;\r\n\r\n\treturn (\r\n\t\t<div className={`fixed z-50 rounded-md shadow-lg ${variantClasses[variant]} ${sizeClasses[size]} flex flex-col  justify-between w-full max-w-sm transition-opacity duration-300 bg-gray-900 ${isOpen ? 'opacity-100' : 'opacity-0'} ${positionClasses[position]}`}>\r\n\t\t\t<div className={`p-4 text-left ${variantClasses[variant]}`}>{children}</div>\r\n\t\t\t<hr className='border-t border-gray-500 my-2 ' />\r\n\r\n\t\t\t<div className=\"items-center justify-end w-full space-x-2 grid grid-cols-2\">\r\n\t\t\t\t{onConfirm && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\t\tvariant=\"secondary\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetIsOpen(false);\r\n\t\t\t\t\t\t\t\tonClose && onClose();\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{cancelButtonLabel}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\t\tvariant=\"primary\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetIsOpen(false);\r\n\t\t\t\t\t\t\t\tonConfirm();\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{confirmButtonLabel}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t\t{showCloseButton && !onConfirm &&\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<button className={`duration-100 flex items-center justify-center rounded-md disabled:opacity-50 disabled:cursor-not-allowed ${ButtonVarients[variant]} ${Buttonsizes[size] ? Buttonsizes[size] : \" px-4 py-2 text-base \"}  `}\r\n\t\t\t\t\t\t\t\tonClick={() => { setIsOpen(false); onClose && onClose(); }}>\r\n\t\t\t\t\t\t\t\t<svg className={`h-5 w-5  fill-gray-400 ${svgfillcolor[variant]}`} viewBox=\"0 0 20 20\">\r\n\t\t\t\t\t\t\t\t\t<path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n\t\t\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div >\r\n\t)\r\n}\r\n\r\nexport default Alert;\r\n\n```\n",
  "Badge": "```javascript\n\"use client\";\r\n\r\n/**\r\n * A versatile Badge component for displaying concise information or status indicators.\r\n *\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content to be displayed within the badge.\r\n * @param {('gray'|'red'|'green'|'blue'|'yellow'|'purple'|'pink'|'cyan')} [props.variant='gray'] - The color variant of the badge.\r\n * @param {('solid'|'outline'|'subtle')} [props.variantstyle='solid'] - The style variant of the badge (solid, outline, or subtle).\r\n * @param {('sm'|'md'|'lg'|'xl')} [props.size='md'] - The size of the badge.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the badge.\r\n * @param {Object} [props....rest] - Any other props are spread to the underlying `<span>` element.\r\n *\r\n * @example\r\n * // Basic usage\r\n * <Badge>New</Badge>\r\n *\r\n * @example\r\n * // With different variant, variantstyle, and size\r\n * <Badge variant=\"red\" variantstyle=\"outline\" size=\"lg\">\r\n *   Important\r\n * </Badge>\r\n */\r\nexport default function Badge({\r\n    children,\r\n    variant = 'gray',\r\n    variantstyle = 'solid',\r\n    size = 'md',\r\n    className,\r\n    ...rest\r\n}) {\r\n    // Define classes for different variants and sizes\r\n    const variantClasses = {\r\n        gray: `${variantstyle === 'solid' ? 'bg-gray-500 text-white' : variantstyle === 'outline' ? 'border border-gray-500 text-gray-500' : 'bg-gray-100 text-gray-700'}`,\r\n        red: `${variantstyle === 'solid' ? 'bg-red-500 text-white' : variantstyle === 'outline' ? 'border border-red-500 text-red-500' : 'bg-red-100 text-red-700'}`,\r\n        green: `${variantstyle === 'solid' ? 'bg-green-500 text-white' : variantstyle === 'outline' ? 'border border-green-500 text-green-500' : 'bg-green-100 text-green-700'}`,\r\n        blue: `${variantstyle === 'solid' ? 'bg-blue-500 text-white' : variantstyle === 'outline' ? 'border border-blue-500 text-blue-500' : 'bg-blue-100 text-blue-700'}`,\r\n        yellow: `${variantstyle === 'solid' ? 'bg-yellow-500 text-white' : variantstyle === 'outline' ? 'border border-yellow-500 text-yellow-500' : 'bg-yellow-100 text-yellow-700'}`,\r\n        purple: `${variantstyle === 'solid' ? 'bg-purple-500 text-white' : variantstyle === 'outline' ? 'border border-purple-500 text-purple-500' : 'bg-purple-100 text-purple-700'}`,\r\n        pink: `${variantstyle === 'solid' ? 'bg-pink-500 text-white' : variantstyle === 'outline' ? 'border border-pink-500 text-pink-500' : 'bg-pink-100 text-pink-700'}`,\r\n        cyan: `${variantstyle === 'solid' ? 'bg-cyan-500 text-white' : variantstyle === 'outline' ? 'border border-cyan-500 text-cyan-500' : 'bg-cyan-100 text-cyan-700'}`,\r\n    };\r\n\r\n    const sizeClasses = {\r\n        sm: 'text-[0.5rem] px-1 py-0.5  ',\r\n        md: 'text-xs px-2 py-1  ',\r\n        lg: 'text-sm px-3 py-1.5  ',\r\n        xl: 'text-base px-4 py-2  ',\r\n    };\r\n\r\n    // Construct the className string based on props\r\n    return (\r\n        <span\r\n            className={`rounded-full  inline-flex items-center font-medium ${variantClasses[variant]} ${sizeClasses[size] ? sizeClasses[size] : \" text-xs px-2 py-1 \"} ${className}`}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </span>\r\n    );\r\n}\r\n\n```\n",
  "Breadcrumb": "```javascript\n\"use client\";\r\nimport Link from 'next/link';\r\nimport React, { useState, createContext, useContext } from 'react';\r\n\r\n// Create a context for the Breadcrumb\r\nconst BreadcrumbContext = createContext();\r\n\r\nexport const BreadcrumbProvider = ({ children }) => {\r\n    return (\r\n        <BreadcrumbContext.Provider value={{}}>\r\n            {children}\r\n        </BreadcrumbContext.Provider>\r\n    );\r\n};\r\n\r\nexport const Breadcrumb = ({ children, className, ...rest }) => {\r\n    return (\r\n        <nav aria-label=\"Breadcrumb\" className={className} {...rest}>\r\n            <ol className=\"flex items-center space-x-1 md:space-x-2\">\r\n                {children}\r\n            </ol>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport const BreadcrumbItem = ({ children, className, ...rest }) => {\r\n    return (\r\n        <li className={className} {...rest}>\r\n            {children}\r\n        </li>\r\n    );\r\n};\r\n\r\n\r\nexport const BreadcrumbLink = ({ href, children, className, active, onClose, ...rest }) => {\r\n    return (\r\n        <Link\r\n            href={href}\r\n            className={`text-sm font-medium ${active ? 'text-gray-100 dark:text-gray-100' : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-500'} ${className}`}\r\n            onClick={onClose} // Call onClose when the link is clicked\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport const BreadcrumbSeparator = ({ children, className, ...rest }) => {\r\n    return (\r\n        <span\r\n            className={`text-gray-500 dark:text-gray-400 mx-1 md:mx-2 text-sm ${className}`}\r\n            {...rest}\r\n        >\r\n            {children ? children : '/'}\r\n        </span>\r\n    );\r\n};\r\n\r\n\r\nexport const BreadcrumbEllipsis = ({ className, ...rest }) => {\r\n    return (\r\n        <li >\r\n            <svg\r\n                className={`h-4 w-4 text-gray-400 ${className}`}\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"currentColor\"\r\n                {...rest}\r\n            >\r\n                <path d=\"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\" />\r\n            </svg>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport const BreadcrumbList = ({ children, className, ...rest }) => {\r\n    return (\r\n        <ol className={`flex items-center space-x-1 md:space-x-2 ${className}`} {...rest}>\r\n            {children}\r\n        </ol>\r\n    );\r\n};\r\n\r\nexport const BreadcrumbPage = ({ children, className, ...rest }) => {\r\n    return (\r\n        <span\r\n            className={`text-sm font-medium text-gray-700 dark:text-gray-500 ${className}`}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport const BreadcrumbDropdown = ({ children, className, placeholder, ...rest }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const dropdownRef = React.useRef();\r\n\r\n    const toggleDropdown = () => {\r\n        setIsOpen(prev => !prev);\r\n    };\r\n\r\n    const closeDropdown = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n            setIsOpen(false);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <li className={`relative ${className}`} ref={dropdownRef} {...rest}>\r\n            <div onClick={toggleDropdown} className=\"cursor-pointer text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-500 flex items-center\">\r\n                {placeholder}\r\n                <svg\r\n                    className={`h-4 w-4 ml-1 transform transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                >\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\" />\r\n                </svg>\r\n            </div>\r\n            {isOpen && (\r\n                <ul className=\"absolute z-50 bg-gray-900 text-gray-100 max-h-72 overflow-auto border border-gray-500 rounded-md shadow-lg mt-2\"\r\n                    style={{\r\n                        top: dropdownRef.current.getBoundingClientRect().bottom > window.innerHeight ? '-auto' : 'auto',\r\n                        bottom: dropdownRef.current.getBoundingClientRect().bottom > window.innerHeight ? '100%' : 'auto',\r\n                        left: dropdownRef.current.getBoundingClientRect().right > window.innerWidth ? '-auto' : '0',\r\n                        right: dropdownRef.current.getBoundingClientRect().right > window.innerWidth ? '100%' : 'auto',\r\n                    }}>\r\n                    {React.Children.map(children, (child, index) => (\r\n                        <li key={index} className=\"px-4 py-2 hover:shadow-md\">\r\n                            {React.cloneElement(child, { onClose: closeDropdown })}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n        </li>\r\n    );\r\n};\r\n\n```\n",
  "Button": "```javascript\n\"use client\";\r\n\r\n/**\r\n * A versatile button component with various variants and sizes.\r\n *\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content to be displayed within the button.\r\n * @param {('default'|'outline'|'primary'|'secondary'|'danger'|'success'|'warning'|'info')} [props.variant='default'] - The visual variant of the button.\r\n * @param {('xs'|'sm'|'md'|'lg'|'xl'|'icon')} [props.size='md'] - The size of the button.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the button.\r\n * @param {Object} [props....rest] - Any other props are spread to the underlying `<button>` element.\r\n *\r\n * @example\r\n * // Basic usage\r\n * <Button>Click me</Button>\r\n *\r\n * @example\r\n * // With different variant and size\r\n * <Button variant=\"primary\" size=\"lg\">\r\n *   Submit\r\n * </Button>\r\n */\r\nexport default function Button({ children, variant = 'default', size = 'md', className, ...rest }) {\r\n    const varients = {\r\n        default: 'bg-white hover:bg-white/90 text-black  ',\r\n        outline: 'bg-gray-900 hover:bg-gray-800 text-gray-100 border border-gray-700 hover:border-transparent',\r\n        primary: 'bg-blue-500 hover:bg-blue-700 text-white',\r\n        secondary: 'bg-gray-800 hover:bg-gray-700 text-gray-300',\r\n        danger: 'bg-red-500 hover:bg-red-800 text-white',\r\n        success: 'bg-green-500 hover:bg-green-700 text-white  ',\r\n        warning: 'bg-yellow-400 hover:bg-yellow-500 text-white ',\r\n        info: 'bg-blue-400 hover:bg-blue-500 text-white',\r\n    }\r\n    const sizes = {\r\n        xs: \"px-1 py-1 text-xs font-thin\",\r\n        sm: \" px-2 py-1 text-sm font-light\",\r\n        md: \" px-3 py-1.5 text-base font-medium\",\r\n        lg: \" px-5 py-2 text-lg font-semibold\",\r\n        xl: \" px-6  py-2.5 text-xl font-extrabold\",\r\n        icon: \" py-2 px-2 text-base \",\r\n    };\r\n\r\n    const clases = `duration-100 rounded-md disabled:opacity-50 disabled:cursor-not-allowed ${varients[variant]} ${sizes[size] ? sizes[size] : \" px-4 py-2 text-base \"} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={clases}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n\n```\n",
  "Calendar": "```javascript\nimport React, { useState, useEffect, useRef } from 'react';\r\n \r\n\r\n\r\n/**\r\n * @typedef {Object} CalendarProps\r\n * @property {string} [className] - Additional CSS class names to apply to the calendar container.\r\n * @property {Date} [initialDate] - The initial date to display in the calendar. Defaults to the current date.\r\n * @property {Date} [toDate] - The latest selectable date in the calendar.\r\n * @property {Date} [fromDate] - The earliest selectable date in the calendar.\r\n * @property {string} [position='absolute'] - The position of the calendar dropdown.\r\n * @property {string} [placeholder=\"Select date\"] - The placeholder text for the input field.\r\n * @property {Function} [onChange] - A callback function that is triggered when a date is selected.\r\n * @property {Array<string>} [theme=['blue', 'green']] - An array of two color names for primary and secondary colors.\r\n *\r\n * A customizable and responsive calendar component for selecting dates.\r\n *\r\n * @param {CalendarProps} props - The properties for the calendar component.\r\n * @returns {JSX.Element} The rendered calendar component.\r\n * \r\n * example * \r\n * <Calendar \r\n *     initialDate={new Date('2024-03-15')} \r\n *     toDate={new Date('2025-03-15')} \r\n *     fromDate={new Date('2023-03-15')} \r\n *     placeholder=\"Select a date\" \r\n *     onChange={handleDateChange} \r\n *     theme={['red', 'gray']} \r\n * />\r\n * \r\n */\r\n\r\nconst Calendar = ({ className, initialDate, toDate, fromDate,position, placeholder = \"Select date\", onChange, theme }) => {\r\n    const [currentDate, setCurrentDate] = useState(initialDate || new Date());\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const calendarRef = useRef(null);\r\n\r\n    const daysInWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    const monthNames = [\r\n        'January', 'February', 'March', 'April', 'May', 'June',\r\n        'July', 'August', 'September', 'October', 'November', 'December'\r\n    ];\r\n\r\n    // Default theme: blue, gray\r\n    const defaultTheme = ['blue', 'green'];\r\n    const [primary, secondary] = theme || defaultTheme;\r\n\r\n    const getDaysInMonth = (month, year) => {\r\n        const date = new Date(year, month, 1);\r\n        const days = [];\r\n        while (date.getMonth() === month) {\r\n            days.push(new Date(date));\r\n            date.setDate(date.getDate() + 1);\r\n        }\r\n        return days;\r\n    };\r\n\r\n    const goToPreviousMonth = () => {\r\n        const newMonth = currentDate.getMonth() - 1;\r\n        const newYear = currentDate.getFullYear();\r\n\r\n        // Check if the new month is within the allowed range\r\n        const newDate = new Date(newYear, newMonth);\r\n        if (isValidMonth(newDate)) {\r\n            setCurrentDate(newDate);\r\n        }\r\n    };\r\n\r\n    const goToNextMonth = () => {\r\n        const newMonth = currentDate.getMonth() + 1;\r\n        const newYear = currentDate.getFullYear();\r\n\r\n        // Check if the new month is within the allowed range\r\n        const newDate = new Date(newYear, newMonth);\r\n        if (isValidMonth(newDate)) {\r\n            setCurrentDate(newDate);\r\n        }\r\n    };\r\n\r\n    const goToToday = () => {\r\n        const today = new Date();\r\n        setCurrentDate(today);\r\n        setSelectedDate(today);\r\n        if (onChange) {\r\n            onChange(today);\r\n        }\r\n    };\r\n\r\n    const handleDateClick = (day) => {\r\n        // Check if the date is within the allowed range (if provided)\r\n        const isInAllowedRange =\r\n            (!toDate && !fromDate) ||\r\n            (toDate && !fromDate && day <= toDate) ||\r\n            (!toDate && fromDate && day >= fromDate) ||\r\n            (toDate && fromDate && day >= toDate && day <= fromDate);\r\n\r\n\r\n        // Only update the selected date if it's within the allowed range\r\n        if (isInAllowedRange) {\r\n            setSelectedDate(day);\r\n            if (onChange) {\r\n                onChange(day);\r\n            }\r\n            setIsOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleYearChange = (event) => {\r\n        const newYear = parseInt(event.target.value, 10);\r\n        const newDate = new Date(newYear, currentDate.getMonth());\r\n\r\n        // Check if the new year is within the allowed range\r\n        if (isValidMonth(newDate)) {\r\n            setCurrentDate(newDate);\r\n        }\r\n    };\r\n\r\n    const handleMonthChange = (event) => {\r\n        const newMonth = parseInt(event.target.value, 10);\r\n        const newDate = new Date(currentDate.getFullYear(), newMonth);\r\n\r\n        // Check if the new month is within the allowed range\r\n        if (isValidMonth(newDate)) {\r\n            setCurrentDate(newDate);\r\n        }\r\n    };\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (calendarRef.current && !calendarRef.current.contains(event.target)) {\r\n            setIsOpen(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    const renderHeader = () => {\r\n        return (\r\n            <div className=\"flex justify-between items-center p-2 gap-2 \">\r\n                <button onClick={goToPreviousMonth} className=\"hover:text-blue-500\">\r\n                    {\"<\"}\r\n                </button>\r\n                <div className=\"flex gap-2\">\r\n                    <select\r\n                        value={currentDate.getMonth()}\r\n                        onChange={handleMonthChange}\r\n                        className={` text-gray-700 border rounded-md px-2 py-1 border-${secondary} focus:outline-none focus:ring-1 focus:ring-${primary}-500 focus:ring-opacity-50`}\r\n                    >\r\n                        {monthNames.map((month, index) => (\r\n                            <option key={index} value={index}>\r\n                                {month}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <select\r\n                        value={currentDate.getFullYear()}\r\n                        onChange={handleYearChange}\r\n                        className={` text-gray-700 border rounded-md px-2 py-1 border-${secondary} focus:outline-none focus:ring-1 focus:ring-${primary}-500 focus:ring-opacity-50`}\r\n                    >\r\n                        {Array.from({ length: 10 }, (_, i) => currentDate.getFullYear() - 5 + i).map((year) => (\r\n                            <option key={year} value={year}>\r\n                                {year}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <button onClick={goToNextMonth} className=\"hover:text-blue-500\">\r\n                    {\">\"}\r\n                </button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const renderDays = () => {\r\n        const days = getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear());\r\n        const firstDayIndex = days[0].getDay();\r\n        const lastDayIndex = days[days.length - 1].getDay();\r\n\r\n        // Calculate leading days\r\n        const prevMonthLastDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);\r\n        const prevDays = [];\r\n        for (let i = 0; i < firstDayIndex; i++) {\r\n            prevDays.unshift(new Date(\r\n                prevMonthLastDate.getFullYear(), prevMonthLastDate.getMonth(), prevMonthLastDate.getDate() - i));\r\n        }\r\n\r\n        const nextDays = [];\r\n        for (let i = 1; i <= 6 - lastDayIndex; i++) {\r\n            nextDays.push(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, i));\r\n        }\r\n\r\n        return [\r\n            ...prevDays.map((day) => ({ day, isPlaceholder: true })),\r\n            ...days.map((day) => ({ day, isPlaceholder: false })),\r\n            ...nextDays.map((day) => ({ day, isPlaceholder: true }))\r\n        ].map(({ day, isPlaceholder }, index) => {\r\n            const isToday = day.toDateString() === new Date().toDateString();\r\n            const isSelected = day.toDateString() === selectedDate?.toDateString();\r\n\r\n            const isInAllowedRange =\r\n                (!toDate && !fromDate) ||\r\n                (toDate && !fromDate && day <= toDate) ||\r\n                (!toDate && fromDate && day >= fromDate) ||\r\n                (toDate && fromDate && day >= toDate && day <= fromDate);\r\n\r\n            const isDisabled = isPlaceholder || !isInAllowedRange;\r\n\r\n\r\n            return (\r\n                <button\r\n                    key={index}\r\n                    onClick={() => !isDisabled && handleDateClick(day)}\r\n                    disabled={isDisabled} // Disable the button if needed\r\n                    className={`\r\n                        text-center rounded-full border-0 w-9 flex items-center justify-center h-9 p-2 relative transition duration-200 ease-in-out cursor-pointer\r\n                        ${isPlaceholder ? ` text-gray-300 border-transparent` : ` `} \r\n                        ${isSelected ? ` bg-${primary}-500 text-white border-${primary}-500` : ''} \r\n                        ${isToday ? `  border-2 border-${primary}-500` : ''} \r\n                        ${isToday && !isSelected ? ` text-${primary} border-${primary}-200` : ''}  \r\n                        ${!isPlaceholder && !isDisabled && `text-gray-700 duration-200 hover:border-2  `}  \r\n                        ${isDisabled ? `cursor-default text-gray-300` : ''} `}\r\n                >\r\n                    {day.getDate()}\r\n                </button>\r\n            );\r\n        });\r\n    };\r\n\r\n    // Helper function to check if a month is within the allowed range\r\n    const isValidMonth = (date) => {\r\n        if (toDate && fromDate) {\r\n            const startMonth = toDate.getMonth();\r\n            const startYear = toDate.getFullYear();\r\n            const endMonth = fromDate.getMonth();\r\n            const endYear = fromDate.getFullYear();\r\n\r\n            const currentMonth = date.getMonth();\r\n            const currentYear = date.getFullYear();\r\n\r\n            // Check if the current month and year are within the allowed range\r\n            return (\r\n                (currentYear > startYear || (currentYear === startYear && currentMonth >= startMonth)) &&\r\n                (currentYear < endYear || (currentYear === endYear && currentMonth <= endMonth))\r\n            );\r\n        }\r\n        return true; // No range restrictions, so any month is valid\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"relative inline-block text-left w-full mt-1\" ref={calendarRef}>\r\n            <input\r\n                type=\"text\"\r\n                className={` placeholder:text-gray-400 rounded-md px-3 bg-gray-900 focus:border-white py-2 w-full text-gray-300 focus:outline-none 900 border border-gray-500 shadow-sm sm:text-sm focus:border disabled:bg-gray-900/90 disabled:cursor-not-allowed ${className} `}\r\n                placeholder={placeholder}\r\n                value={selectedDate ? selectedDate.toLocaleDateString() : ''}\r\n                readOnly\r\n                onClick={() => setIsOpen(!isOpen)}\r\n            />\r\n\r\n            {isOpen && (\r\n                <div className={`absolute z-10 mt-2 ${position} border border-${secondary}-300  rounded-md shadow-md bg-white`}>\r\n                    <div className=\"flex items-center justify-between text-center border-b border-${secondary} p-1\">\r\n                        <button onClick={goToToday} className={`text-sm text-${primary}-500 hover:underline px-2`}>\r\n                            Today\r\n                        </button>\r\n                        {renderHeader()}\r\n                    </div>\r\n                    <div className=\"grid grid-cols-7 gap-1 px-2 pt-2\">\r\n                        {daysInWeek.map((day) => (\r\n                            <div key={day} className=\"text-center py-2 font-medium text-gray-700\">\r\n                                {day}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"grid grid-cols-7 gap-1 px-2 pb-2\">{renderDays()}</div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Calendar;\n```\n",
  "Carousel": "```javascript\n'use client';\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\n/**\r\n * @typedef {Object} CarouselProps\r\n * @property {React.ReactNode} children - The slides to display in the carousel.\r\n * @property {boolean} [autoplay=false] - Whether the carousel should automatically advance slides.\r\n * @property {number} [interval=5000] - The time in milliseconds between automatic slide transitions.\r\n * @property {string} [className] - Additional CSS class names to apply to the carousel container.\r\n * \r\n * A responsive and customizable carousel component for displaying a rotating set of slides.\r\n * \r\n * @param {CarouselProps} props - The properties for the carousel component.\r\n * @returns {JSX.Element} The rendered carousel component.\r\n * \r\n * @example\r\n * // Basic usage with three slides\r\n * <Carousel>\r\n *   <CarouselItem>Slide 1 Content</CarouselItem>\r\n *   <CarouselItem>Slide 2 Content</CarouselItem>\r\n *   <CarouselItem>Slide 3 Content</CarouselItem>\r\n * </Carousel>\r\n * \r\n * @example\r\n * // Autoplay carousel with a 3-second interval\r\n * <Carousel autoplay interval={3000}>\r\n *   {\r\n *       // Slides \r\n *   }\r\n * </Carousel>\r\n */\r\n\r\nconst Carousel = ({ children, autoplay = false, interval = 5000, className }) => {\r\n\tconst [currentIndex, setCurrentIndex] = useState(0);\r\n\tconst carouselRef = useRef(null); // Not used in this simplified version\r\n\r\n\t/**\r\n\t * Navigates the carousel to a specific slide index.\r\n\t *\r\n\t * @param {number} index - The index of the slide to navigate to.\r\n\t */\r\n\r\n\tconst goToSlide = useCallback((index) => {\r\n\t\tsetCurrentIndex((index + children.length) % children.length);\r\n\t}, [children.length]); // Dependency array for useCallback\r\n\r\n\tuseEffect(() => {\r\n\t\tlet autoplayInterval;\r\n\t\tif (autoplay) {\r\n\t\t\tautoplayInterval = setInterval(() => goToSlide(currentIndex + 1), interval);\r\n\t\t}\r\n\t\treturn () => clearInterval(autoplayInterval);\r\n\t}, [currentIndex, autoplay, interval, goToSlide]);\r\n\r\n\treturn (\r\n\t\t<div className={`relative ${className}`}>\r\n\t\t\t<div className=\"overflow-hidden rounded-md \">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"flex transition-transform duration-500 ease-in-out \"\r\n\t\t\t\t\tstyle={{ transform: `translateX(-${currentIndex * 100}%)` }}\r\n\t\t\t\t>\r\n\t\t\t\t\t{children.map((child, index) => (\r\n\t\t\t\t\t\t<div key={index} className=\"flex-shrink-0 w-full\" style={{ minWidth: '100%' }}>\r\n\t\t\t\t\t\t\t{/* Pass through children without applying default styles */}\r\n\t\t\t\t\t\t\t{child}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<CarouselButton onClick={() => goToSlide(currentIndex - 1)} direction=\"left\" />\r\n\t\t\t<CarouselButton onClick={() => goToSlide(currentIndex + 1)} direction=\"right\" />\r\n\r\n\t\t\t<div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2 \">\r\n\t\t\t\t{children.map((_, index) => (\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tonClick={() => goToSlide(index)}\r\n\t\t\t\t\t\tclassName={`w-3 h-3 rounded-full ${currentIndex === index ? 'bg-blue-500' : 'bg-gray-400'\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\n/**\r\n * @typedef {Object} CarouselItemProps\r\n * @property {React.ReactNode} children - The content of the carousel item.\r\n * @property {string} [className] - Additional CSS class names to apply to the carousel item container.\r\n * \r\n * Represents a single slide within the Carousel component.\r\n * \r\n * @param {CarouselItemProps} props - The properties for the carousel item.\r\n * @returns {JSX.Element} The rendered carousel item.\r\n */\r\nexport const CarouselItem = ({ children, className, ...rest }) => {\r\n\treturn (\r\n\t\t<div className={` ${className}`}\r\n\t\t\t{...rest}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\n\r\n\r\n/**\r\n * @typedef {Object} CarouselButtonProps\r\n * @property {function} onClick - A callback function triggered when the button is clicked.\r\n * @property {'left'|'right'} direction - The direction of the arrow button (\"left\" or \"right\").\r\n * \r\n * An internal component for the left and right arrow buttons in the carousel.\r\n * \r\n * @param {CarouselButtonProps} props - The properties for the carousel button.\r\n * @returns {JSX.Element} The rendered carousel button.\r\n */\r\n\r\nconst CarouselButton = ({ onClick, direction }) => {\r\n\tconst arrowPath = direction === \"left\" ? \"M15 19l-7-7 7-7\" : \"M9 5l7 7-7 7\";\r\n\tconst translateXClass = direction === \"left\" ? \"translate-x-1/3\" : \"-translate-x-1/3\";\r\n\r\n\treturn (\r\n\t\t<button\r\n\t\t\tonClick={onClick}\r\n\t\t\tclassName={`absolute border border-gray-500 rounded-full p-1.5 ${direction === \"left\" ? \"right-full\" : \"left-full\"\r\n\t\t\t\t} top-1/2 -translate-y-1/2 ${translateXClass}`}\r\n\t\t>\r\n\t\t\t<svg\r\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\tclassName=\"h-6 w-6 text-gray-200\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t>\r\n\t\t\t\t<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d={arrowPath} />\r\n\t\t\t</svg>\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Carousel;\r\n\n```\n",
  "Checkbox": "```javascript\n\"use client\";\r\n\r\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * @typedef {Object} CheckboxProps\r\n * @property {boolean} [checked=false] - Whether the checkbox is checked or not.\r\n * @property {function} [onChange] - A callback function triggered when the checkbox's checked state changes.\r\n * @property {string} [id] - The ID attribute for the checkbox element.\r\n * @property {string} [className] - Additional CSS class names to apply to the checkbox container.\r\n * @property {'default'|'outline'|'secondary'|'danger'|'warning'|'info'} [variant='default'] - The visual variant of the checkbox.\r\n * @property {'xs'|'sm'|'md'|'lg'|'xl'} [size='md'] - The size of the checkbox.\r\n * \r\n * A customizable checkbox component with various visual variants and sizes.\r\n * \r\n * @param {CheckboxProps} props - The properties for the checkbox component.\r\n * @returns {JSX.Element} The rendered checkbox component.\r\n * \r\n * @example\r\n * // Basic usage\r\n * <Checkbox />\r\n * \r\n * @example\r\n * // Controlled checkbox with a change handler\r\n * <Checkbox checked={isChecked} onChange={(checked) => setIsChecked(checked)} />\r\n * \r\n * @example\r\n * // Checkbox with a specific variant and size\r\n * <Checkbox variant=\"danger\" size=\"lg\" />\r\n */\r\nconst Checkbox = ({\r\n    checked = false,\r\n    onChange,\r\n    id,\r\n    className,\r\n    variant = 'default',\r\n    size = 'md',\r\n    ...rest\r\n}) => {\r\n    const [isChecked, setIsChecked] = useState(checked);\r\n\r\n    const handleClick = () => {\r\n        setIsChecked(!isChecked);\r\n        onChange && onChange(!isChecked);\r\n    };\r\n\r\n    const variants = {\r\n        default: {\r\n            unchecked: 'focus:ring-blue-500',\r\n            checked: 'bg-blue-600 border-transparent focus:ring-blue-500 text-white' \r\n        },\r\n        outline: {\r\n            unchecked: 'focus:ring-gray-400',\r\n            checked: 'bg-gray-800 border-gray-500 focus:ring-gray-400 text-white'\r\n        },\r\n        secondary: {\r\n            unchecked: 'focus:ring-gray-600',\r\n            checked: 'bg-gray-600 border-transparent focus:ring-gray-600 text-white'\r\n        },\r\n        danger: {\r\n            unchecked: 'focus:ring-red-500',\r\n            checked: 'bg-red-600 border-transparent focus:ring-red-500 text-white'\r\n        },\r\n        warning: {\r\n            unchecked: 'focus:ring-yellow-400',\r\n            checked: 'bg-yellow-400 border-transparent focus:ring-yellow-400 text-black' \r\n        },\r\n        info: {\r\n            unchecked: 'focus:ring-blue-400',\r\n            checked: 'bg-blue-400 border-transparent focus:ring-blue-400 text-white'\r\n        },\r\n    };\r\n\r\n    const sizes = {\r\n        xs: 'w-3 h-3',\r\n        sm: 'w-4 h-4',\r\n        md: 'w-5 h-5',\r\n        lg: 'w-6 h-6',\r\n        xl: 'w-7 h-7'\r\n    };\r\n    const svgsizes = {\r\n        xs: 'w-2 h-2 ',\r\n        sm: 'w-3 h-3 ',\r\n        md: 'w-4 h-4 ',\r\n        lg: 'w-5 h-5 ',\r\n        xl: 'w-6 h-6 ',\r\n    };\r\n\r\n    \r\n    const currentVariant = variants[variant] || variants.default;\r\n\r\n    return (\r\n        <div className={`flex items-center ${className} `} {...rest}>\r\n            <button\r\n                onClick={handleClick}\r\n                className={` rounded-[4px] mr-2 border ${currentVariant[isChecked ? 'checked' : 'unchecked']} ${sizes[size]} flex items-center justify-center transition duration-200 ease-in-out`}\r\n                aria-checked={isChecked}\r\n                role=\"checkbox\"\r\n                id={id}\r\n            >\r\n                {isChecked && (\r\n                    <svg\r\n                        className={`flex items-center justify-center w-3 h-3 ${svgsizes[size]} `}\r\n                        viewBox=\"0 0 12 10\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        strokeWidth=\"2\"\r\n                    >\r\n                        <path d=\"M1 4l4 4L11 1\" />\r\n                    </svg>\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Checkbox;\r\n\n```\n",
  "Command": "```javascript\n/**\r\n * @file Provides a Command Palette component for quickly accessing actions and commands.\r\n *\r\n * The Command Palette allows users to search for and execute commands by typing in a search bar.\r\n * It provides a convenient way to navigate and interact with an application's functionality.\r\n *\r\n * @example\r\n * // Basic usage:\r\n * <Command>\r\n *   <CommandGroup title=\"Actions\">\r\n *     <CommandItem onClick={() => console.log('Create new file')}>\r\n *       <CommandItemIcon>➕</CommandItemIcon>\r\n *       <CommandItemText>Create New File</CommandItemText>\r\n *       <CommandItemSuggestionText>Ctrl+N</CommandItemSuggestionText>\r\n *     </CommandItem>\r\n *     <CommandItem onClick={() => console.log('Open settings')}>\r\n *       <CommandItemIcon>⚙️</CommandItemIcon>\r\n *       <CommandItemText>Settings</CommandItemText>\r\n *     </CommandItem>\r\n *   </CommandGroup>\r\n * </Command>\r\n */\r\nimport React, { useState } from 'react';\r\n\r\n\r\n\r\n\r\n/**\r\n * The main Command Palette component.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The command groups and items to display within the palette.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the command palette container.\r\n * @param {function} [props.onSearch] - A callback function triggered when the search term changes. \r\n *   It receives the current search term as an argument.\r\n * @param {string} [props.searchablebaricon=\"🔍\"] - The icon to display in the search bar.\r\n * \r\n * @example\r\n * <Command onSearch={(term) => console.log(\"Searching for:\", term)}>\r\n *   {\r\n *      // Command groups and items\r\n *   }\r\n * </Command>\r\n */\r\nconst Command = ({ children, className, onSearch, searchablebaricon = \"🔍\" }) => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [filteredChildren, setFilteredChildren] = useState(children);\r\n\r\n    /**\r\n     * Handles changes in the search input.\r\n     *\r\n     * @param {Event} event - The input change event.\r\n     */\r\n    const handleChange = (event) => {\r\n        setSearchTerm(event.target.value);\r\n        onSearch && onSearch(event.target.value);\r\n\r\n        // Filter children based on the search term\r\n        const newFilteredChildren = React.Children.toArray(children).filter((child) => {\r\n            const textToSearch = child.props.title ||\r\n                (child.props.children && React.Children.toArray(child.props.children)\r\n                    .map(c => c.props.children)\r\n                    .join(' '));\r\n\r\n            return textToSearch && textToSearch.toLowerCase().includes(searchTerm.toLowerCase());\r\n        });\r\n\r\n        setFilteredChildren(newFilteredChildren);\r\n    };\r\n\r\n    return (\r\n        <div className={`border border-gray-500 rounded-md ${className || ''}`}>\r\n            <div className=\"flex w-full gap-1 items-center justify-center p-1\">\r\n                <div className=\"w-10 text-center\">{searchablebaricon}</div>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search\"\r\n                    className=\"flex-grow px-2 py-1 bg-transparent\"\r\n                    value={searchTerm}\r\n                    onChange={handleChange}\r\n                />\r\n            </div>\r\n            {filteredChildren}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A group of related commands within the command palette.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The command items to display within the group.\r\n * @param {string} [props.title] - The title for the command group.\r\n * \r\n * @example\r\n * <CommandGroup title=\"File Operations\">\r\n *    {\r\n *     // Command items \r\n *    }\r\n * </CommandGroup>\r\n */\r\nconst CommandGroup = ({ children, title }) => (\r\n    <div>\r\n        <hr className=\"w-full border-gray-500 mb-1\" />\r\n        {title && <h3 className=\"text-sm ml-2 w-fit opacity-70 font-semibold\">{title}</h3>}\r\n        <div className=\"pt-1 pb-2 px-2\">\r\n            {children}\r\n        </div>\r\n    </div>\r\n);\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * An individual command item within a command group.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content of the command item (icon, text, suggestion).\r\n * @param {function} [props.onClick] - A callback function triggered when the command item is clicked.\r\n * @param {boolean} [props.isActive=false] - Whether the command item is currently active (e.g., matches the search term).\r\n * \r\n * @example\r\n * <CommandItem onClick={() => console.log('Command executed!')}>\r\n *   <CommandItemIcon>🚀</CommandItemIcon>\r\n *   <CommandItemText>Execute Command</CommandItemText>\r\n * </CommandItem>\r\n */\r\nconst CommandItem = ({ children, onClick, isActive = false }) => (\r\n    <div\r\n        className={`p-1 rounded-md hover:bg-gray-800/90 flex gap-1 items-center ${isActive ? 'bg-gray-800/50' : ''\r\n            }`}\r\n        onClick={onClick}\r\n    >\r\n        {children}\r\n    </div>\r\n);\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * An icon within a command item.\r\n *\r\n * @component\r\n * @param {React.ReactNode} props.children - The icon to display.\r\n * \r\n * @example\r\n * <CommandItemIcon>📁</CommandItemIcon>\r\n */\r\nconst CommandItemIcon = ({ children }) => (\r\n    <div className=\"w-7 text-center\">{children}</div>\r\n);\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The main text label for a command item.\r\n *\r\n * @component\r\n * @param {React.ReactNode} props.children - The text label to display.\r\n * \r\n * @example\r\n * <CommandItemText>Open File</CommandItemText>\r\n */\r\nconst CommandItemText = ({ children }) => <span>{children}</span>;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Suggestion text for a command item (e.g., keyboard shortcut).\r\n *\r\n * @component\r\n * @param {React.ReactNode} props.children - The suggestion text to display.\r\n * \r\n * @example\r\n * <CommandItemSuggestionText>Ctrl+O</CommandItemSuggestionText>\r\n */\r\nconst CommandItemSuggestionText = ({ children }) => (\r\n    <span className=\"text-gray-400 ml-auto mr-1\">{children}</span>\r\n);\r\n\r\nexport {\r\n    Command,\r\n    CommandGroup,\r\n    CommandItem,\r\n    CommandItemIcon,\r\n    CommandItemText,\r\n    CommandItemSuggestionText,\r\n};\r\n\n```\n",
  "Datatable": "```javascript\n/**\r\n * @file Provides a set of reusable components for creating data tables.\r\n *\r\n * This module offers a collection of components that can be combined to build customizable\r\n * and visually appealing data tables. The components handle the basic structure and styling,\r\n * allowing you to focus on presenting your data effectively.\r\n */\r\nimport React from 'react';\r\n\r\n/**\r\n * The main Datatable component, representing the entire table.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content of the table, including table head, body, rows, and cells.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the table container.\r\n */\r\nexport default function Datatable({ children, className }) {\r\n  return (\r\n    <table className={`bg-gray-900 rounded-md border border-gray-500 ${className}`}>\r\n      {children}\r\n    </table>\r\n  );\r\n}\r\n\r\n/**\r\n * The table header component, typically containing column headings.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content of the table header, usually `TableHeadingCell` components.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the table header.\r\n */\r\nexport function TableHead({ children, className }) {\r\n  return (\r\n    <thead className={`${className}`}>{children}</thead>\r\n  );\r\n}\r\n\r\n/**\r\n * The table body component, containing the main data rows.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content of the table body, typically `TableRow` components.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the table body.\r\n */\r\nexport function TableBody({ children, className }) {\r\n  return (\r\n    <tbody className={`m-2 border-t border-t-orange-700 space-x-1 ${className}`}>\r\n      {children}\r\n    </tbody>\r\n  );\r\n}\r\n\r\n/**\r\n * A single row within the table body.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content of the table row, usually `TableCell` components.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the table row.\r\n */\r\nexport function TableRow({ children, className }) {\r\n  return (\r\n    <tr className={` px-2 border-b border-gray-500 ${className}`}>{children}</tr>\r\n  );\r\n}\r\n\r\n/**\r\n * A standard data cell within a table row.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content to display within the table cell.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the table cell.\r\n */\r\nexport function TableCell({ children, className }) {\r\n  return (\r\n    <td className={`rounded-md  px-2 py-1 ${className}`}>{children}</td>\r\n  );\r\n}\r\n\r\n/**\r\n * A header cell, typically used within the `TableHead` component for column headings.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content to display within the header cell.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the header cell.\r\n */\r\nexport function TableHeadingCell({ children, className }) {\r\n  return (\r\n    <th className={` p-2 ${className}`}>{children}</th>\r\n  );\r\n}\r\n\n```\n",
  "Dilog": "```javascript\n/**\r\n * @file Provides a set of components for creating context menus (right-click menus).\r\n *\r\n * This module offers a way to easily implement context menus within your application.\r\n * It includes components for the container, menu content, menu groups, and individual menu items.\r\n *\r\n * @example\r\n * // Basic usage:\r\n * <DilogContener rightclick={() => console.log('Menu clicked!')}>\r\n *   <DilogContent>\r\n *     <span>Right-click me</span>\r\n *   </DilogContent>\r\n *   <DilogMenuContent>\r\n *     <DilogMenuGroup title=\"Actions\">\r\n *       <DilogMenuList>Option 1</DilogMenuList>\r\n *       <DilogMenuList>Option 2</DilogMenuList>\r\n *     </DilogMenuGroup>\r\n *   </DilogMenuContent>\r\n * </DilogContener>\r\n */\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\n/**\r\n * The main container component for the context menu.\r\n *\r\n * This component wraps the main content and the context menu content.\r\n * It handles the right-click event and displays the menu at the appropriate position.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the container.\r\n * @param {function} [props.rightclick] - A callback function triggered when the container is right-clicked.\r\n * @param {React.ReactNode} props.children - The content of the container.\r\n *   This should be two children: the main content wrapped in `DilogContent` and \r\n *   the context menu content wrapped in `DilogMenuContent`.\r\n */\r\nexport default function DilogContener({ className, rightclick, children }) {\r\n    const [DilogIsOpen, setdilogisopen] = useState(false);\r\n    const [dilogPosition, setDilogPosition] = useState({ x: 0, y: 0 });\r\n    const menuRef = useRef(null);\r\n\r\n    /**\r\n     * Handles the right-click event on the container.\r\n     *\r\n     * @param {MouseEvent} e - The MouseEvent object.\r\n     */\r\n    const handleRightClick = (e) => {\r\n        e.preventDefault(); // Prevent default right-click menu\r\n        rightclick && rightclick(); // Execute the provided callback\r\n        setdilogisopen(!DilogIsOpen); // Toggle menu visibility\r\n        const rect = e.target.getBoundingClientRect(); // Get container's position\r\n\r\n        // Set menu position relative to the container\r\n        setDilogPosition({\r\n            x: e.clientX - rect.left,\r\n            y: e.clientY - rect.top\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Handles clicks outside of the context menu.\r\n     *\r\n     * @param {MouseEvent} event - The MouseEvent object.\r\n     */\r\n    const handleClickOutside = (event) => {\r\n        if (menuRef.current && !menuRef.current.contains(event.target)) {\r\n            setdilogisopen(false); // Close the menu if clicked outside\r\n        }\r\n    };\r\n\r\n    // Attach and detach the click outside event listener\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            onContextMenu={handleRightClick}\r\n            className={`relative ${className}`}\r\n        >\r\n            {children[0]} {/* Render the main content */}\r\n            {DilogIsOpen && (\r\n                <div\r\n                    ref={menuRef}\r\n                    style={{ top: `${dilogPosition.y}px`, left: `${dilogPosition.x}px` }}\r\n                    className=\"absolute transform z-10 \"\r\n                >\r\n                    {children[1]} {/* Render the context menu content */}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * A wrapper component for the context menu content.\r\n *\r\n * This component provides basic styling for the menu.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content of the menu.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the menu content.\r\n */\r\nexport const DilogMenuContent = ({ children, className }) => {\r\n    return (\r\n        <div className={`rounded-md border border-gray-500 bg-gray-900 ${className} `}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * A component to group menu items within the context menu.\r\n *\r\n * This component allows you to visually group related menu items and provide a title for the group.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The menu items to group.\r\n * @param {string} [props.title] - The title for the group.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the group.\r\n */\r\nexport const DilogMenuGroup = ({ children, title, className }) => {\r\n    return (\r\n        <div className={`w-full p-2 flex flex-col gap-1 mb-1 ${className}`}>\r\n            <div className='flex items-center gap-1'>\r\n                <span className='text-gray-500 my-2'>\r\n                    {title}\r\n                </span>\r\n                <hr className='flex-grow border-t border-gray-500' />\r\n            </div>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * A component for individual menu items within the context menu.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content of the menu item.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the menu item.\r\n */\r\nexport const DilogMenuList = ({ children, className }) => {\r\n    return (\r\n        <div className={`hover:bg-gray-800 w-full px-1 py-0.5 rounded-sm flex justify-between ${className}`}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * A wrapper component for the main content within the `DilogContener`.\r\n *\r\n * This component helps to separate the main content from the context menu content.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The main content to display.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the content.\r\n */\r\nexport const DilogContent = ({ children, className }) => {\r\n    return (\r\n        <div className={`w-full h-full ${className}`}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\n```\n",
  "Dropdown": "```javascript\n\"use client\";\r\n\r\nimport React, { useState, useRef, useEffect, createContext, useContext } from 'react';\r\n\r\nconst DropdownContext = createContext();\r\n\r\n/**\r\n * @typedef {Object} DropdownProps\r\n * @property {string} [className] - Additional CSS class names to apply to the dropdown container.\r\n * @property {React.ReactNode} children - The dropdown items to be displayed.\r\n * @property {string|number} [value] - The currently selected value (for single selection).\r\n * @property {function} [onChange] - A callback function that is triggered when the selected value changes.\r\n * @property {string} [placeholder] - The placeholder text to display when no value is selected.\r\n * @property {boolean} [multiple] - Whether to allow multiple selections. Defaults to false.\r\n * \r\n * A customizable dropdown component for selecting single or multiple values.\r\n * \r\n * @param {DropdownProps} props - The properties for the dropdown component.\r\n * @returns {JSX.Element} The rendered dropdown component.\r\n */\r\nexport default function Dropdown({ className, children, value, onChange, placeholder = \"Select an option\", multiple = false }) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [multipleSelection, setMultipleSelection] = useState([]);\r\n    const [positionUpwards, setPositionUpwards] = useState(false);\r\n    const dropdownRef = useRef(null);\r\n\r\n    // Context value to share state with DropdownItem\r\n    const contextValue = { handleChange, multipleSelection, multiple };\r\n\r\n    // Determine dropdown positioning (upward or downward)\r\n    useEffect(() => {\r\n        if (isOpen && dropdownRef.current) {\r\n            const rect = dropdownRef.current.getBoundingClientRect();\r\n            setPositionUpwards(window.innerHeight - rect.bottom < 200); // Open upwards if not enough space below\r\n        }\r\n    }, [isOpen]);\r\n\r\n    /**\r\n     * Handles changes in the selected value(s).\r\n     * \r\n     * @param {string|number} newValue - The new selected value.\r\n     */\r\n    function handleChange(newValue) {\r\n        if (onChange && multiple) {\r\n            if (!multipleSelection.includes(newValue)) {\r\n                const newSelection = [...multipleSelection, newValue];\r\n                setMultipleSelection(newSelection);\r\n                onChange(newSelection);\r\n            } else {\r\n                const filteredSelection = multipleSelection.filter(item => item !== newValue);\r\n                setMultipleSelection(filteredSelection);\r\n                onChange(filteredSelection);\r\n            }\r\n            setSearch(\"\");\r\n        } else if (onChange) {\r\n            onChange(newValue);\r\n            setIsOpen(false);\r\n            setSearch(\"\");\r\n        }\r\n    }\r\n\r\n    // Filter children for search if there are more than 5 items\r\n    const filteredChildren = React.Children.count(children) > 5\r\n        ? React.Children.toArray(children).filter(child => {\r\n            const content = child.props.value || child.props.children;\r\n            return content.toLowerCase().includes(search.toLowerCase());\r\n        })\r\n        : children;\r\n\r\n    return (\r\n        <DropdownContext.Provider value={contextValue}>\r\n\r\n            <style>\r\n                {`\r\n                /* Custom Scrollbar Styles */\r\n                .custom-scrollbar::-webkit-scrollbar {\r\n                    width: 10px;\r\n                    height: 10px;\r\n                }\r\n\r\n                .custom-scrollbar::-webkit-scrollbar-track {\r\n                    background-color: #333;\r\n                    border-radius: 8px;\r\n                }\r\n\r\n                .custom-scrollbar::-webkit-scrollbar-thumb {\r\n                    background-color: #555;\r\n                    border-radius: 8px;\r\n                    border: 2px solid transparent;\r\n                    background-clip: content-box;\r\n                }\r\n\r\n                .custom-scrollbar::-webkit-scrollbar-thumb:hover {\r\n                    background-color: #444;\r\n                }\r\n\r\n                .custom-scrollbar {\r\n                    scrollbar-width: thin;\r\n                    scrollbar-color: #555 #333;\r\n                    scrollbar-gutter: stable;\r\n                }\r\n                `}\r\n            </style>\r\n            <div className={`relative mt-1 ${className}`} ref={dropdownRef}>\r\n                <div onClick={() => setIsOpen(!isOpen)}\r\n                    className=\"placeholder:text-gray-400 hover:bg-opacity-70 bg-gray-900 cursor-pointer p-2 border rounded-md relative w-full flex items-center justify-between border-gray-500 shadow-sm sm:text-sm focus:border disabled:bg-gray-900/90 disabled:cursor-not-allowed\"\r\n                >\r\n                    <div className='flex items-center gap-1 flex-wrap'>\r\n                        {multiple && multipleSelection.length > 0 ? (\r\n                            multipleSelection.map((item, index) => (\r\n                                <span key={index} className='px-2 py-1 bg-slate-500/90 text-sm rounded-md'>{item}</span>\r\n                            ))\r\n                        ) : value ? (\r\n                            <span>{value}</span>\r\n                        ) : (\r\n                            <span className=\"text-gray-500\">{placeholder}</span>\r\n                        )}\r\n                    </div>\r\n                    <svg\r\n                        className={`w-5 h-5 transition-transform transform ${isOpen ? 'rotate-180' : ''}`}\r\n                        viewBox=\"0 0 20 20\"\r\n                        fill=\"currentColor\"\r\n                    >\r\n                        <path\r\n                            fillRule=\"evenodd\"\r\n                            d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\r\n                            clipRule=\"evenodd\"\r\n                        />\r\n                    </svg>\r\n                </div>\r\n                {isOpen && (\r\n                    <div className={`absolute z-10 border rounded-md overflow-hidden  shadow-md mt-1 w-full ${positionUpwards ? 'bottom-full mb-1' : 'top-full mt-1'}`}>\r\n                        <ul className=\"max-h-80 overflow-auto custom-scrollbar py-1 flex flex-col gap-1 bg-gray-900\">\r\n                            {(React.Children.count(children) > 5) && (\r\n                                <div className=\"px-2 py-1\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"border bg-black rounded-md px-1 py-1 w-full\"\r\n                                        value={search}\r\n                                        onChange={(e) => setSearch(e.target.value)}\r\n                                        placeholder=\"Search...\"\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                            {filteredChildren.map((child, index) => (\r\n                                <li key={index}>{child}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </DropdownContext.Provider>\r\n    );\r\n}\r\n\r\n/**\r\n * @typedef {Object} DropdownItemProps\r\n * @property {React.ReactNode} children - The content of the dropdown item.\r\n * @property {string|number} [value] - The value associated with the dropdown item.\r\n * \r\n * @param {DropdownItemProps} props - The properties for the dropdown item.\r\n * @returns {JSX.Element} The rendered dropdown item.\r\n */\r\nexport const DropdownItem = ({ children, value }) => {\r\n    const { handleChange, multipleSelection, multiple } = useContext(DropdownContext);\r\n\r\n    return (\r\n        <div\r\n            onClick={() => handleChange(value || children)}\r\n            className={`px-2 py-2 cursor-pointer hover:bg-gray-800/90 ${multiple && multipleSelection.includes(value || children) ? \"bg-gray-800/90\" : \"\"}`}\r\n        >\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\n```\n",
  "Input": "```javascript\nimport React, { useState } from 'react';\r\n\r\n/**\r\n * A basic input component for text and other input types.\r\n * \r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {string} props.id - The ID attribute for the input element.\r\n * @param {string} [props.error] - An error message to display below the input.\r\n * @param {string} [props.type='text'] - The type attribute for the input element.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the input element.\r\n * @param {string} [props.value] - The value of the input element.\r\n * @param {string} [props.placeholder] - The placeholder text for the input element.\r\n * @param {boolean} [props.disabled=false] - Whether the input element is disabled.\r\n * @param {function} [props.onChange] - A callback function triggered when the input value changes.\r\n * @param {Object} [props....rest] - Any other props are spread to the underlying `<input>` element.\r\n * \r\n * @example\r\n * // Basic usage\r\n * <Input id=\"name\" placeholder=\"Enter your name\" />\r\n * \r\n * @example\r\n * // With error message\r\n * <Input id=\"email\" type=\"email\" error=\"Invalid email address\" />\r\n * \r\n * @example\r\n * // Controlled input\r\n * <Input id=\"username\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n */\r\nconst Input = ({ id, error, type = 'text', className, value, placeholder, disabled = false, onChange, ...rest }) => {\r\n\r\n    const handleChange = (e) => {\r\n        onChange && onChange(e);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                {...rest}\r\n                id={id}\r\n                value={value}\r\n                type={type}\r\n                onChange={handleChange}\r\n                placeholder={placeholder}\r\n                className={`mt-1 p-2 block w-full rounded-md placeholder:text-gray-400 bg-gray-900 border  border-gray-500 shadow-sm sm:text-sm focus:border  disabled:bg-gray-900/90 disabled:cursor-not-allowed hover:bg-opacity-70 ${error ? 'border-red-500' : ''}  ${className}`}\r\n                disabled={disabled}\r\n            />\r\n            {error && <p className=\"mt-2 text-sm text-red-600\">{error}</p>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n\n```\n",
  "InputRange": "```javascript\nimport React from 'react';\r\n\r\n/**\r\n * A customizable range input component.\r\n *\r\n * @component\r\n * @param {Object} props - The component's props.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the input element.\r\n * @param {number} [props.value] - The current value of the range input. Defaults to the `min` value.\r\n * @param {number} [props.min=0] - The minimum value for the range input.\r\n * @param {number} [props.max=100] - The maximum value for the range input.\r\n * @param {number} [props.step=1] - The stepping interval for the range input.\r\n * @param {Object} [props....rest] - Any other props are spread to the underlying `<input type=\"range\">` element.\r\n *\r\n * @example\r\n * // Basic usage\r\n * <InputRange />\r\n *\r\n * @example\r\n * // With custom value, min, max, and step\r\n * <InputRange value={50} min={0} max={200} step={10} />\r\n */\r\nfunction InputRange({ className, value, min = 0, max = 100, step = 1, ...rest }) {\r\n  let initialValue = value || min;\r\n  return (\r\n    <input\r\n      type=\"range\"\r\n      className={`h-2  bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700 before:bg-blue-500 after:bg-gray-400 ${className}`}\r\n      min={min}\r\n      max={max}\r\n      value={initialValue}\r\n      step={step}\r\n      {...rest}\r\n    />\r\n  );\r\n}\r\n\r\nexport default InputRange;\r\n\n```\n",
  "Label": "```javascript\n/**\r\n * Renders a label element with default styling and optional class names.\r\n *\r\n * @component\r\n *\r\n * @param {string} htmlFor - The ID of the element that the label is associated with.\r\n * @param {ReactNode} children - The content of the label.\r\n * @param {string} [className] - Additional class names to apply to the label.\r\n * @param {object} [...rest] - Any other props to pass to the label element.\r\n *\r\n * @returns {JSX.Element} The rendered label element.\r\n *\r\n * @example\r\n * <Label htmlFor=\"name\">Name:</Label>\r\n */\r\nexport default function Label({ htmlFor, children, className, ...rest }) {\r\n    return (\r\n        <label\r\n            htmlFor={htmlFor}\r\n            className={`block text-sm text-gray-400 ${className}`}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </label>\r\n    );\r\n}\r\n\n```\n",
  "Mdview": "```javascript\nimport React, { useRef, useState } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\n\r\n/**\r\n * A component that renders markdown content with syntax highlighting and GitHub Flavored Markdown (GFM) support.\r\n *\r\n * @param {object} props - The component props.\r\n * @param {string} props.children - The markdown content to render.\r\n *\r\n * @returns {JSX.Element} The rendered markdown content with a \"Copy to Clipboard\" button.\r\n *\r\n * @example\r\n *\r\n * const markdownContent = `\r\n * # Hello, world!\r\n *\r\n * This is an example of markdown content.\r\n *\r\n * `;\r\n *\r\n * <MdView>{markdownContent}</MdView>;\r\n *\r\n */\r\nexport default function MdView({ children }) {\r\n\tconst contentRef = useRef(null);\r\n\tconst [copied, setCopied] = useState(false);\r\n\r\n\t// Function to copy rendered visible text content to clipboard\r\n\tconst copyToClipboard = () => {\r\n\t\tif (contentRef.current) {\r\n\t\t\tconst visibleText = contentRef.current.textContent; // Get only visible text\r\n\t\t\tnavigator.clipboard.writeText(visibleText);\r\n\t\t\tsetCopied(true); // Set copied to true immediately\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetCopied(false);\r\n\t\t\t}, 10000);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"relative p-1 pb-0 min-h-min w-full overflow-auto group moderscroller\">\r\n\t\t\t<button\r\n\t\t\t\tonClick={copyToClipboard}\r\n\t\t\t\tclassName=\"absolute top-2 right-2 px-3 py-1 transition-colors duration-200 bg-gray-900 border border-gray-900 hover:border-transparent text-sm font-medium text-white rounded hidden group-hover:block\"\r\n\t\t\t>\r\n\t\t\t\t{copied ? 'Copied!' : 'Copy to Clipboard'}\r\n\t\t\t</button>\r\n\t\t\t<div ref={contentRef}>\r\n\t\t\t\t<ReactMarkdown remarkPlugins={[remarkGfm]} className=\"markdown-container\">\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</ReactMarkdown>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\n```\n",
  "Navbar": "```javascript\nimport Link from 'next/link';\r\nimport React from 'react';\r\n\r\n/**\r\n * Represents a navigation bar component.\r\n *\r\n * @param {object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The children of the navbar.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the navbar.\r\n * @param {boolean} [props.vertical=false] - Whether the navbar should be displayed vertically.\r\n * @returns {JSX.Element} The rendered navbar component.\r\n */\r\nexport default function Navbar({ children, className, vertical = false }) {\r\n\tconst navStyle = `flex ${vertical ? 'flex-col w-52' : 'flex-row items-center max-h-28'} gap-2 justify-between`;\r\n\treturn (\r\n\t\t<nav className={`${className} ${navStyle}`}>\r\n\t\t\t{children}\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\n/**\r\n * Represents a navigation link within a navbar.\r\n *\r\n * @param {object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The text content of the link.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the link.\r\n * @param {string} props.href - The URL or route to navigate to when the link is clicked.\r\n * @param {boolean} [props.active=false] - Whether the link is currently active.\r\n * @returns {JSX.Element} The rendered navigation link.\r\n */\r\nexport function NavLink({ children, className, href, active = false, ...rest }) {\r\n\treturn (\r\n\t\t<Link\r\n\t\t\thref={href}\r\n\t\t\t{...rest}\r\n\t\t\tclassName={`text-sm font-medium text-white hover:bg-gray-900 px-3 py-2 rounded-md ${className} ${active ? 'bg-gray-900' : ''}`}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</Link>\r\n\t);\r\n}\r\n\r\n/**\r\n * Represents a group of navigation links within a navbar.\r\n *\r\n * @param {object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The navigation links to be grouped.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the group.\r\n * @param {boolean} [props.vertical=false] - Whether the group should be displayed vertically.\r\n * @returns {JSX.Element} The rendered navigation group.\r\n */\r\nexport function NavGroup({ className, children, vertical = false }) {\r\n\tconst navGroupStyle = `flex ${vertical ? 'flex-col w-52' : 'flex-row'} text-white px-3 py-2 gap-1 items-center justify-start`;\r\n\treturn (\r\n\t\t<ul className={`${className} ${navGroupStyle}`}>\r\n\t\t\t{children}\r\n\t\t</ul>\r\n\t);\r\n}\r\n\r\n/**\r\n * Represents a header section within a navbar.\r\n *\r\n * @param {object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content of the header section.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the header.\r\n * @returns {JSX.Element} The rendered header section.\r\n */\r\nexport function NavHead({ className, children }) {\r\n\r\n\treturn (\r\n\t\t<div className={`text-lg font-bold px-4 py-3  text-white text-left ${className}`}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n/**\r\n * Represents a footer section within a navbar.\r\n *\r\n * @param {object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The content of the footer section.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the footer.\r\n * @param {boolean} [props.vertical=false] - Whether the footer should be displayed vertically.\r\n * @returns {JSX.Element} The rendered footer section.\r\n */\r\nexport function NavFoot({ className, children, vertical = false }) {\r\n\tconst navFootStyle = `flex ${vertical ? 'flex-col w-52 ' : 'flex-row items-center justify-start'} text-white px-4 py-3 `;\r\n\treturn (\r\n\t\t<div className={`${className} ${navFootStyle}`}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\n```\n",
  "ProgressBar": "```javascript\n/**\r\n * A simple and customizable progress bar component.\r\n *\r\n * @param {object} props - The component's props.\r\n * @param {number} props.progress - The progress percentage to display (0-100).\r\n * @param {string} [props.className] - Additional CSS classes to apply to the progress bar container.\r\n * @returns {JSX.Element} The rendered progress bar component.\r\n *\r\n * @example\r\n * // Basic usage with 50% progress\r\n * <ProgressBar progress={50} />\r\n *\r\n * @example\r\n * // With custom class name for styling\r\n * <ProgressBar progress={75} className=\"my-custom-progress-bar\" />\r\n */\r\nconst ProgressBar = ({ progress, className }) => {\r\n    return (\r\n        <div className={`w-full mx-auto ${className} `} >\r\n            <div className=\"relative w-full bg-gray-200 rounded-lg h-3 overflow-hidden\">\r\n                <div\r\n                    className=\"absolute h-full bg-blue-600 rounded-lg  \"\r\n                    style={{ width: `${progress}% ` }}\r\n                >\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;\r\n\n```\n",
  "Resizable": "```javascript\n'use client';\r\nimport React, { useState, useRef } from 'react';\r\n\r\n/**\r\n * A group of resizable panels that can be resized horizontally or vertically.\r\n *\r\n * @param {object} props - The component props.\r\n * @param {'horizontal'|'vertical'} [props.direction='horizontal'] - The direction of the resize.\r\n * @param {React.ReactNode} props.children - The children of the panel group.\r\n * @returns {JSX.Element} The rendered panel group.\r\n * \r\n * @example\r\n * // Horizontal resizing\r\n * <ResizablePanelGroup>\r\n *   <ResizablePanel defaultSize={200}>Panel 1</ResizablePanel>\r\n *   <ResizablePanel>Panel 2</ResizablePanel>\r\n * </ResizablePanelGroup>\r\n * \r\n * @example\r\n * // Vertical resizing\r\n * <ResizablePanelGroup direction=\"vertical\">\r\n *   <ResizablePanel defaultSize={150}>Panel 1</ResizablePanel>\r\n *   <ResizablePanel>Panel 2</ResizablePanel>\r\n * </ResizablePanelGroup>\r\n */\r\nconst ResizablePanelGroup = ({ direction = 'horizontal', children }) => {\r\n    const isHorizontal = direction === 'horizontal';\r\n    return (\r\n        <div className={`flex ${isHorizontal ? 'flex-row' : 'flex-col'} h-full w-full`} >\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * A single resizable panel within a ResizablePanelGroup.\r\n *\r\n * @param {object} props - The component props.\r\n * @param {number} [props.defaultSize=300] - The default size of the panel in pixels.\r\n * @param {'horizontal'|'vertical'} [props.direction='horizontal'] - The direction of the resize.\r\n * @param {React.ReactNode} props.children - The children of the panel.\r\n * @returns {JSX.Element} The rendered panel.\r\n */\r\nconst ResizablePanel = ({ defaultSize = 300, direction = 'horizontal', children }) => {\r\n    const [size, setSize] = useState(defaultSize);\r\n    const panelRef = useRef(null);\r\n    const isHorizontal = direction === 'horizontal';\r\n\r\n    const handleMouseMove = (e) => {\r\n        e.preventDefault();\r\n\r\n        const boundingRect = panelRef.current.getBoundingClientRect();\r\n\r\n        if (isHorizontal) {\r\n            const newWidth = e.clientX - boundingRect.left;\r\n            setSize(newWidth);\r\n        } else {\r\n            const newHeight = e.clientY - boundingRect.top;\r\n            setSize(newHeight);\r\n        }\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n        document.removeEventListener('mousemove', handleMouseMove);\r\n        document.removeEventListener('mouseup', handleMouseUp);\r\n    };\r\n\r\n    const handleMouseDown = (e) => {\r\n        e.preventDefault(); // Prevent text selection when dragging the resize handle\r\n        document.addEventListener('mousemove', handleMouseMove);\r\n        document.addEventListener('mouseup', handleMouseUp);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            ref={panelRef}\r\n            className=\"relative flex-grow\"\r\n            style={{\r\n                width: isHorizontal ? `${size}px` : '100%',\r\n                height: isHorizontal ? '100%' : `${size}px`,\r\n            }}\r\n        >\r\n            <div className=\"h-full w-full overflow-auto\">{children}</div>\r\n            {/* Resizing handle */}\r\n            <div\r\n                className={`absolute ${isHorizontal ? 'right-0 top-0 h-full' : 'bottom-0 left-0 w-full'\r\n                    } bg-gray-500 cursor-${isHorizontal ? 'ew-resize' : 'ns-resize'}`}\r\n                style={{\r\n                    width: isHorizontal ? '5px' : '100%',\r\n                    height: isHorizontal ? '100%' : '5px',\r\n                    cursor: isHorizontal ? 'col-resize' : 'row-resize' \r\n                }}\r\n                onMouseDown={handleMouseDown}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { ResizablePanelGroup, ResizablePanel };\r\n\n```\n",
  "ScrollArea": "```javascript\nimport React from 'react';\r\n\r\n/**\r\n * @typedef {Object} ScrollPosition\r\n * @property {number} top - The vertical scroll position.\r\n * @property {number} left - The horizontal scroll position.\r\n */\r\n\r\n/**\r\n * A React component that provides a scrollable area with custom scrollbar styles.\r\n *\r\n * This component applies a set of custom CSS styles to create a visually appealing scrollbar.\r\n * It does not inherently control the scrolling behavior or orientation.\r\n *\r\n * @component\r\n * @param {Object} props\r\n * @param {React.ReactNode} props.children - The content to be displayed within the scrollable area.\r\n * @param {string} [props.className=''] - Additional CSS classes to apply to the scrollable area.\r\n * @returns {JSX.Element} The rendered scrollable area component.\r\n *\r\n * @example\r\n * // Basic usage\r\n * <ScrollArea>\r\n *   <div style={{ width: '2000px', height: '1000px' }}>\r\n *     Long and tall content here...\r\n *   </div>\r\n * </ScrollArea>\r\n */\r\nfunction ScrollArea({ children, className = '' }) {\r\n  return (\r\n    <>\r\n      <style>\r\n        {`\r\n                /* Custom Scrollbar Styles */\r\n                .custom-scrollbar::-webkit-scrollbar {\r\n                    width: 12px;\r\n                    height: 12px;\r\n                }\r\n\r\n                .custom-scrollbar::-webkit-scrollbar-track {\r\n                    background-color: #e0e0e0;\r\n                    border-radius: 10px;\r\n                }\r\n\r\n                .custom-scrollbar::-webkit-scrollbar-thumb {\r\n                    background-color: #888;\r\n                    border-radius: 10px;\r\n                    border: 2px solid #f4f4f4;\r\n                }\r\n\r\n                .custom-scrollbar::-webkit-scrollbar-thumb:hover {\r\n                    background-color: #555;\r\n                }\r\n\r\n                .custom-scrollbar {\r\n                    scrollbar-width: thin;\r\n                    scrollbar-color: #888 #00000000;\r\n                }\r\n                `}\r\n      </style>\r\n      <div className={`custom-scrollbar overflow-auto  ${className}`}>\r\n        {children}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ScrollArea;\r\n\r\n\n```\n",
  "Tabs": "```javascript\n// components/Tabs.js\r\n\"use client\";\r\nimport React, { useState, createContext, useContext } from \"react\";\r\n\r\n/**\r\n * @typedef {Object} TabsContextValue\r\n * @property {number} activeKey - The currently active tab's key.\r\n * @property {function(number): void} handleTabClick - Function to handle tab clicks and update the active tab.\r\n */\r\n\r\n/**\r\n * @context TabsContext\r\n * @description Context for managing tab state and behavior.\r\n */\r\nconst TabsContext = createContext();\r\n\r\n/**\r\n * Tabs component for creating a tabbed interface.\r\n *\r\n * @component\r\n * @param {Object} props - Component props.\r\n * @param {React.ReactNode} props.children - Child components representing tabs and their content.\r\n * @param {number} [props.defaultActiveKey=0] - The key of the tab that should be active by default.\r\n * @returns {JSX.Element} The rendered Tabs component.\r\n *\r\n * @example\r\n * ```jsx\r\n * <Tabs defaultActiveKey={1}>\r\n *   <TabList>\r\n *     <TabTrigger tabKey={0}>Tab 1</TabTrigger>\r\n *     <TabTrigger tabKey={1}>Tab 2</TabTrigger>\r\n *   </TabList>\r\n *   <TabContent tabKey={0}>Content for Tab 1</TabContent>\r\n *   <TabContent tabKey={1}>Content for Tab 2</TabContent>\r\n * </Tabs>\r\n * ```\r\n */\r\nexport default function Tabs({ children, defaultActiveKey = 0, className }) {\r\n  const [activeKey, setActiveKey] = useState(defaultActiveKey);\r\n\r\n  /**\r\n   * Handles tab clicks and updates the active tab.\r\n   *\r\n   * @param {number} key - The key of the clicked tab.\r\n   */\r\n  const handleTabClick = (key) => {\r\n    setActiveKey(key);\r\n  };\r\n\r\n  return (\r\n    <TabsContext.Provider value={{ activeKey, handleTabClick }}>\r\n      <div className={`w-full mx-auto  ${className}`}>{children}</div>\r\n    </TabsContext.Provider>\r\n  );\r\n}\r\n\r\n/**\r\n * TabList component for grouping TabTrigger components.\r\n *\r\n * @component\r\n * @param {Object} props - Component props.\r\n * @param {React.ReactNode} props.children - Child TabTrigger components.\r\n * @param {string} [props.className] - Additional CSS class names to apply to the TabList container.\r\n * @returns {JSX.Element} The rendered TabList component.\r\n */\r\nexport function TabList({ children, className }) {\r\n  return <div className={` flex gap-1 mb-4 ${className}`}>{children}</div>;\r\n}\r\n\r\n/**\r\n * TabTrigger component representing a single tab that can be clicked to activate its corresponding TabContent.\r\n *\r\n * @component\r\n * @param {Object} props - Component props.\r\n * @param {React.ReactNode} props.children - The content to display within the tab trigger.\r\n * @param {number} props.tabKey - A unique key to identify the tab and associate it with its content.\r\n * @param {string} [props.className] - Additional CSS class names to apply to the TabTrigger button.\r\n * @returns {JSX.Element} The rendered TabTrigger component.\r\n *\r\n * @throws {Error} If the `tabKey` prop is not provided.\r\n */\r\nexport function TabTrigger({ children, tabKey, className }) {\r\n  if (tabKey === undefined) {\r\n    throw new Error(\"TabTrigger component requires a 'tabKey' prop.\");\r\n  }\r\n\r\n  const { activeKey, handleTabClick } = useContext(TabsContext);\r\n\r\n  return (\r\n    <button\r\n      onClick={() => handleTabClick(tabKey)}\r\n      className={` rounded-lg transition-colors duration-200 bg-gray-900 border border-gray-900 hover:border-transparent px-3 py-1.5 text-base font-medium hover:bg-opacity-70  ${activeKey === tabKey ? \"bg-gray-950  text-white\" : \"bg-gray-900 text-gray-400\"} ${className}`}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\n/**\r\n * TabContent component representing the content associated with a specific tab.\r\n *\r\n * @component\r\n * @param {Object} props - Component props.\r\n * @param {React.ReactNode} props.children - The content to display when the associated tab is active.\r\n * @param {number} props.tabKey - A unique key to identify the tab content and associate it with its trigger.\r\n * @param {string} [props.className] - Additional CSS class names to apply to the TabContent container.\r\n * @returns {JSX.Element|null} The rendered TabContent component or null if the tab is not active.\r\n *\r\n * @throws {Error} If the `tabKey` prop is not provided.\r\n */\r\nexport function TabContent({ children, tabKey, className }) {\r\n  if (tabKey === undefined) {\r\n    throw new Error(\"TabContent component requires a 'tabKey' prop.\");\r\n  }\r\n\r\n  const { activeKey } = useContext(TabsContext);\r\n\r\n  return (\r\n    activeKey === tabKey && (\r\n      <div className={`${className}`}>{children}</div>\r\n    )\r\n  );\r\n}\r\n\n```\n",
  "Tooltip": "```javascript\n\"use client\";\r\nimport { useState } from 'react';\r\n\r\n\r\n/**\r\n * @description A reusable Tooltip component that displays a tooltip on hover.\r\n *\r\n * @param {object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The children of the Tooltip component, which will trigger the tooltip.\r\n * @param {string} props.text - The text to display in the tooltip.\r\n * @param {React.ReactNode} [props.icon] - An optional icon to display in the tooltip.\r\n * @param {'top' | 'bottom' | 'left' | 'right'} [props.position='top'] - The position of the tooltip relative to the children.\r\n * @param {'xs' | 'sm' | 'md' | 'lg'} [props.size='md'] - The size of the tooltip.\r\n * @param {string} [props.className] - Additional CSS classes to apply to the tooltip.\r\n * \r\n * @returns {JSX.Element} The rendered Tooltip component.\r\n * \r\n * @example  <Tooltip text=\"This is a tooltip\">Hover over me</Tooltip>\r\n */\r\nexport default function Tooltip({ children, text, icon, position = 'top', size = 'md', className }) {\r\n    const [showTooltip, setShowTooltip] = useState(false);\r\n\r\n    const tooltipClasses = {\r\n        top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\r\n        bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\r\n        left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\r\n        right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',\r\n    };\r\n\r\n    const sizeClasses = {\r\n        xs: 'text-xs p-2',\r\n        sm: 'text-sm px-2 py-1',\r\n        md: 'text-base px-2.5 py-1.5 ',\r\n        lg: 'text-lg px-3 py-2 ',\r\n    };\r\n\r\n    return (\r\n        <div className=\"relative inline-block\"\r\n            onMouseEnter={() => setShowTooltip(true)}\r\n            onMouseLeave={() => setShowTooltip(false)}>\r\n\r\n            {children}\r\n\r\n            {showTooltip && (\r\n                <div className={`absolute z-10 bg-gray-800 text-white rounded-md  text-base px-2.5 py-1.5  shadow-lg ${tooltipClasses[position]} ${sizeClasses[size]} ${className}`}\r\n                    role=\"tooltip\">\r\n                    <div className=\"flex items-center\">\r\n                        {icon && <div className=\"mr-2\">{icon}</div>}\r\n                        <span>{text}</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\n```\n"
};

export default componentscode;
